
shell.c,4155
#define _CRT_SECURE_NO_WARNINGS17,588
# define readline(45,1138
# define add_history(46,1182
# define read_history(47,1206
# define write_history(48,1231
# define stifle_history(49,1257
#define isatty(54,1347
#define access(55,1376
#define isatty(67,1696
static struct rusage sBegin;75,1947
static int enableTimer 78,2012
static void beginTimer(83,2076
static double timeDiff(90,2230
static void endTimer(98,2443
#define BEGIN_TIMER 108,2702
#define END_TIMER 109,2735
#define HAS_TIMER 110,2764
static HANDLE hProcess;117,2917
static FILETIME ftKernelBegin;118,2941
static FILETIME ftUserBegin;119,2972
typedef BOOL (WINAPI *GETPROCTIMES)GETPROCTIMES120,3001
static GETPROCTIMES getProcessTimesAddr 121,3094
static int enableTimer 124,3178
static int hasTimer(130,3318
static void beginTimer(156,4032
static double timeDiff(164,4296
static void endTimer(173,4550
#define BEGIN_TIMER 183,4900
#define END_TIMER 184,4933
#define HAS_TIMER 185,4962
#define BEGIN_TIMER 188,4998
#define END_TIMER189,5019
#define HAS_TIMER 190,5037
#define UNUSED_PARAMETER(196,5123
static int bail_on_error 202,5272
static int stdin_is_interactive 208,5444
static sqlite3 *db db215,5677
static volatile int seenInterrupt 220,5763
static char *Argv0;Argv0226,5930
static char mainPrompt[mainPrompt232,6038
static char continuePrompt[continuePrompt233,6114
static FILE *iotrace iotrace239,6274
static void iotracePrintf(249,6569
static int isNumber(265,6861
static const char *zShellStatic zShellStatic297,7791
static void shellstaticFunc(298,7828
static char *local_getline(local_getline320,8376
static char *one_input_line(one_input_line368,9328
struct previous_mode_data 386,9727
  int valid;387,9755
  int mode;388,9810
  int showHeader;389,9822
  int colWidth[colWidth390,9840
struct callback_data 398,10030
  sqlite3 *db;db399,10053
  int echoOn;400,10097
  int cnt;401,10156
  FILE *out;out402,10222
  int mode;403,10272
  int writableSchema;404,10326
  int showHeader;405,10391
  char *zDestTable;zDestTable406,10471
  char separator[separator407,10545
  int colWidth[colWidth408,10610
  int actualWidth[actualWidth409,10691
  char nullvalue[nullvalue410,10750
  struct previous_mode_data explainPrev;412,10868
  char outfile[outfile415,11019
  const char *zDbFilename;zDbFilename416,11073
  sqlite3_stmt *pStmt;pStmt417,11135
  FILE *pLog;pLog418,11192
#define MODE_Line 424,11287
#define MODE_Column 425,11367
#define MODE_List 426,11434
#define MODE_Semi 427,11502
#define MODE_Html 428,11579
#define MODE_Insert 429,11634
#define MODE_Tcl 430,11698
#define MODE_Csv 431,11768
#define MODE_Explain 432,11832
static const char *modeDescr[modeDescr434,11907
#define ArraySize(449,12081
static int strlen30(455,12253
static void shellLog(464,12428
static void output_hex_blob(474,12719
static void output_quoted_string(485,13014
static void output_c_string(515,13621
static void output_html_string(544,14235
static const char needCsvQuote[needCsvQuote578,14988
static void output_csv(603,16136
static void interrupt_handler(638,16902
static int shell_callback(649,17136
static int callback(830,22600
static void set_table_name(840,22970
static char *appendText(appendText881,24094
static int run_table_dump_query(926,25049
static char *save_err_msg(save_err_msg953,25799
static int shell_exec(973,26366
static int dump_callback(1093,30617
static int run_schema_dump_query(1191,33629
static char zHelp[zHelp1214,34188
static char zTimerHelp[zTimerHelp1266,37174
static void open_db(1277,37498
static void resolve_backslashes(1305,38243
static int booleanValue(1337,38889
static int do_meta_command(1357,39286
static int _contains_semicolon(2099,62784
static int _all_whitespace(2108,62977
static int _is_command_terminator(2134,63585
static int _is_complete(2150,64068
static int process_input(2169,64630
static char *find_home_dir(find_home_dir2274,67514
static int process_sqliterc(2336,68940
static const char zOptions[zOptions2380,70028
static void usage(2397,70887
static void main_init(2413,71351
int main(2424,71757

sqlite3.c,281287
#define SQLITE_CORE 20,1243
#define SQLITE_AMALGAMATION 21,1265
# define SQLITE_PRIVATE 23,1318
# define SQLITE_API26,1375
#define _SQLITEINT_H_44,1931
# define _LARGE_FILE 66,2922
#   define _FILE_OFFSET_BITS 68,2978
# define _LARGEFILE_SOURCE 70,3018
# define SQLITE_MAX_LENGTH 106,4069
# define SQLITE_MAX_COLUMN 127,4835
# define SQLITE_MAX_SQL_LENGTH 138,5131
# define SQLITE_MAX_EXPR_DEPTH 152,5571
# define SQLITE_MAX_COMPOUND_SELECT 164,6034
# define SQLITE_MAX_VDBE_OP 172,6194
# define SQLITE_MAX_FUNCTION_ARG 179,6329
# define SQLITE_DEFAULT_CACHE_SIZE 187,6550
# define SQLITE_DEFAULT_TEMP_CACHE_SIZE 190,6637
# define SQLITE_MAX_ATTACHED 199,6913
# define SQLITE_MAX_VARIABLE_NUMBER 207,7064
# define SQLITE_MAX_PAGE_SIZE 222,7756
# define SQLITE_DEFAULT_PAGE_SIZE 230,7880
# undef SQLITE_DEFAULT_PAGE_SIZE233,7976
# define SQLITE_DEFAULT_PAGE_SIZE 234,8009
# define SQLITE_MAX_DEFAULT_PAGE_SIZE 245,8435
# undef SQLITE_MAX_DEFAULT_PAGE_SIZE248,8539
# define SQLITE_MAX_DEFAULT_PAGE_SIZE 249,8576
# define SQLITE_MAX_PAGE_COUNT 261,8897
# define SQLITE_MAX_LIKE_PATTERN_LENGTH 269,9067
# define SQLITE_MAX_TRIGGER_DEPTH 280,9373
# define _GNU_SOURCE297,9988
#define SQLITE_INDEX_SAMPLES 315,10343
# define SQLITE_INT_TO_PTR(334,11200
# define SQLITE_PTR_TO_INT(335,11262
# define SQLITE_INT_TO_PTR(337,11395
# define SQLITE_PTR_TO_INT(338,11450
# define SQLITE_INT_TO_PTR(340,11585
# define SQLITE_PTR_TO_INT(341,11639
# define SQLITE_INT_TO_PTR(343,11770
# define SQLITE_PTR_TO_INT(344,11814
# define SQLITE_THREADSAFE 354,12084
# define SQLITE_THREADSAFE 356,12128
# define SQLITE_DEFAULT_MEMSTATUS 367,12481
# define SQLITE_SYSTEM_MALLOC 388,13254
# define SQLITE_MALLOC_SOFT_LIMIT 396,13468
#  define _XOPEN_SOURCE 413,14139
# define NDEBUG 431,14723
# define testcase(450,15520
# define testcase(452,15586
# define TESTONLY(461,15846
# define TESTONLY(463,15876
# define VVA_ONLY(475,16356
# define VVA_ONLY(477,16386
# define ALWAYS(496,17133
# define NEVER(497,17161
# define ALWAYS(499,17212
# define NEVER(500,17258
# define ALWAYS(502,17310
# define NEVER(503,17338
# define likely(513,17646
# define unlikely(514,17692
# define likely(516,17744
# define unlikely(517,17772
#define _SQLITE3_H_555,19479
# define SQLITE_EXTERN 570,19715
# define SQLITE_API574,19772
#define SQLITE_DEPRECATED591,20438
#define SQLITE_EXPERIMENTAL592,20464
# undef SQLITE_VERSION598,20592
# undef SQLITE_VERSION_NUMBER601,20651
#define SQLITE_VERSION 631,22050
#define SQLITE_VERSION_NUMBER 632,22091
#define SQLITE_SOURCE_ID 633,22129
SQLITE_API const char sqlite3_version[sqlite3_version665,23708
typedef struct sqlite3 sqlite3;748,27562
  typedef SQLITE_INT64_TYPE sqlite_int64;767,28285
  typedef unsigned SQLITE_INT64_TYPE sqlite_uint64;768,28327
  typedef __int64 sqlite_int64;770,28428
  typedef unsigned __int64 sqlite_uint64;771,28460
  typedef long long int sqlite_int64;773,28508
  typedef unsigned long long int sqlite_uint64;774,28546
typedef sqlite_int64 sqlite3_int64;776,28601
typedef sqlite_uint64 sqlite3_uint64;777,28637
# define double 784,28825
typedef int (*sqlite3_callback)sqlite3_callback818,30123
#define SQLITE_OK 901,34117
#define SQLITE_ERROR 903,34204
#define SQLITE_INTERNAL 904,34272
#define SQLITE_PERM 905,34341
#define SQLITE_ABORT 906,34404
#define SQLITE_BUSY 907,34478
#define SQLITE_LOCKED 908,34544
#define SQLITE_NOMEM 909,34616
#define SQLITE_READONLY 910,34672
#define SQLITE_INTERRUPT 911,34747
#define SQLITE_IOERR 912,34828
#define SQLITE_CORRUPT 913,34903
#define SQLITE_NOTFOUND 914,34978
#define SQLITE_FULL 915,35052
#define SQLITE_CANTOPEN 916,35132
#define SQLITE_PROTOCOL 917,35203
#define SQLITE_EMPTY 918,35280
#define SQLITE_SCHEMA 919,35336
#define SQLITE_TOOBIG 920,35402
#define SQLITE_CONSTRAINT 921,35474
#define SQLITE_MISMATCH 922,35546
#define SQLITE_MISUSE 923,35603
#define SQLITE_NOLFS 924,35666
#define SQLITE_AUTH 925,35743
#define SQLITE_FORMAT 926,35802
#define SQLITE_RANGE 927,35872
#define SQLITE_NOTADB 928,35953
#define SQLITE_ROW 929,36031
#define SQLITE_DONE 930,36106
#define SQLITE_IOERR_READ 956,37338
#define SQLITE_IOERR_SHORT_READ 957,37401
#define SQLITE_IOERR_WRITE 958,37464
#define SQLITE_IOERR_FSYNC 959,37527
#define SQLITE_IOERR_DIR_FSYNC 960,37590
#define SQLITE_IOERR_TRUNCATE 961,37653
#define SQLITE_IOERR_FSTAT 962,37716
#define SQLITE_IOERR_UNLOCK 963,37779
#define SQLITE_IOERR_RDLOCK 964,37842
#define SQLITE_IOERR_DELETE 965,37905
#define SQLITE_IOERR_BLOCKED 966,37969
#define SQLITE_IOERR_NOMEM 967,38033
#define SQLITE_IOERR_ACCESS 968,38097
#define SQLITE_IOERR_CHECKRESERVEDLOCK 969,38161
#define SQLITE_IOERR_LOCK 970,38225
#define SQLITE_IOERR_CLOSE 971,38289
#define SQLITE_IOERR_DIR_CLOSE 972,38353
#define SQLITE_LOCKED_SHAREDCACHE 973,38417
#define SQLITE_OPEN_READONLY 983,38718
#define SQLITE_OPEN_READWRITE 984,38798
#define SQLITE_OPEN_CREATE 985,38878
#define SQLITE_OPEN_DELETEONCLOSE 986,38958
#define SQLITE_OPEN_EXCLUSIVE 987,39022
#define SQLITE_OPEN_AUTOPROXY 988,39086
#define SQLITE_OPEN_MAIN_DB 989,39150
#define SQLITE_OPEN_TEMP_DB 990,39214
#define SQLITE_OPEN_TRANSIENT_DB 991,39278
#define SQLITE_OPEN_MAIN_JOURNAL 992,39342
#define SQLITE_OPEN_TEMP_JOURNAL 993,39406
#define SQLITE_OPEN_SUBJOURNAL 994,39470
#define SQLITE_OPEN_MASTER_JOURNAL 995,39534
#define SQLITE_OPEN_NOMUTEX 996,39598
#define SQLITE_OPEN_FULLMUTEX 997,39678
#define SQLITE_OPEN_SHAREDCACHE 998,39758
#define SQLITE_OPEN_PRIVATECACHE 999,39838
#define SQLITE_IOCAP_ATOMIC 1021,40798
#define SQLITE_IOCAP_ATOMIC512 1022,40846
#define SQLITE_IOCAP_ATOMIC1K 1023,40894
#define SQLITE_IOCAP_ATOMIC2K 1024,40942
#define SQLITE_IOCAP_ATOMIC4K 1025,40990
#define SQLITE_IOCAP_ATOMIC8K 1026,41038
#define SQLITE_IOCAP_ATOMIC16K 1027,41086
#define SQLITE_IOCAP_ATOMIC32K 1028,41134
#define SQLITE_IOCAP_ATOMIC64K 1029,41182
#define SQLITE_IOCAP_SAFE_APPEND 1030,41230
#define SQLITE_IOCAP_SEQUENTIAL 1031,41278
#define SQLITE_LOCK_NONE 1040,41531
#define SQLITE_LOCK_SHARED 1041,41567
#define SQLITE_LOCK_RESERVED 1042,41603
#define SQLITE_LOCK_PENDING 1043,41639
#define SQLITE_LOCK_EXCLUSIVE 1044,41675
#define SQLITE_SYNC_NORMAL 1060,42307
#define SQLITE_SYNC_FULL 1061,42349
#define SQLITE_SYNC_DATAONLY 1062,42391
typedef struct sqlite3_file sqlite3_file;1075,42861
struct sqlite3_file 1076,42903
  const struct sqlite3_io_methods *pMethods;pMethods1077,42925
typedef struct sqlite3_io_methods sqlite3_io_methods;1167,47045
struct sqlite3_io_methods 1168,47099
  int iVersion;1169,47127
  int (*xClose)xClose1170,47143
  int (*xRead)xRead1171,47175
  int (*xWrite)xWrite1172,47244
  int (*xTruncate)xTruncate1173,47320
  int (*xSync)xSync1174,47375
  int (*xFileSize)xFileSize1175,47417
  int (*xLock)xLock1176,47474
  int (*xUnlock)xUnlock1177,47510
  int (*xCheckReservedLock)xCheckReservedLock1178,47548
  int (*xFileControl)xFileControl1179,47606
  int (*xSectorSize)xSectorSize1180,47664
  int (*xDeviceCharacteristics)xDeviceCharacteristics1181,47701
#define SQLITE_FCNTL_LOCKSTATE 1200,48460
#define SQLITE_GET_LOCKPROXYFILE 1201,48500
#define SQLITE_SET_LOCKPROXYFILE 1202,48540
#define SQLITE_LAST_ERRNO 1203,48580
typedef struct sqlite3_mutex sqlite3_mutex;1215,48966
typedef struct sqlite3_vfs sqlite3_vfs;1346,55195
struct sqlite3_vfs 1347,55235
  int iVersion;1348,55256
  int szOsFile;1349,55314
  int mxPathname;1350,55379
  sqlite3_vfs *pNext;pNext1351,55441
  const char *zName;zName1352,55494
  void *pAppData;pAppData1353,55560
  int (*xOpen)xOpen1354,55630
  int (*xDelete)xDelete1356,55736
  int (*xAccess)xAccess1357,55800
  int (*xFullPathname)xFullPathname1358,55876
  void *(*xDlOpen)xDlOpen1359,55955
  void (*xDlError)xDlError1360,56012
  void (*(*xDlSym)xDlSym1361,56072
  void (*xDlClose)xDlClose1362,56140
  int (*xRandomness)xRandomness1363,56181
  int (*xSleep)xSleep1364,56240
  int (*xCurrentTime)xCurrentTime1365,56289
  int (*xGetLastError)xGetLastError1366,56335
#define SQLITE_ACCESS_EXISTS 1384,57045
#define SQLITE_ACCESS_READWRITE 1385,57079
#define SQLITE_ACCESS_READ 1386,57113
typedef struct sqlite3_mem_methods sqlite3_mem_methods;1593,67728
struct sqlite3_mem_methods 1594,67784
  void *(*xMalloc)xMalloc1595,67813
  void (*xFree)xFree1596,67879
  void *(*xRealloc)xRealloc1597,67942
  int (*xSize)xSize1598,68002
  int (*xRoundup)xRoundup1599,68074
  int (*xInit)xInit1600,68154
  void (*xShutdown)xShutdown1601,68225
  void *pAppData;pAppData1602,68298
#define SQLITE_CONFIG_SINGLETHREAD 1795,78919
#define SQLITE_CONFIG_MULTITHREAD 1796,78968
#define SQLITE_CONFIG_SERIALIZED 1797,79017
#define SQLITE_CONFIG_MALLOC 1798,79066
#define SQLITE_CONFIG_GETMALLOC 1799,79132
#define SQLITE_CONFIG_SCRATCH 1800,79198
#define SQLITE_CONFIG_PAGECACHE 1801,79264
#define SQLITE_CONFIG_HEAP 1802,79330
#define SQLITE_CONFIG_MEMSTATUS 1803,79401
#define SQLITE_CONFIG_MUTEX 1804,79454
#define SQLITE_CONFIG_GETMUTEX 1805,79522
#define SQLITE_CONFIG_LOOKASIDE 1807,79657
#define SQLITE_CONFIG_PCACHE 1808,79710
#define SQLITE_CONFIG_GETPCACHE 1809,79779
#define SQLITE_CONFIG_LOG 1810,79848
#define SQLITE_DBCONFIG_LOOKASIDE 1845,81517
#define SQLITE_DENY 2531,114092
#define SQLITE_IGNORE 2532,114162
#define SQLITE_CREATE_INDEX 2554,115287
#define SQLITE_CREATE_TABLE 2555,115366
#define SQLITE_CREATE_TEMP_INDEX 2556,115445
#define SQLITE_CREATE_TEMP_TABLE 2557,115524
#define SQLITE_CREATE_TEMP_TRIGGER 2558,115603
#define SQLITE_CREATE_TEMP_VIEW 2559,115682
#define SQLITE_CREATE_TRIGGER 2560,115761
#define SQLITE_CREATE_VIEW 2561,115840
#define SQLITE_DELETE 2562,115919
#define SQLITE_DROP_INDEX 2563,115998
#define SQLITE_DROP_TABLE 2564,116077
#define SQLITE_DROP_TEMP_INDEX 2565,116156
#define SQLITE_DROP_TEMP_TABLE 2566,116235
#define SQLITE_DROP_TEMP_TRIGGER 2567,116314
#define SQLITE_DROP_TEMP_VIEW 2568,116393
#define SQLITE_DROP_TRIGGER 2569,116472
#define SQLITE_DROP_VIEW 2570,116551
#define SQLITE_INSERT 2571,116630
#define SQLITE_PRAGMA 2572,116709
#define SQLITE_READ 2573,116788
#define SQLITE_SELECT 2574,116867
#define SQLITE_TRANSACTION 2575,116946
#define SQLITE_UPDATE 2576,117025
#define SQLITE_ATTACH 2577,117104
#define SQLITE_DETACH 2578,117183
#define SQLITE_ALTER_TABLE 2579,117262
#define SQLITE_REINDEX 2580,117341
#define SQLITE_ANALYZE 2581,117420
#define SQLITE_CREATE_VTABLE 2582,117499
#define SQLITE_DROP_VTABLE 2583,117578
#define SQLITE_FUNCTION 2584,117657
#define SQLITE_SAVEPOINT 2585,117736
#define SQLITE_COPY 2586,117815
typedef struct sqlite3_stmt sqlite3_stmt;2799,128044
#define SQLITE_LIMIT_LENGTH 2886,131660
#define SQLITE_LIMIT_SQL_LENGTH 2887,131709
#define SQLITE_LIMIT_COLUMN 2888,131758
#define SQLITE_LIMIT_EXPR_DEPTH 2889,131807
#define SQLITE_LIMIT_COMPOUND_SELECT 2890,131856
#define SQLITE_LIMIT_VDBE_OP 2891,131905
#define SQLITE_LIMIT_FUNCTION_ARG 2892,131954
#define SQLITE_LIMIT_ATTACHED 2893,132003
#define SQLITE_LIMIT_LIKE_PATTERN_LENGTH 2894,132052
#define SQLITE_LIMIT_VARIABLE_NUMBER 2895,132101
#define SQLITE_LIMIT_TRIGGER_DEPTH 2896,132150
typedef struct Mem sqlite3_value;3053,139841
typedef struct sqlite3_context sqlite3_context;3067,140423
#define SQLITE_INTEGER 3444,157536
#define SQLITE_FLOAT 3445,157562
#define SQLITE_BLOB 3446,157588
#define SQLITE_NULL 3447,157614
# undef SQLITE_TEXT3449,157659
# define SQLITE_TEXT 3451,157685
#define SQLITE3_TEXT 3453,157719
#define SQLITE_UTF8 3771,173570
#define SQLITE_UTF16LE 3772,173602
#define SQLITE_UTF16BE 3773,173634
#define SQLITE_UTF16 3774,173666
#define SQLITE_ANY 3775,173729
#define SQLITE_UTF16_ALIGNED 3776,173799
typedef void (*sqlite3_destructor_type)sqlite3_destructor_type3981,183538
#define SQLITE_STATIC 3982,183586
#define SQLITE_TRANSIENT 3983,183642
SQLITE_API char *sqlite3_temp_directory;sqlite3_temp_directory4303,198362
typedef struct sqlite3_vtab sqlite3_vtab;4696,215671
typedef struct sqlite3_index_info sqlite3_index_info;4697,215713
typedef struct sqlite3_vtab_cursor sqlite3_vtab_cursor;4698,215767
typedef struct sqlite3_module sqlite3_module;4699,215823
struct sqlite3_module 4718,216593
  int iVersion;4719,216617
  int (*xCreate)xCreate4720,216633
  int (*xConnect)xConnect4723,216768
  int (*xBestIndex)xBestIndex4726,216904
  int (*xDisconnect)xDisconnect4727,216967
  int (*xDestroy)xDestroy4728,217010
  int (*xOpen)xOpen4729,217050
  int (*xClose)xClose4730,217119
  int (*xFilter)xFilter4731,217158
  int (*xNext)xNext4733,217278
  int (*xEof)xEof4734,217316
  int (*xColumn)xColumn4735,217353
  int (*xRowid)xRowid4736,217416
  int (*xUpdate)xUpdate4737,217478
  int (*xBegin)xBegin4738,217552
  int (*xSync)xSync4739,217590
  int (*xCommit)xCommit4740,217627
  int (*xRollback)xRollback4741,217666
  int (*xFindFunction)xFindFunction4742,217707
  int (*xRename)xRename4745,217896
struct sqlite3_index_info 4799,220341
  int nConstraint;4801,220384
  struct sqlite3_index_constraint 4802,220452
     int iColumn;4803,220488
     unsigned char op;4804,220564
     unsigned char usable;4805,220621
     int iTermOffset;4806,220692
  } *aConstraint;aConstraint4807,220772
  int nOrderBy;4808,220841
  struct sqlite3_index_orderby 4809,220915
     int iColumn;4810,220948
     unsigned char desc;4811,220999
  } *aOrderBy;aOrderBy4812,221067
  struct sqlite3_index_constraint_usage 4814,221138
    int argvIndex;4815,221180
    unsigned char omit;4816,221260
  } *aConstraintUsage;aConstraintUsage4817,221334
  int idxNum;4818,221357
  char *idxStr;idxStr4819,221426
  int needToFreeIdxStr;4820,221507
  int orderByConsumed;4821,221583
  double estimatedCost;4822,221652
#define SQLITE_INDEX_CONSTRAINT_EQ 4824,221725
#define SQLITE_INDEX_CONSTRAINT_GT 4825,221765
#define SQLITE_INDEX_CONSTRAINT_LE 4826,221805
#define SQLITE_INDEX_CONSTRAINT_LT 4827,221845
#define SQLITE_INDEX_CONSTRAINT_GE 4828,221886
#define SQLITE_INDEX_CONSTRAINT_MATCH 4829,221927
struct sqlite3_vtab 4888,224704
  const sqlite3_module *pModule;pModule4889,224726
  int nRef;4890,224800
  char *zErrMsg;zErrMsg4891,224855
struct sqlite3_vtab_cursor 4913,225809
  sqlite3_vtab *pVtab;pVtab4914,225838
typedef struct sqlite3_blob sqlite3_blob;4972,228245
typedef struct sqlite3_mutex_methods sqlite3_mutex_methods;5364,246169
struct sqlite3_mutex_methods 5365,246229
  int (*xMutexInit)xMutexInit5366,246260
  int (*xMutexEnd)xMutexEnd5367,246287
  sqlite3_mutex *(*xMutexAlloc)xMutexAlloc5368,246313
  void (*xMutexFree)xMutexFree5369,246351
  void (*xMutexEnter)xMutexEnter5370,246390
  int (*xMutexTry)xMutexTry5371,246430
  void (*xMutexLeave)xMutexLeave5372,246467
  int (*xMutexHeld)xMutexHeld5373,246507
  int (*xMutexNotheld)xMutexNotheld5374,246545
#define SQLITE_MUTEX_FAST 5421,248580
#define SQLITE_MUTEX_RECURSIVE 5422,248620
#define SQLITE_MUTEX_STATIC_MASTER 5423,248660
#define SQLITE_MUTEX_STATIC_MEM 5424,248700
#define SQLITE_MUTEX_STATIC_MEM2 5425,248764
#define SQLITE_MUTEX_STATIC_OPEN 5426,248820
#define SQLITE_MUTEX_STATIC_PRNG 5427,248886
#define SQLITE_MUTEX_STATIC_LRU 5428,248950
#define SQLITE_MUTEX_STATIC_LRU2 5429,249011
#define SQLITE_TESTCTRL_FIRST 5500,252108
#define SQLITE_TESTCTRL_PRNG_SAVE 5501,252159
#define SQLITE_TESTCTRL_PRNG_RESTORE 5502,252210
#define SQLITE_TESTCTRL_PRNG_RESET 5503,252261
#define SQLITE_TESTCTRL_BITVEC_TEST 5504,252312
#define SQLITE_TESTCTRL_FAULT_INSTALL 5505,252363
#define SQLITE_TESTCTRL_BENIGN_MALLOC_HOOKS 5506,252414
#define SQLITE_TESTCTRL_PENDING_BYTE 5507,252465
#define SQLITE_TESTCTRL_ASSERT 5508,252516
#define SQLITE_TESTCTRL_ALWAYS 5509,252567
#define SQLITE_TESTCTRL_RESERVE 5510,252618
#define SQLITE_TESTCTRL_OPTIMIZATIONS 5511,252669
#define SQLITE_TESTCTRL_ISKEYWORD 5512,252720
#define SQLITE_TESTCTRL_LAST 5513,252771
#define SQLITE_STATUS_MEMORY_USED 5625,258173
#define SQLITE_STATUS_PAGECACHE_USED 5626,258218
#define SQLITE_STATUS_PAGECACHE_OVERFLOW 5627,258263
#define SQLITE_STATUS_SCRATCH_USED 5628,258308
#define SQLITE_STATUS_SCRATCH_OVERFLOW 5629,258353
#define SQLITE_STATUS_MALLOC_SIZE 5630,258398
#define SQLITE_STATUS_PARSER_STACK 5631,258443
#define SQLITE_STATUS_PAGECACHE_SIZE 5632,258488
#define SQLITE_STATUS_SCRATCH_SIZE 5633,258533
#define SQLITE_DBSTATUS_LOOKASIDE_USED 5674,260201
#define SQLITE_STMTSTATUS_FULLSCAN_STEP 5725,262223
#define SQLITE_STMTSTATUS_SORT 5726,262269
typedef struct sqlite3_pcache sqlite3_pcache;5740,262705
typedef struct sqlite3_pcache_methods sqlite3_pcache_methods;5870,269745
struct sqlite3_pcache_methods 5871,269807
  void *pArg;pArg5872,269839
  int (*xInit)xInit5873,269853
  void (*xShutdown)xShutdown5874,269876
  sqlite3_pcache *(*xCreate)xCreate5875,269904
  void (*xCachesize)xCachesize5876,269962
  int (*xPagecount)xPagecount5877,270017
  void *(*xFetch)xFetch5878,270055
  void (*xUnpin)xUnpin5879,270121
  void (*xRekey)xRekey5880,270176
  void (*xTruncate)xTruncate5881,270252
  void (*xDestroy)xDestroy5882,270307
typedef struct sqlite3_backup sqlite3_backup;5896,270699
# undef double6248,289077
#define _SQLITE_HASH_H_6276,289970
typedef struct Hash Hash;6279,290037
typedef struct HashElem HashElem;6280,290063
struct Hash 6303,291178
  unsigned int htsize;6304,291192
  unsigned int count;6305,291262
  HashElem *first;first6306,291328
  struct _ht 6307,291393
    int count;6308,291442
    HashElem *chain;chain6309,291512
  } *ht;ht6310,291587
struct HashElem 6319,291858
  HashElem *next,next6320,291876
  HashElem *next, *prev;prev6320,291876
  void *data;data6321,291953
  const char *pKey;pKey6322,292024
  const char *pKey; int nKey;6322,292024
#define sqliteHashFirst(6345,292697
#define sqliteHashNext(6346,292738
#define sqliteHashData(6347,292778
#define TK_SEMI 6362,293390
#define TK_EXPLAIN 6363,293435
#define TK_QUERY 6364,293480
#define TK_PLAN 6365,293525
#define TK_BEGIN 6366,293570
#define TK_TRANSACTION 6367,293615
#define TK_DEFERRED 6368,293660
#define TK_IMMEDIATE 6369,293705
#define TK_EXCLUSIVE 6370,293750
#define TK_COMMIT 6371,293795
#define TK_END 6372,293840
#define TK_ROLLBACK 6373,293885
#define TK_SAVEPOINT 6374,293930
#define TK_RELEASE 6375,293975
#define TK_TO 6376,294020
#define TK_TABLE 6377,294065
#define TK_CREATE 6378,294110
#define TK_IF 6379,294155
#define TK_NOT 6380,294200
#define TK_EXISTS 6381,294245
#define TK_TEMP 6382,294290
#define TK_LP 6383,294335
#define TK_RP 6384,294380
#define TK_AS 6385,294425
#define TK_COMMA 6386,294470
#define TK_ID 6387,294515
#define TK_INDEXED 6388,294560
#define TK_ABORT 6389,294605
#define TK_ACTION 6390,294650
#define TK_AFTER 6391,294695
#define TK_ANALYZE 6392,294740
#define TK_ASC 6393,294785
#define TK_ATTACH 6394,294830
#define TK_BEFORE 6395,294875
#define TK_BY 6396,294920
#define TK_CASCADE 6397,294965
#define TK_CAST 6398,295010
#define TK_COLUMNKW 6399,295055
#define TK_CONFLICT 6400,295100
#define TK_DATABASE 6401,295145
#define TK_DESC 6402,295190
#define TK_DETACH 6403,295235
#define TK_EACH 6404,295280
#define TK_FAIL 6405,295325
#define TK_FOR 6406,295370
#define TK_IGNORE 6407,295415
#define TK_INITIALLY 6408,295460
#define TK_INSTEAD 6409,295505
#define TK_LIKE_KW 6410,295550
#define TK_MATCH 6411,295595
#define TK_NO 6412,295640
#define TK_KEY 6413,295685
#define TK_OF 6414,295730
#define TK_OFFSET 6415,295775
#define TK_PRAGMA 6416,295820
#define TK_RAISE 6417,295865
#define TK_REPLACE 6418,295910
#define TK_RESTRICT 6419,295955
#define TK_ROW 6420,296000
#define TK_TRIGGER 6421,296045
#define TK_VACUUM 6422,296090
#define TK_VIEW 6423,296135
#define TK_VIRTUAL 6424,296180
#define TK_REINDEX 6425,296225
#define TK_RENAME 6426,296270
#define TK_CTIME_KW 6427,296315
#define TK_ANY 6428,296360
#define TK_OR 6429,296405
#define TK_AND 6430,296450
#define TK_IS 6431,296495
#define TK_BETWEEN 6432,296540
#define TK_IN 6433,296585
#define TK_ISNULL 6434,296630
#define TK_NOTNULL 6435,296675
#define TK_NE 6436,296720
#define TK_EQ 6437,296765
#define TK_GT 6438,296810
#define TK_LE 6439,296855
#define TK_LT 6440,296900
#define TK_GE 6441,296945
#define TK_ESCAPE 6442,296990
#define TK_BITAND 6443,297035
#define TK_BITOR 6444,297080
#define TK_LSHIFT 6445,297125
#define TK_RSHIFT 6446,297170
#define TK_PLUS 6447,297215
#define TK_MINUS 6448,297260
#define TK_STAR 6449,297305
#define TK_SLASH 6450,297350
#define TK_REM 6451,297395
#define TK_CONCAT 6452,297440
#define TK_COLLATE 6453,297485
#define TK_BITNOT 6454,297530
#define TK_STRING 6455,297575
#define TK_JOIN_KW 6456,297620
#define TK_CONSTRAINT 6457,297665
#define TK_DEFAULT 6458,297710
#define TK_NULL 6459,297755
#define TK_PRIMARY 6460,297800
#define TK_UNIQUE 6461,297845
#define TK_CHECK 6462,297891
#define TK_REFERENCES 6463,297937
#define TK_AUTOINCR 6464,297983
#define TK_ON 6465,298029
#define TK_INSERT 6466,298075
#define TK_DELETE 6467,298121
#define TK_UPDATE 6468,298167
#define TK_SET 6469,298213
#define TK_DEFERRABLE 6470,298259
#define TK_FOREIGN 6471,298305
#define TK_DROP 6472,298351
#define TK_UNION 6473,298397
#define TK_ALL 6474,298443
#define TK_EXCEPT 6475,298489
#define TK_INTERSECT 6476,298535
#define TK_SELECT 6477,298581
#define TK_DISTINCT 6478,298627
#define TK_DOT 6479,298673
#define TK_FROM 6480,298719
#define TK_JOIN 6481,298765
#define TK_USING 6482,298811
#define TK_ORDER 6483,298857
#define TK_GROUP 6484,298903
#define TK_HAVING 6485,298949
#define TK_LIMIT 6486,298995
#define TK_WHERE 6487,299041
#define TK_INTO 6488,299087
#define TK_VALUES 6489,299133
#define TK_INTEGER 6490,299179
#define TK_FLOAT 6491,299225
#define TK_BLOB 6492,299271
#define TK_REGISTER 6493,299317
#define TK_VARIABLE 6494,299363
#define TK_CASE 6495,299409
#define TK_WHEN 6496,299455
#define TK_THEN 6497,299501
#define TK_ELSE 6498,299547
#define TK_INDEX 6499,299593
#define TK_ALTER 6500,299639
#define TK_ADD 6501,299685
#define TK_TO_TEXT 6502,299731
#define TK_TO_BLOB 6503,299777
#define TK_TO_NUMERIC 6504,299823
#define TK_TO_INT 6505,299869
#define TK_TO_REAL 6506,299915
#define TK_ISNOT 6507,299961
#define TK_END_OF_FILE 6508,300007
#define TK_ILLEGAL 6509,300053
#define TK_SPACE 6510,300099
#define TK_UNCLOSED_STRING 6511,300145
#define TK_FUNCTION 6512,300191
#define TK_COLUMN 6513,300237
#define TK_AGG_FUNCTION 6514,300283
#define TK_AGG_COLUMN 6515,300329
#define TK_CONST_FUNC 6516,300375
#define TK_UMINUS 6517,300421
#define TK_UPLUS 6518,300467
# define double 6533,300922
# define LONGDOUBLE_TYPE 6534,300951
#   define SQLITE_BIG_DBL 6536,301013
# define SQLITE_OMIT_DATETIME_FUNCS 6538,301072
# define SQLITE_OMIT_TRACE 6539,301110
# undef SQLITE_MIXED_ENDIAN_64BIT_FLOAT6540,301139
# undef SQLITE_HAVE_ISNAN6541,301179
# define SQLITE_BIG_DBL 6544,301235
#define OMIT_TEMPDB 6553,301509
#define OMIT_TEMPDB 6555,301537
#define SQLITE_MAX_FILE_FORMAT 6564,301819
# define SQLITE_DEFAULT_FILE_FORMAT 6566,301887
# define SQLITE_DEFAULT_RECURSIVE_TRIGGERS 6574,302089
# define SQLITE_TEMP_STORE 6582,302274
#define offsetof(6590,302415
# define SQLITE_EBCDIC 6598,302648
# define SQLITE_ASCII 6600,302679
#  define UINT32_TYPE 6612,303026
#  define UINT32_TYPE 6614,303064
#  define UINT16_TYPE 6619,303156
#  define UINT16_TYPE 6621,303194
#  define INT16_TYPE 6626,303290
#  define INT16_TYPE 6628,303326
#  define UINT8_TYPE 6633,303412
#  define UINT8_TYPE 6635,303448
#  define INT8_TYPE 6640,303536
#  define INT8_TYPE 6642,303570
# define LONGDOUBLE_TYPE 6646,303641
typedef sqlite_int64 i64;6648,303685
typedef sqlite_uint64 u64;6649,303748
typedef UINT32_TYPE u32;6650,303813
typedef UINT16_TYPE u16;6651,303878
typedef INT16_TYPE i16;6652,303943
typedef UINT8_TYPE u8;6653,304006
typedef INT8_TYPE i8;6654,304071
#define SQLITE_MAX_U32 6662,304407
SQLITE_PRIVATE const int sqlite3one 6669,304577
SQLITE_PRIVATE const int sqlite3one;6671,304624
# define SQLITE_BIGENDIAN 6675,304801
# define SQLITE_LITTLEENDIAN 6676,304832
# define SQLITE_UTF16NATIVE 6677,304863
# define SQLITE_BIGENDIAN 6679,304913
# define SQLITE_LITTLEENDIAN 6680,304970
# define SQLITE_UTF16NATIVE 6681,305027
#define LARGEST_INT64 6689,305280
#define SMALLEST_INT64 6690,305340
#define ROUND8(6696,305522
#define ROUNDDOWN8(6701,305607
# define EIGHT_BYTE_ALIGNMENT(6713,306048
# define EIGHT_BYTE_ALIGNMENT(6715,306122
typedef struct BusyHandler BusyHandler;6728,306595
struct BusyHandler 6729,306635
  int (*xFunc)xFunc6730,306656
  void *pArg;pArg6731,306709
  int nBusy;6732,306771
#define MASTER_NAME 6740,307006
#define TEMP_MASTER_NAME 6741,307048
#define MASTER_ROOT 6746,307149
#define SCHEMA_TABLE(6751,307217
#define ArraySize(6757,307378
#define SQLITE_DYNAMIC 6763,307582
  #define SQLITE_WSD 6780,308454
  #define GLOBAL(6781,308481
  #define sqlite3GlobalConfig 6782,308551
  #define SQLITE_WSD 6786,308733
  #define GLOBAL(6787,308755
  #define sqlite3GlobalConfig 6788,308779
#define UNUSED_PARAMETER(6807,309759
#define UNUSED_PARAMETER2(6808,309797
typedef struct AggInfo AggInfo;6813,309911
typedef struct AuthContext AuthContext;6814,309943
typedef struct AutoincInfo AutoincInfo;6815,309983
typedef struct Bitvec Bitvec;6816,310023
typedef struct CollSeq CollSeq;6817,310053
typedef struct Column Column;6818,310085
typedef struct Db Db;6819,310115
typedef struct Schema Schema;6820,310137
typedef struct Expr Expr;6821,310167
typedef struct ExprList ExprList;6822,310193
typedef struct ExprSpan ExprSpan;6823,310227
typedef struct FKey FKey;6824,310261
typedef struct FuncDef FuncDef;6825,310287
typedef struct FuncDefHash FuncDefHash;6826,310319
typedef struct IdList IdList;6827,310359
typedef struct Index Index;6828,310389
typedef struct IndexSample IndexSample;6829,310417
typedef struct KeyClass KeyClass;6830,310457
typedef struct KeyInfo KeyInfo;6831,310491
typedef struct Lookaside Lookaside;6832,310523
typedef struct LookasideSlot LookasideSlot;6833,310559
typedef struct Module Module;6834,310603
typedef struct NameContext NameContext;6835,310633
typedef struct Parse Parse;6836,310673
typedef struct RowSet RowSet;6837,310701
typedef struct Savepoint Savepoint;6838,310731
typedef struct Select Select;6839,310767
typedef struct SrcList SrcList;6840,310797
typedef struct StrAccum StrAccum;6841,310829
typedef struct Table Table;6842,310863
typedef struct TableLock TableLock;6843,310891
typedef struct Token Token;6844,310927
typedef struct Trigger Trigger;6845,310955
typedef struct TriggerPrg TriggerPrg;6846,310987
typedef struct TriggerStep TriggerStep;6847,311025
typedef struct UnpackedRecord UnpackedRecord;6848,311065
typedef struct VTable VTable;6849,311111
typedef struct Walker Walker;6850,311141
typedef struct WherePlan WherePlan;6851,311171
typedef struct WhereInfo WhereInfo;6852,311207
typedef struct WhereLevel WhereLevel;6853,311243
#define _BTREE_H_6878,312206
#define SQLITE_N_BTREE_META 6883,312325
  #define SQLITE_DEFAULT_AUTOVACUUM 6890,312543
#define BTREE_AUTOVACUUM_NONE 6893,312589
#define BTREE_AUTOVACUUM_FULL 6894,312656
#define BTREE_AUTOVACUUM_INCR 6895,312721
typedef struct Btree Btree;6900,312829
typedef struct BtCursor BtCursor;6901,312857
typedef struct BtShared BtShared;6902,312891
typedef struct BtreeMutexArray BtreeMutexArray;6903,312925
struct BtreeMutexArray 6911,313219
  int nMutex;6912,313244
  Btree *aBtree[aBtree6913,313258
#define BTREE_OMIT_JOURNAL 6931,313813
#define BTREE_NO_READLOCK 6932,313883
#define BTREE_MEMORY 6933,313953
#define BTREE_READONLY 6934,314017
#define BTREE_READWRITE 6935,314090
#define BTREE_CREATE 6936,314161
#define BTREE_INTKEY 6973,316061
#define BTREE_ZERODATA 6974,316139
#define BTREE_LEAFDATA 6975,316205
#define BTREE_FREE_PAGE_COUNT 6996,317121
#define BTREE_SCHEMA_VERSION 6997,317157
#define BTREE_FILE_FORMAT 6998,317193
#define BTREE_DEFAULT_CACHE_SIZE 6999,317229
#define BTREE_LARGEST_ROOT_PAGE 7000,317265
#define BTREE_TEXT_ENCODING 7001,317301
#define BTREE_USER_VERSION 7002,317337
#define BTREE_INCR_VACUUM 7003,317373
# define sqlite3BtreeEnter(7071,320267
# define sqlite3BtreeEnterAll(7072,320298
# define sqlite3BtreeLeave(7090,321041
# define sqlite3BtreeEnterCursor(7091,321071
# define sqlite3BtreeLeaveCursor(7092,321107
# define sqlite3BtreeLeaveAll(7093,321143
# define sqlite3BtreeMutexArrayEnter(7094,321176
# define sqlite3BtreeMutexArrayLeave(7095,321216
# define sqlite3BtreeMutexArrayInsert(7096,321256
# define sqlite3BtreeHoldsMutex(7098,321300
# define sqlite3BtreeHoldsAllMutexes(7099,321337
#define _SQLITE_VDBE_H_7127,322388
typedef struct Vdbe Vdbe;7134,322576
typedef struct VdbeFunc VdbeFunc;7140,322710
typedef struct Mem Mem;7141,322744
typedef struct SubProgram SubProgram;7142,322768
struct VdbeOp 7149,322983
  u8 opcode;7150,322999
  signed char p4type;7151,323053
  u8 opflags;7152,323116
  u8 p5;7153,323183
  int p1;7154,323252
  int p2;7155,323294
  int p3;7156,323368
    int i;7158,323461
    void *p;p7159,323528
    char *z;z7160,323577
    i64 *pI64;pI647161,323656
    double *pReal;pReal7162,323718
    FuncDef *pFunc;pFunc7163,323779
    VdbeFunc *pVdbeFunc;pVdbeFunc7164,323843
    CollSeq *pColl;pColl7165,323908
    Mem *pMem;pMem7166,323972
    VTable *pVtab;pVtab7167,324032
    KeyInfo *pKeyInfo;pKeyInfo7168,324093
    int *ai;ai7169,324157
    SubProgram *pProgram;pProgram7170,324222
  } p4;7171,324289
  char *zComment;zComment7173,324317
  int cnt;7176,324408
  u64 cycles;7177,324487
typedef struct VdbeOp VdbeOp;7180,324574
struct SubProgram 7186,324666
  VdbeOp *aOp;aOp7187,324686
  int nOp;7188,324757
  int nMem;7189,324813
  int nCsr;7190,324883
  int nRef;7191,324948
  void *token;token7192,325023
struct VdbeOpList 7199,325217
  u8 opcode;7200,325237
  signed char p1;7201,325291
  signed char p2;7202,325333
  signed char p3;7203,325407
typedef struct VdbeOpList VdbeOpList;7205,325454
#define P4_NOTUSED 7210,325534
#define P4_DYNAMIC 7211,325595
#define P4_STATIC 7212,325676
#define P4_COLLSEQ 7213,325735
#define P4_FUNCDEF 7214,325806
#define P4_KEYINFO 7215,325877
#define P4_VDBEFUNC 7216,325948
#define P4_MEM 7217,326020
#define P4_TRANSIENT 7218,326091
#define P4_VTAB 7219,326161
#define P4_MPRINTF 7220,326238
#define P4_REAL 7221,326317
#define P4_INT64 7222,326385
#define P4_INT32 7223,326447
#define P4_INTARRAY 7224,326509
#define P4_SUBPROGRAM 7225,326575
#define P4_KEYINFO_HANDOFF 7234,327075
#define P4_KEYINFO_STATIC 7235,327108
#define COLNAME_NAME 7241,327275
#define COLNAME_DECLTYPE 7242,327302
#define COLNAME_DATABASE 7243,327329
#define COLNAME_TABLE 7244,327356
#define COLNAME_COLUMN 7245,327383
# define COLNAME_N 7247,327447
#   define COLNAME_N 7250,327551
#   define COLNAME_N 7252,327617
#define ADDR(7262,327942
#define OP_Goto 7272,328370
#define OP_Gosub 7273,328420
#define OP_Return 7274,328470
#define OP_Yield 7275,328520
#define OP_HaltIfNull 7276,328570
#define OP_Halt 7277,328620
#define OP_Integer 7278,328670
#define OP_Int64 7279,328720
#define OP_Real 7280,328770
#define OP_String8 7281,328848
#define OP_String 7282,328926
#define OP_Null 7283,328976
#define OP_Blob 7284,329026
#define OP_Variable 7285,329076
#define OP_Move 7286,329126
#define OP_Copy 7287,329176
#define OP_SCopy 7288,329226
#define OP_ResultRow 7289,329276
#define OP_Concat 7290,329326
#define OP_Add 7291,329404
#define OP_Subtract 7292,329482
#define OP_Multiply 7293,329560
#define OP_Divide 7294,329638
#define OP_Remainder 7295,329716
#define OP_CollSeq 7296,329794
#define OP_Function 7297,329844
#define OP_BitAnd 7298,329894
#define OP_BitOr 7299,329972
#define OP_ShiftLeft 7300,330050
#define OP_ShiftRight 7301,330128
#define OP_AddImm 7302,330206
#define OP_MustBeInt 7303,330256
#define OP_RealAffinity 7304,330306
#define OP_ToText 7305,330356
#define OP_ToBlob 7306,330434
#define OP_ToNumeric 7307,330512
#define OP_ToInt 7308,330591
#define OP_ToReal 7309,330669
#define OP_Eq 7310,330747
#define OP_Ne 7311,330825
#define OP_Lt 7312,330903
#define OP_Le 7313,330981
#define OP_Gt 7314,331059
#define OP_Ge 7315,331137
#define OP_Permutation 7316,331215
#define OP_Compare 7317,331265
#define OP_Jump 7318,331315
#define OP_And 7319,331365
#define OP_Or 7320,331443
#define OP_Not 7321,331521
#define OP_BitNot 7322,331599
#define OP_If 7323,331677
#define OP_IfNot 7324,331727
#define OP_IsNull 7325,331777
#define OP_NotNull 7326,331855
#define OP_Column 7327,331933
#define OP_Affinity 7328,331983
#define OP_MakeRecord 7329,332033
#define OP_Count 7330,332083
#define OP_Savepoint 7331,332133
#define OP_AutoCommit 7332,332183
#define OP_Transaction 7333,332233
#define OP_ReadCookie 7334,332283
#define OP_SetCookie 7335,332333
#define OP_VerifyCookie 7336,332383
#define OP_OpenRead 7337,332433
#define OP_OpenWrite 7338,332483
#define OP_OpenEphemeral 7339,332533
#define OP_OpenPseudo 7340,332583
#define OP_Close 7341,332633
#define OP_SeekLt 7342,332683
#define OP_SeekLe 7343,332733
#define OP_SeekGe 7344,332783
#define OP_SeekGt 7345,332833
#define OP_Seek 7346,332883
#define OP_NotFound 7347,332933
#define OP_Found 7348,332983
#define OP_IsUnique 7349,333033
#define OP_NotExists 7350,333083
#define OP_Sequence 7351,333133
#define OP_NewRowid 7352,333183
#define OP_Insert 7353,333233
#define OP_InsertInt 7354,333283
#define OP_Delete 7355,333333
#define OP_ResetCount 7356,333383
#define OP_RowKey 7357,333433
#define OP_RowData 7358,333483
#define OP_Rowid 7359,333533
#define OP_NullRow 7360,333583
#define OP_Last 7361,333633
#define OP_Sort 7362,333683
#define OP_Rewind 7363,333733
#define OP_Prev 7364,333783
#define OP_Next 7365,333833
#define OP_IdxInsert 7366,333883
#define OP_IdxDelete 7367,333933
#define OP_IdxRowid 7368,333983
#define OP_IdxLT 7369,334033
#define OP_IdxGE 7370,334083
#define OP_Destroy 7371,334133
#define OP_Clear 7372,334183
#define OP_CreateIndex 7373,334233
#define OP_CreateTable 7374,334283
#define OP_ParseSchema 7375,334333
#define OP_LoadAnalysis 7376,334383
#define OP_DropTable 7377,334433
#define OP_DropIndex 7378,334483
#define OP_DropTrigger 7379,334533
#define OP_IntegrityCk 7380,334583
#define OP_RowSetAdd 7381,334633
#define OP_RowSetRead 7382,334683
#define OP_RowSetTest 7383,334733
#define OP_Program 7384,334783
#define OP_Param 7385,334833
#define OP_FkCounter 7386,334883
#define OP_FkIfZero 7387,334933
#define OP_MemMax 7388,334983
#define OP_IfPos 7389,335033
#define OP_IfNeg 7390,335083
#define OP_IfZero 7391,335133
#define OP_AggStep 7392,335183
#define OP_AggFinal 7393,335233
#define OP_Vacuum 7394,335283
#define OP_IncrVacuum 7395,335333
#define OP_Expire 7396,335383
#define OP_TableLock 7397,335433
#define OP_VBegin 7398,335483
#define OP_VCreate 7399,335533
#define OP_VDestroy 7400,335583
#define OP_VOpen 7401,335633
#define OP_VFilter 7402,335683
#define OP_VColumn 7403,335733
#define OP_VNext 7404,335783
#define OP_VRename 7405,335833
#define OP_VUpdate 7406,335883
#define OP_Pagecount 7407,335933
#define OP_Trace 7408,335983
#define OP_Noop 7409,336033
#define OP_Explain 7410,336083
#define OP_NotUsed_135 7413,336183
#define OP_NotUsed_136 7414,336233
#define OP_NotUsed_137 7415,336283
#define OP_NotUsed_138 7416,336333
#define OP_NotUsed_139 7417,336383
#define OP_NotUsed_140 7418,336433
#define OPFLG_JUMP 7425,336655
#define OPFLG_OUT2_PRERELEASE 7426,336726
#define OPFLG_IN1 7427,336787
#define OPFLG_IN2 7428,336853
#define OPFLG_IN3 7429,336919
#define OPFLG_OUT2 7430,336985
#define OPFLG_OUT3 7431,337052
#define OPFLG_INITIALIZER 7432,337119
# define VdbeComment(7511,341264
# define VdbeNoopComment(7513,341381
# define VdbeComment(7515,341441
# define VdbeNoopComment(7516,341465
#define _PAGER_H_7542,342416
  #define SQLITE_DEFAULT_JOURNAL_SIZE_LIMIT 7550,342691
typedef u32 Pgno;7557,342882
typedef struct Pager Pager;7562,342985
typedef struct PgHdr DbPage;7567,343046
#define PAGER_MJ_PGNO(7577,343464
#define PAGER_OMIT_JOURNAL 7584,343684
#define PAGER_NO_READLOCK 7585,343758
#define PAGER_LOCKINGMODE_QUERY 7590,343912
#define PAGER_LOCKINGMODE_NORMAL 7591,343952
#define PAGER_LOCKINGMODE_EXCLUSIVE 7592,343992
#define PAGER_JOURNALMODE_QUERY 7597,344109
#define PAGER_JOURNALMODE_DELETE 7598,344149
#define PAGER_JOURNALMODE_PERSIST 7599,344229
#define PAGER_JOURNALMODE_OFF 7600,344310
#define PAGER_JOURNALMODE_TRUNCATE 7601,344376
#define PAGER_JOURNALMODE_MEMORY 7602,344453
#define sqlite3PagerGet(7636,345796
# define disable_simulated_io_errors(7685,348085
# define enable_simulated_io_errors(7686,348124
typedef struct PgHdr PgHdr;7712,348994
typedef struct PCache PCache;7713,349022
struct PgHdr 7719,349146
  void *pData;pData7720,349161
  void *pExtra;pExtra7721,349221
  PgHdr *pDirty;pDirty7722,349274
  Pgno pgno;7723,349343
  Pager *pPager;pPager7724,349408
  u32 pageHash;7726,349504
  u16 flags;7728,349571
  i16 nRef;7734,349839
  PCache *pCache;pCache7735,349907
  PgHdr *pDirtyNext;pDirtyNext7737,349973
  PgHdr *pDirtyPrev;pDirtyPrev7738,350048
#define PGHDR_DIRTY 7742,350164
#define PGHDR_NEED_SYNC 7743,350226
#define PGHDR_NEED_READ 7745,350381
#define PGHDR_REUSE_UNLIKELY 7746,350444
#define PGHDR_DONT_WRITE 7747,350519
#define _SQLITE_OS_H_7876,355488
#   undef SQLITE_OS_UNIX7887,355877
#   define SQLITE_OS_UNIX 7888,355902
#   undef SQLITE_OS_WIN7889,355930
#   define SQLITE_OS_WIN 7890,355954
#   undef SQLITE_OS_OS27891,355981
#   define SQLITE_OS_OS2 7892,356005
#   undef SQLITE_OS_OTHER7894,356039
# define SQLITE_OS_OTHER 7898,356138
#     define SQLITE_OS_WIN 7901,356301
#     define SQLITE_OS_UNIX 7902,356330
#     define SQLITE_OS_OS2 7903,356360
#     define SQLITE_OS_WIN 7905,356486
#     define SQLITE_OS_UNIX 7906,356515
#     define SQLITE_OS_OS2 7907,356545
#     define SQLITE_OS_WIN 7909,356583
#     define SQLITE_OS_UNIX 7910,356612
#     define SQLITE_OS_OS2 7911,356642
#  define SQLITE_OS_UNIX 7914,356687
#  define SQLITE_OS_OS2 7915,356714
#  define SQLITE_OS_WIN 7919,356777
# define SQLITE_OS_WINCE 7928,356930
# define SQLITE_OS_WINCE 7930,356963
# define SQLITE_TEMPNAME_SIZE 7939,357096
# define INCL_DOSDATETIME7944,357337
# define INCL_DOSFILEMGR7945,357363
# define INCL_DOSERRORS7946,357388
# define INCL_DOSMISC7947,357412
# define INCL_DOSPROCESS7948,357434
# define INCL_DOSMODULEMGR7949,357459
# define INCL_DOSSEMAPHORES7950,357486
# define SQLITE_TEMPNAME_SIZE 7953,357552
# define SQLITE_TEMPNAME_SIZE 7955,357605
# define SET_FULLSYNC(7962,357746
# define SQLITE_DEFAULT_SECTOR_SIZE 7969,357859
# define SQLITE_TEMP_FILE_PREFIX 7994,359163
#define NO_LOCK 8014,360091
#define SHARED_LOCK 8015,360117
#define RESERVED_LOCK 8016,360143
#define PENDING_LOCK 8017,360169
#define EXCLUSIVE_LOCK 8018,360195
#define PENDING_BYTE 8075,363264
#define RESERVED_BYTE 8076,363309
#define SHARED_FIRST 8077,363352
#define SHARED_SIZE 8078,363395
#define SQLITE_FCNTL_DB_UNCHANGED 8098,364235
# define SQLITE_MUTEX_OMIT8174,367520
#    define SQLITE_MUTEX_PTHREADS8178,367628
#    define SQLITE_MUTEX_W328180,367684
#    define SQLITE_MUTEX_OS28182,367735
#    define SQLITE_MUTEX_NOOP8184,367772
#define sqlite3_mutex_alloc(8192,367920
#define sqlite3_mutex_free(8193,367974
#define sqlite3_mutex_enter(8194,368004
#define sqlite3_mutex_try(8195,368035
#define sqlite3_mutex_leave(8196,368079
#define sqlite3_mutex_held(8197,368110
#define sqlite3_mutex_notheld(8198,368146
#define sqlite3MutexAlloc(8199,368182
#define sqlite3MutexInit(8200,368236
#define sqlite3MutexEnd(8201,368280
struct Db 8215,368828
  char *zName;zName8216,368840
  Btree *pBt;pBt8217,368891
  u8 inTrans;8218,368964
  u8 safety_level;8219,369042
  Schema *pSchema;pSchema8220,369110
struct Schema 8234,369679
  int schema_cookie;8235,369695
  Hash tblHash;8236,369769
  Hash idxHash;8237,369825
  Hash trigHash;8238,369890
  Hash fkeyHash;8239,369948
  Table *pSeqTab;pSeqTab8240,370019
  u8 file_format;8241,370096
  u8 enc;8242,370161
  u16 flags;8243,370226
  int cache_size;8244,370289
  sqlite3 *db;db8246,370387
#define DbHasProperty(8254,370563
#define DbHasAnyProperty(8255,370636
#define DbSetProperty(8256,370707
#define DbClearProperty(8257,370772
#define DB_SchemaLoaded 8269,371202
#define DB_UnresetViews 8270,371270
#define DB_Empty 8271,371348
#define SQLITE_N_LIMIT 8277,371534
struct Lookaside 8299,372623
  u16 sz;8300,372642
  u8 bEnabled;8301,372703
  u8 bMalloced;8302,372778
  int nOut;8303,372856
  int mxOut;8304,372928
  LookasideSlot *pFree;pFree8305,372984
  void *pStart;pStart8306,373042
  void *pEnd;pEnd8307,373111
struct LookasideSlot 8309,373185
  LookasideSlot *pNext;pNext8310,373208
struct FuncDefHash 8319,373452
  FuncDef *a[a8320,373473
struct sqlite3 8349,374921
  sqlite3_vfs *pVfs;pVfs8350,374938
  int nDb;8351,374989
  Db *aDb;aDb8352,375063
  int flags;8353,375114
  int openFlags;8354,375183
  int errCode;8355,375257
  int errMask;8356,375329
  u8 autoCommit;8357,375409
  u8 temp_store;8358,375469
  u8 mallocFailed;8359,375536
  u8 dfltLockMode;8360,375612
  u8 dfltJournalMode;8361,375688
  signed char nextAutovac;8362,375764
  u8 suppressErr;8363,375838
  int nextPagesize;8364,375912
  int nTable;8365,375978
  CollSeq *pDfltColl;pDfltColl8366,376049
  i64 lastRowid;8367,376127
  u32 magic;8368,376205
  int nChange;8369,376282
  int nTotalChange;8370,376356
  sqlite3_mutex *mutex;mutex8371,376436
  int aLimit[aLimit8372,376491
  struct sqlite3InitInfo 8373,376536
    int iDb;8374,376613
    int newTnum;8375,376682
    u8 busy;8376,376756
    u8 orphanTrigger;8377,376825
  } init;8378,376903
  int nExtension;8379,376913
  void **aExtension;aExtension8380,376979
  struct Vdbe *pVdbe;pVdbe8381,377049
  int activeVdbeCnt;8382,377119
  int writeVdbeCnt;8383,377193
  void (*xTrace)xTrace8384,377271
  void *pTraceArg;pTraceArg8385,377336
  void (*xProfile)xProfile8386,377417
  void *pProfileArg;pProfileArg8387,377486
  void *pCommitArg;pCommitArg8388,377565
  int (*xCommitCallback)xCommitCallback8389,377640
  void *pRollbackArg;pRollbackArg8390,377707
  void (*xRollbackCallback)xRollbackCallback8391,377784
  void *pUpdateArg;pUpdateArg8392,377851
  void (*xUpdateCallback)xUpdateCallback8393,377871
  void(*xCollNeeded)xCollNeeded8394,377947
  void(*xCollNeeded16)xCollNeeded168395,378010
  void *pCollNeededArg;pCollNeededArg8396,378075
  sqlite3_value *pErr;pErr8397,378099
  char *zErrMsg;zErrMsg8398,378163
  char *zErrMsg16;zErrMsg168399,378243
    volatile int isInterrupted;8401,378334
    double notUsed1;8402,378414
  } u1;8403,378459
  Lookaside lookaside;8404,378467
  int (*xAuth)xAuth8406,378570
  void *pAuthArg;pAuthArg8408,378713
  int (*xProgress)xProgress8411,378837
  void *pProgressArg;pProgressArg8412,378897
  int nProgressOps;8413,378969
  Hash aModule;8416,379087
  Table *pVTab;pVTab8417,379162
  VTable **aVTrans;aVTrans8418,379239
  int nVTrans;8419,379315
  VTable *pDisconnect;pDisconnect8420,379379
  FuncDefHash aFunc;8422,379461
  Hash aCollSeq;8423,379534
  BusyHandler busyHandler;8424,379596
  int busyTimeout;8425,379648
  Db aDbStatic[aDbStatic8426,379716
  Savepoint *pSavepoint;pSavepoint8427,379794
  int nSavepoint;8428,379858
  int nStatement;8429,379933
  u8 isTransactionSavepoint;8430,380012
  i64 nDeferredCons;8431,380090
  sqlite3 *pBlockingConnection;pBlockingConnection8444,380634
  sqlite3 *pUnlockConnection;pUnlockConnection8445,380709
  void *pUnlockArg;pUnlockArg8446,380786
  void (*xUnlockNotify)xUnlockNotify8447,380858
  sqlite3 *pNextBlocked;pNextBlocked8448,380927
#define ENC(8455,381073
#define SQLITE_VdbeTrace 8460,381166
#define SQLITE_InternChanges 8461,381243
#define SQLITE_FullColNames 8462,381322
#define SQLITE_ShortColNames 8463,381403
#define SQLITE_CountRows 8464,381476
#define SQLITE_NullCallback 8467,381711
#define SQLITE_SqlTrace 8469,381861
#define SQLITE_VdbeListing 8470,381940
#define SQLITE_WriteSchema 8471,382020
#define SQLITE_NoReadlock 8472,382095
#define SQLITE_IgnoreChecks 8474,382246
#define SQLITE_ReadUncommitted 8475,382327
#define SQLITE_LegacyFileFmt 8476,382397
#define SQLITE_FullFSync 8477,382478
#define SQLITE_LoadExtension 8478,382556
#define SQLITE_RecoveryMode 8479,382626
#define SQLITE_ReverseOrder 8480,382695
#define SQLITE_RecTriggers 8481,382769
#define SQLITE_ForeignKeys 8482,382843
#define SQLITE_QueryFlattener 8489,383113
#define SQLITE_ColumnCache 8490,383186
#define SQLITE_IndexSort 8491,383259
#define SQLITE_IndexSearch 8492,383335
#define SQLITE_IndexCover 8493,383413
#define SQLITE_OptMask 8494,383490
#define SQLITE_MAGIC_OPEN 8501,383734
#define SQLITE_MAGIC_CLOSED 8502,383799
#define SQLITE_MAGIC_SICK 8503,383866
#define SQLITE_MAGIC_BUSY 8504,383939
#define SQLITE_MAGIC_ERROR 8505,384013
struct FuncDef 8513,384360
  i16 nArg;8514,384377
  u8 iPrefEnc;8515,384447
  u8 flags;8516,384526
  void *pUserData;pUserData8517,384589
  FuncDef *pNext;pNext8518,384638
  void (*xFunc)xFunc8519,384696
  void (*xStep)xStep8520,384774
  void (*xFinalize)xFinalize8521,384850
  char *zName;zName8522,384930
  FuncDef *pHash;pHash8523,384985
#define SQLITE_FUNC_LIKE 8529,385106
#define SQLITE_FUNC_CASE 8530,385182
#define SQLITE_FUNC_EPHEM 8531,385256
#define SQLITE_FUNC_NEEDCOLL 8532,385325
#define SQLITE_FUNC_PRIVATE 8533,385405
#define SQLITE_FUNC_COUNT 8534,385475
#define SQLITE_FUNC_COALESCE 8535,385543
#define FUNCTION(8562,386863
#define STR_FUNCTION(8565,387018
#define LIKEFUNC(8568,387158
#define AGGREGATE(8570,387274
struct Savepoint 8580,387678
  char *zName;zName8581,387697
  i64 nDeferredCons;8582,387773
  Savepoint *pNext;pNext8583,387850
#define SAVEPOINT_BEGIN 8590,388062
#define SAVEPOINT_RELEASE 8591,388093
#define SAVEPOINT_ROLLBACK 8592,388124
struct Module 8600,388314
  const sqlite3_module *pModule;pModule8601,388330
  const char *zName;zName8602,388393
  void *pAux;pAux8603,388469
  void (*xDestroy)xDestroy8604,388545
struct Column 8611,388721
  char *zName;zName8612,388737
  Expr *pDflt;pDflt8613,388782
  char *zDflt;zDflt8614,388836
  char *zType;zType8615,388896
  char *zColl;zColl8616,388947
  u8 notNull;8617,389018
  u8 isPrimKey;8618,389082
  char affinity;8619,389154
  u8 isHidden;8621,389245
struct CollSeq 8646,390325
  char *zName;zName8647,390342
  u8 enc;8648,390418
  u8 type;8649,390480
  void *pUser;pUser8650,390550
  int (*xCmp)xCmp8651,390605
  void (*xDel)xDel8652,390662
#define SQLITE_COLL_BINARY 8658,390758
#define SQLITE_COLL_NOCASE 8659,390835
#define SQLITE_COLL_REVERSE 8660,390911
#define SQLITE_COLL_USER 8661,390988
#define SQLITE_SO_ASC 8666,391117
#define SQLITE_SO_DESC 8667,391178
#define SQLITE_AFF_TEXT 8683,391797
#define SQLITE_AFF_NONE 8684,391829
#define SQLITE_AFF_NUMERIC 8685,391861
#define SQLITE_AFF_INTEGER 8686,391893
#define SQLITE_AFF_REAL 8687,391925
#define sqlite3IsNumericAffinity(8689,391958
#define SQLITE_AFF_MASK 8695,392115
#define SQLITE_JUMPIFNULL 8701,392248
#define SQLITE_STOREP2 8702,392320
#define SQLITE_NULLEQ 8703,392401
struct VTable 8747,394901
  sqlite3 *db;db8748,394917
  Module *pMod;pMod8749,394998
  sqlite3_vtab *pVtab;pVtab8750,395065
  int nRef;8751,395124
  VTable *pNext;pNext8752,395195
struct Table 8785,396833
  sqlite3 *dbMem;dbMem8786,396848
  char *zName;zName8787,396923
  int iPKey;8788,396978
  int nCol;8789,397059
  Column *aCol;aCol8790,397120
  Index *pIndex;pIndex8791,397179
  int tnum;8792,397243
  Select *pSelect;pSelect8793,397320
  u16 nRef;8794,397399
  u8 tabFlags;8795,397461
  u8 keyConf;8796,397510
  FKey *pFKey;pFKey8797,397590
  char *zColAff;zColAff8798,397665
  Expr *pCheck;pCheck8800,397764
  int addColOffset;8803,397864
  VTable *pVTable;pVTable8806,397981
  int nModuleArg;8807,398034
  char **azModuleArg;azModuleArg8808,398097
  Trigger *pTrigger;pTrigger8810,398177
  Schema *pSchema;pSchema8811,398241
  Table *pNextZombie;pNextZombie8812,398302
#define TF_Readonly 8818,398412
#define TF_Ephemeral 8819,398476
#define TF_HasPrimaryKey 8820,398536
#define TF_Autoincrement 8821,398601
#define TF_Virtual 8822,398679
#define TF_NeedMetadata 8823,398739
#  define IsVirtual(8833,399036
#  define IsHiddenColumn(8834,399098
#  define IsVirtual(8836,399148
#  define IsHiddenColumn(8837,399178
struct FKey 8859,399976
  Table *pFrom;pFrom8860,399990
  FKey *pNextFrom;pNextFrom8861,400068
  char *zTo;zTo8862,400120
  FKey *pNextTo;pNextTo8863,400197
  FKey *pPrevTo;pPrevTo8864,400259
  int nCol;8865,400325
  u8 isDeferred;8867,400407
  u8 aAction[aAction8868,400485
  Trigger *apTrigger[apTrigger8869,400563
  struct sColMap 8870,400626
    int iFrom;8871,400698
    char *zCol;zCol8872,400752
  } aCol[aCol8873,400826
#define OE_None 8901,402275
#define OE_Rollback 8902,402337
#define OE_Abort 8903,402415
#define OE_Fail 8904,402493
#define OE_Ignore 8905,402570
#define OE_Replace 8906,402649
#define OE_Restrict 8908,402729
#define OE_SetNull 8909,402808
#define OE_SetDflt 8910,402872
#define OE_Cascade 8911,402943
#define OE_Default 8913,402994
struct KeyInfo 8921,403233
  sqlite3 *db;db8922,403250
  u8 enc;8923,403302
  u16 nField;8924,403374
  u8 *aSortOrder;aSortOrder8925,403431
  CollSeq *aColl[aColl8926,403506
struct UnpackedRecord 8943,404136
  KeyInfo *pKeyInfo;pKeyInfo8944,404160
  u16 nField;8945,404225
  u16 flags;8946,404282
  i64 rowid;8947,404348
  Mem *aMem;aMem8948,404407
#define UNPACKED_NEED_FREE 8954,404494
#define UNPACKED_NEED_DESTROY 8955,404570
#define UNPACKED_IGNORE_ROWID 8956,404648
#define UNPACKED_INCRKEY 8957,404723
#define UNPACKED_PREFIX_MATCH 8958,404800
#define UNPACKED_PREFIX_SEARCH 8959,404877
struct Index 8987,406143
  char *zName;zName8988,406158
  int nColumn;8989,406202
  int *aiColumn;aiColumn8990,406277
  unsigned *aiRowEst;aiRowEst8991,406350
  Table *pTable;pTable8992,406431
  int tnum;8993,406484
  u8 onError;8994,406561
  u8 autoIndex;8995,406630
  char *zColAff;zColAff8996,406704
  Index *pNext;pNext8997,406773
  Schema *pSchema;pSchema8998,406844
  u8 *aSortOrder;aSortOrder8999,406898
  char **azColl;azColl9000,406975
  IndexSample *aSample;aSample9001,407044
struct IndexSample 9008,407234
    char *z;z9010,407265
    double r;9011,407336
  } u;9012,407411
  u8 eType;9013,407418
  u8 nByte;9014,407481
struct Token 9025,407847
  const char *z;z9026,407862
  unsigned int n;9027,407930
struct AggInfo 9043,408592
  u8 directMode;9044,408609
  u8 useSortingIdx;9046,408766
  int sortingIdx;9048,408900
  ExprList *pGroupBy;pGroupBy9049,408967
  int nSortingColumn;9050,409019
  struct AggInfo_col 9051,409090
    Table *pTab;pTab9052,409160
    int iTable;9053,409208
    int iColumn;9054,409277
    int iSorterColumn;9055,409350
    int iMem;9056,409420
    Expr *pExpr;pExpr9057,409496
  } *aCol;aCol9058,409555
  int nColumn;9059,409566
  int nColumnAlloc;9060,409631
  int nAccumulator;9061,409700
  struct AggInfo_func 9064,409911
    Expr *pExpr;pExpr9065,409971
    FuncDef *pFunc;pFunc9066,410039
    int iMem;9067,410112
    int iDistinct;9068,410188
  } *aFunc;aFunc9069,410264
  int nFunc;9070,410276
  int nFuncAlloc;9071,410337
typedef i16 ynVar;9085,410995
typedef int ynVar;9087,411020
struct Expr 9153,414284
  u8 op;9154,414298
  char affinity;9155,414362
  u16 flags;9156,414441
    char *zToken;zToken9158,414513
    int iValue;9159,414588
  } u;9160,414650
  Expr *pLeft;pLeft9167,414932
  Expr *pRight;pRight9168,414976
    ExprList *pList;pList9170,415031
    Select *pSelect;pSelect9171,415112
  } x;9172,415191
  CollSeq *pColl;pColl9173,415198
  int iTable;9180,415539
  ynVar iColumn;9183,415735
  i16 iAgg;9185,415878
  i16 iRightJoinTable;9186,415954
  u8 flags2;9187,416029
  u8 op2;9188,416090
  AggInfo *pAggInfo;pAggInfo9189,416169
  Table *pTab;pTab9190,416242
  int nHeight;9192,416334
#define EP_FromJoin 9199,416488
#define EP_Agg 9200,416567
#define EP_Resolved 9201,416644
#define EP_Error 9202,416714
#define EP_Distinct 9203,416789
#define EP_VarSelect 9204,416866
#define EP_DblQuoted 9205,416938
#define EP_InfixFunc 9206,417006
#define EP_ExpCollate 9207,417086
#define EP_FixedDest 9208,417162
#define EP_IntValue 9209,417235
#define EP_xIsSelect 9210,417307
#define EP_Reduced 9212,417386
#define EP_TokenOnly 9213,417465
#define EP_Static 9214,417546
#define EP2_MallocedToken 9219,417699
#define EP2_Irreducible 9220,417776
# define ExprSetIrreducible(9229,418141
# define ExprSetIrreducible(9231,418210
#define ExprHasProperty(9238,418340
#define ExprHasAnyProperty(9239,418397
#define ExprSetProperty(9240,418452
#define ExprClearProperty(9241,418501
#define EXPR_FULLSIZE 9248,418752
#define EXPR_REDUCEDSIZE 9249,418823
#define EXPR_TOKENONLYSIZE 9250,418900
#define EXPRDUP_REDUCE 9256,419096
struct ExprList 9266,419545
  int nExpr;9267,419563
  int nAlloc;9268,419628
  int iECursor;9269,419693
  struct ExprList_item 9270,419766
    Expr *pExpr;pExpr9271,419791
    char *zName;zName9272,419848
    char *zSpan;zSpan9273,419919
    u8 sortOrder;9274,419984
    u8 done;9275,420041
    u16 iCol;9276,420121
    u16 iAlias;9277,420196
  } *a;a9278,420265
struct ExprSpan 9286,420491
  Expr *pExpr;pExpr9287,420509
  const char *zStart;zStart9288,420565
  const char *zEnd;zEnd9289,420625
struct IdList 9307,421235
  struct IdList_item 9308,421251
    char *zName;zName9309,421274
    int idx;9310,421325
  } *a;a9311,421404
  int nId;9312,421412
  int nAlloc;9313,421471
typedef u64 Bitmask;9323,421804
#define BMS 9328,421897
struct SrcList 9346,422794
  i16 nSrc;9347,422811
  i16 nAlloc;9348,422886
  struct SrcList_item 9349,422952
    char *zDatabase;zDatabase9350,422976
    char *zName;zName9351,423040
    char *zAlias;zAlias9352,423086
    Table *pTab;pTab9353,423167
    Select *pSelect;pSelect9354,423231
    u8 isPopulated;9355,423308
    u8 jointype;9356,423388
    u8 notIndexed;9357,423464
    int iCursor;9358,423530
    Expr *pOn;pOn9359,423607
    IdList *pUsing;pUsing9360,423659
    Bitmask colUsed;9361,423714
    char *zIndex;zIndex9362,423787
    Index *pIndex;pIndex9363,423860
  } a[a9364,423936
#define JT_INNER 9370,424068
#define JT_CROSS 9371,424137
#define JT_NATURAL 9372,424208
#define JT_LEFT 9373,424271
#define JT_RIGHT 9374,424324
#define JT_OUTER 9375,424378
#define JT_ERROR 9376,424446
struct WherePlan 9393,425118
  u32 wsFlags;9394,425137
  u32 nEq;9395,425217
    Index *pIdx;pIdx9397,425291
    struct WhereTerm *pTerm;pTerm9398,425365
    sqlite3_index_info *pVtabIdx;pVtabIdx9399,425438
  } u;9400,425506
struct WhereLevel 9416,426151
  WherePlan plan;9417,426171
  int iLeftJoin;9418,426248
  int iTabCur;9419,426324
  int iIdxCur;9420,426395
  int addrBrk;9421,426461
  int addrNxt;9422,426526
  int addrCont;9423,426599
  int addrFirst;9424,426676
  u8 iFrom;9425,426748
  u8 op,9426,426809
  u8 op, p5;9426,426809
  int p1,9427,426886
  int p1, p2;9427,426886
      int nIn;9430,427045
      struct InLoop 9431,427110
        int iCur;9432,427132
        int addrInTop;9433,427210
      } *aInLoop;aInLoop9434,427266
    } in;9435,427342
  } u;9436,427411
  sqlite3_index_info *pIdxInfo;pIdxInfo9444,427725
#define WHERE_ORDERBY_NORMAL 9451,427920
#define WHERE_ORDERBY_MIN 9452,427970
#define WHERE_ORDERBY_MAX 9453,428049
#define WHERE_ONEPASS_DESIRED 9454,428128
#define WHERE_DUPLICATES_OK 9455,428206
#define WHERE_OMIT_OPEN 9456,428284
#define WHERE_OMIT_CLOSE 9457,428358
#define WHERE_FORCE_TABLE 9458,428438
#define WHERE_ONETABLE_ONLY 9459,428514
struct WhereInfo 9468,428888
  Parse *pParse;pParse9469,428907
  u16 wctrlFlags;9470,428972
  u8 okOnePass;9471,429048
  u8 untestedTerms;9472,429127
  SrcList *pTabList;pTabList9473,429199
  int iTop;9474,429265
  int iContinue;9475,429341
  int iBreak;9476,429419
  int nLevel;9477,429493
  struct WhereClause *pWC;pWC9478,429554
  WhereLevel a[a9479,429627
struct NameContext 9503,430821
  Parse *pParse;pParse9504,430842
  SrcList *pSrcList;pSrcList9505,430882
  ExprList *pEList;pEList9506,430952
  int nRef;9507,431016
  int nErr;9508,431086
  u8 allowAgg;9509,431166
  u8 hasAgg;9510,431228
  u8 isCheck;9511,431285
  int nDepth;9512,431360
  AggInfo *pAggInfo;pAggInfo9513,431437
  NameContext *pNext;pNext9514,431509
struct Select 9537,432661
  ExprList *pEList;pEList9538,432677
  u8 op;9539,432733
  char affinity;9540,432811
  u16 selFlags;9541,432884
  SrcList *pSrc;pSrc9542,432935
  Expr *pWhere;pWhere9543,432982
  ExprList *pGroupBy;pGroupBy9544,433030
  Expr *pHaving;pHaving9545,433081
  ExprList *pOrderBy;pOrderBy9546,433130
  Select *pPrior;pPrior9547,433181
  Select *pNext;pNext9548,433256
  Select *pRightmost;pRightmost9549,433325
  Expr *pLimit;pLimit9550,433405
  Expr *pOffset;pOffset9551,433475
  int iLimit,9552,433546
  int iLimit, iOffset;9552,433546
  int addrOpenEphm[addrOpenEphm9553,433626
#define SF_Distinct 9560,433796
#define SF_Resolved 9561,433863
#define SF_Aggregate 9562,433935
#define SF_UsesEphemeral 9563,434005
#define SF_Expanded 9564,434076
#define SF_HasTypeInfo 9565,434154
#define SRT_Union 9572,434351
#define SRT_Except 9573,434418
#define SRT_Exists 9574,434485
#define SRT_Discard 9575,434554
#define IgnorableOrderby(9578,434680
#define SRT_Output 9580,434735
#define SRT_Mem 9581,434795
#define SRT_Set 9582,434859
#define SRT_Table 9583,434927
#define SRT_EphemTab 9584,435006
#define SRT_Coroutine 9585,435086
typedef struct SelectDest SelectDest;9591,435276
struct SelectDest 9592,435314
  u8 eDest;9593,435334
  u8 affinity;9594,435390
  int iParm;9595,435450
  int iMem;9596,435522
  int nMem;9597,435588
struct AutoincInfo 9609,436150
  AutoincInfo *pNext;pNext9610,436171
  Table *pTab;pTab9611,436239
  int iDb;9612,436301
  int regCtr;9613,436379
# define SQLITE_N_COLCACHE 9620,436515
struct TriggerPrg 9641,437443
  Trigger *pTrigger;pTrigger9642,437463
  int orconf;9643,437531
  SubProgram *pProgram;pProgram9644,437590
  u32 aColmask[aColmask9645,437659
  TriggerPrg *pNext;pNext9646,437730
struct Parse 9665,438556
  sqlite3 *db;db9666,438571
  int rc;9667,438628
  char *zErrMsg;zErrMsg9668,438684
  Vdbe *pVdbe;pVdbe9669,438730
  u8 colNamesSet;9670,438801
  u8 nameClash;9671,438880
  u8 checkSchema;9672,438961
  u8 nested;9673,439032
  u8 parseError;9674,439113
  u8 nTempReg;9675,439184
  u8 nTempInUse;9676,439257
  int aTempReg[aTempReg9677,439329
  int nRangeReg;9678,439395
  int iRangeReg;9679,439461
  int nErr;9680,439533
  int nTab;9681,439584
  int nMem;9682,439657
  int nSet;9683,439721
  int ckBase;9684,439777
  int iCacheLevel;9685,439853
  int iCacheCnt;9686,439934
  u8 nColCache;9687,440011
  u8 iColCache;9688,440078
  struct yColCache 9689,440142
    int iTable;9690,440163
    int iColumn;9691,440215
    u8 tempReg;9692,440267
    int iLevel;9693,440346
    int iReg;9694,440392
    int lru;9695,440469
  } aColCache[aColCache9696,440550
  u32 writeMask;9697,440623
  u32 cookieMask;9698,440697
  u8 isMultiWrite;9699,440763
  u8 mayAbort;9700,440842
  int cookieGoto;9701,440918
  int cookieValue[cookieValue9702,440996
  int nTableLock;9704,441106
  TableLock *aTableLock;aTableLock9705,441167
  int regRowid;9707,441248
  int regRoot;9708,441322
  AutoincInfo *pAinc;pAinc9709,441401
  int nMaxArg;9710,441471
  Parse *pToplevel;pToplevel9713,441605
  Table *pTriggerTab;pTriggerTab9714,441677
  u32 oldmask;9715,441741
  u32 newmask;9716,441803
  u8 eTriggerOp;9717,441865
  u8 eOrconf;9718,441928
  u8 disableTriggers;9719,442002
  int nVar;9724,442157
  int nVarExpr;9725,442233
  int nVarExprAlloc;9726,442298
  Expr **apVarExpr;apVarExpr9727,442368
  Vdbe *pReprepare;pReprepare9728,442445
  int nAlias;9729,442515
  int nAliasAlloc;9730,442581
  int *aAlias;aAlias9731,442649
  u8 explain;9732,442715
  Token sNameToken;9733,442791
  Token sLastToken;9734,442862
  const char *zTail;zTail9735,442913
  Table *pNewTable;pNewTable9736,442986
  Trigger *pNewTrigger;pNewTrigger9737,443057
  const char *zAuthContext;zAuthContext9738,443135
  Token sArg;9740,443243
  u8 declareVtab;9741,443313
  int nVtabLock;9742,443386
  Table **apVtabLock;apVtabLock9743,443454
  int nHeight;9745,443538
  Table *pZombieTab;pZombieTab9746,443615
  TriggerPrg *pTriggerPrg;pTriggerPrg9747,443694
  #define IN_DECLARE_VTAB 9751,443796
  #define IN_DECLARE_VTAB 9753,443830
struct AuthContext 9760,444044
  const char *zAuthContext;zAuthContext9761,444065
  Parse *pParse;pParse9762,444135
#define OPFLAG_NCHANGE 9768,444259
#define OPFLAG_LASTROWID 9769,444328
#define OPFLAG_ISUPDATE 9770,444399
#define OPFLAG_APPEND 9771,444474
#define OPFLAG_USESEEKRESULT 9772,444548
#define OPFLAG_CLEARCACHE 9773,444628
struct Trigger 9790,445421
  char *zName;zName9791,445438
  char *table;table9792,445517
  u8 op;9793,445596
  u8 tr_tm;9794,445675
  Expr *pWhen;pWhen9795,445744
  IdList *pColumns;pColumns9796,445824
  Schema *pSchema;pSchema9798,445965
  Schema *pTabSchema;pTabSchema9799,446027
  TriggerStep *step_list;step_list9800,446087
  Trigger *pNext;pNext9801,446166
#define TRIGGER_BEFORE 9811,446485
#define TRIGGER_AFTER 9812,446511
struct TriggerStep 9852,448352
  u8 op;9853,448373
  u8 orconf;9854,448452
  Trigger *pTrig;pTrig9855,448498
  Select *pSelect;pSelect9856,448567
  Token target;9857,448648
  Expr *pWhere;pWhere9858,448717
  ExprList *pExprList;pExprList9859,448790
  IdList *pIdList;pIdList9860,448868
  TriggerStep *pNext;pNext9861,448921
  TriggerStep *pLast;pLast9862,448972
typedef struct DbFixer DbFixer;9870,449218
struct DbFixer 9871,449250
  Parse *pParse;pParse9872,449267
  const char *zDb;zDb9873,449345
  const char *zType;zType9874,449426
  const Token *pName;pName9875,449502
struct StrAccum 9882,449718
  sqlite3 *db;db9883,449736
  char *zBase;zBase9884,449811
  char *zText;zText9885,449877
  int  nChar;9886,449934
  int  nAlloc;9887,449991
  int  mxAlloc;9888,450055
  u8   mallocFailed;9889,450114
  u8   useMalloc;9890,450187
  u8   tooBig;9891,450259
  sqlite3 *db;db9899,450493
  int iDb;9900,450552
  char **pzErrMsg;pzErrMsg9901,450631
  int rc;9902,450685
} InitData;9903,450737
struct Sqlite3Config 9910,450889
  int bMemstat;9911,450912
  int bCoreMutex;9912,450983
  int bFullMutex;9913,451054
  int mxStrlen;9914,451125
  int szLookaside;9915,451189
  int nLookaside;9916,451261
  sqlite3_mem_methods m;9917,451334
  sqlite3_mutex_methods mutex;9918,451414
  sqlite3_pcache_methods pcache;9919,451482
  void *pHeap;pHeap9920,451555
  int nHeap;9921,451616
  int mnReq,9922,451674
  int mnReq, mxReq;9922,451674
  void *pScratch;pScratch9923,451748
  int szScratch;9924,451805
  int nScratch;9925,451875
  void *pPage;pPage9926,451943
  int szPage;9927,452003
  int nPage;9928,452074
  int mxParserStack;9929,452143
  int sharedCacheEnabled;9930,452219
  int isInit;9933,452410
  int inProgress;9934,452491
  int isMutexInit;9935,452571
  int isMallocInit;9936,452648
  int isPCacheInit;9937,452723
  sqlite3_mutex *pInitMutex;pInitMutex9938,452798
  int nRefInitMutex;9939,452875
  void (*xLog)xLog9940,452947
  void *pLogArg;pLogArg9941,453013
struct Walker 9947,453147
  int (*xExprCallback)xExprCallback9948,453163
  int (*xSelectCallback)xSelectCallback9949,453238
  Parse *pParse;pParse9950,453309
    NameContext *pNC;pNC9952,453450
    int i;9953,453518
  } u;9954,453585
#define WRC_Continue 9968,453996
#define WRC_Prune 9969,454058
#define WRC_Abort 9970,454136
#define SQLITE_SKIP_UTF8(9976,454333
#define SQLITE_CORRUPT_BKPT 9992,455015
#define SQLITE_MISUSE_BKPT 9993,455073
#define SQLITE_CANTOPEN_BKPT 9994,455129
# define SQLITE_ENABLE_FTS310003,455470
# define sqlite3Toupper(10021,456006
# define sqlite3Isspace(10022,456084
# define sqlite3Isalnum(10023,456156
# define sqlite3Isalpha(10024,456228
# define sqlite3Isdigit(10025,456300
# define sqlite3Isxdigit(10026,456372
# define sqlite3Tolower(10027,456444
# define sqlite3Toupper(10029,456521
# define sqlite3Isspace(10030,456578
# define sqlite3Isalnum(10031,456635
# define sqlite3Isalpha(10032,456692
# define sqlite3Isdigit(10033,456749
# define sqlite3Isxdigit(10034,456806
# define sqlite3Tolower(10035,456864
#define sqlite3StrNICmp 10044,457138
# define sqlite3StackAllocRaw(10077,458686
# define sqlite3StackAllocZero(10078,458733
# define sqlite3StackFree(10079,458794
# define sqlite3StackAllocRaw(10081,458838
# define sqlite3StackAllocZero(10082,458899
# define sqlite3StackFree(10083,458961
# define sqlite3IsNaN(10108,459710
# define sqlite3ViewGetColumnNames(10183,463646
# define sqlite3AutoincrementBegin(10192,463976
# define sqlite3AutoincrementEnd(10193,464014
# define sqlite3ParseToplevel(10324,472358
# define sqlite3TriggersExist(10326,472437
# define sqlite3DeleteTrigger(10327,472480
# define sqlite3DropTriggerPtr(10328,472515
# define sqlite3UnlinkAndDeleteTrigger(10329,472551
# define sqlite3CodeRowTrigger(10330,472597
# define sqlite3CodeRowTriggerDirect(10331,472647
# define sqlite3TriggerList(10332,472697
# define sqlite3ParseToplevel(10333,472733
# define sqlite3TriggerColmask(10334,472768
# define sqlite3AuthRead(10347,473459
# define sqlite3AuthCheck(10348,473493
# define sqlite3AuthContextPush(10349,473543
# define sqlite3AuthContextPop(10350,473582
#define getVarint32(10399,475915
#define putVarint32(10400,476024
#define getVarint 10401,476140
#define putVarint 10402,476178
SQLITE_PRIVATE const unsigned char sqlite3OpcodeProperty[sqlite3OpcodeProperty10437,478118
SQLITE_PRIVATE const unsigned char sqlite3UpperToLower[sqlite3UpperToLower10438,478178
SQLITE_PRIVATE const unsigned char sqlite3CtypeMap[sqlite3CtypeMap10439,478236
SQLITE_PRIVATE SQLITE_WSD struct Sqlite3Config sqlite3Config;10440,478290
SQLITE_PRIVATE SQLITE_WSD FuncDefHash sqlite3GlobalFunctions;10441,478352
SQLITE_PRIVATE int sqlite3PendingByte;10442,478414
# define sqlite3CloseExtensions(10505,481759
  #define sqlite3TableLock(10511,481918
#  define sqlite3VtabClear(10519,482076
#  define sqlite3VtabSync(10520,482106
#  define sqlite3VtabRollback(10521,482147
#  define sqlite3VtabCommit(10522,482180
#  define sqlite3VtabInSync(10523,482211
#  define sqlite3VtabLock(10524,482245
#  define sqlite3VtabUnlock(10525,482275
#  define sqlite3VtabUnlockList(10526,482306
#  define sqlite3VtabInSync(10535,482725
  #define sqlite3FkActions(10571,484895
  #define sqlite3FkCheck(10572,484931
  #define sqlite3FkDropTable(10573,484965
  #define sqlite3FkOldmask(10574,485001
  #define sqlite3FkRequired(10575,485040
  #define sqlite3FkDelete(10580,485171
#define SQLITE_FAULTINJECTOR_MALLOC 10587,485283
#define SQLITE_FAULTINJECTOR_COUNT 10588,485325
  #define sqlite3BeginBenignMalloc(10599,485677
  #define sqlite3EndBenignMalloc(10600,485714
#define IN_INDEX_ROWID 10603,485757
#define IN_INDEX_EPH 10604,485792
#define IN_INDEX_INDEX 10605,485827
  #define sqlite3JournalSize(10613,486176
  #define sqlite3ExprSetHeight(10625,486618
  #define sqlite3SelectExprHeight(10626,486654
  #define sqlite3ExprCheckHeight(10627,486693
  #define sqlite3ConnectionBlocked(10638,487067
  #define sqlite3ConnectionUnlocked(10639,487107
  #define sqlite3ConnectionClosed(10640,487146
# define IOTRACE(10653,487471
# define IOTRACE(10657,487648
# define sqlite3VdbeIOTraceSql(10658,487668
SQLITE_PRIVATE const unsigned char sqlite3UpperToLower[sqlite3UpperToLower10687,488624
SQLITE_PRIVATE const unsigned char sqlite3CtypeMap[sqlite3CtypeMap10756,492404
SQLITE_PRIVATE SQLITE_WSD struct Sqlite3Config sqlite3Config 10801,495006
SQLITE_PRIVATE SQLITE_WSD FuncDefHash sqlite3GlobalFunctions;10840,496601
SQLITE_PRIVATE int sqlite3PendingByte 10860,497541
SQLITE_PRIVATE const unsigned char sqlite3OpcodeProperty[sqlite3OpcodeProperty10868,497811
static const char * const azCompileOpt[azCompileOpt10899,498868
#define CTIMEOPT_VAL_(10903,499040
#define CTIMEOPT_VAL(10904,499072
SQLITE_API int sqlite3_compileoption_used(11230,505586
SQLITE_API const char *sqlite3_compileoption_get(sqlite3_compileoption_get11248,506200
typedef struct sqlite3StatType sqlite3StatType;11278,507075
static SQLITE_WSD struct sqlite3StatType 11279,507123
  int nowValue[nowValue11280,507166
  int mxValue[mxValue11281,507213
} sqlite3Stat 11282,507260
# define wsdStatInit 11292,507654
# define wsdStat 11293,507734
# define wsdStatInit11295,507762
# define wsdStat 11296,507783
SQLITE_PRIVATE int sqlite3StatusValue(11302,507877
SQLITE_PRIVATE void sqlite3StatusAdd(11312,508133
SQLITE_PRIVATE void sqlite3StatusSet(11324,508429
SQLITE_API int sqlite3_status(11340,508902
SQLITE_API int sqlite3_db_status(11356,509321
#define HAVE_LOCALTIME_S 11444,512501
typedef struct DateTime DateTime;11450,512593
struct DateTime 11451,512627
  sqlite3_int64 iJD;11452,512645
  int Y,11453,512709
  int Y, M,11453,512709
  int Y, M, D;11453,512709
  int h,11454,512757
  int h, m;11454,512757
  int tz;11455,512801
  double s;11456,512855
  char validYMD;11457,512890
  char validHMS;11458,512945
  char validJD;11459,513000
  char validTZ;11460,513052
static int getDigits(11477,513607
#define getValue 11517,514388
static int parseTimezone(11535,514782
static int parseHhMmSs(11570,515578
static void computeJD(11612,516489
static int parseYyyyMmDd(11658,517448
static void setDateTimeToCurrent(11693,518108
static int parseDateOrTime(11717,518903
static void computeYMD(11743,519541
static void computeHMS(11769,520151
static void computeYMD_HMS(11787,520464
static void clearYMD_HMS_TZ(11795,520584
static sqlite3_int64 localtimeOffset(11807,520850
static int parseModifier(11893,522672
static int isDate(12094,528090
static void juliandayFunc(12135,529022
static void datetimeFunc(12152,529335
static void timeFunc(12172,529798
static void dateFunc(12191,530202
static void strftimeFunc(12224,530999
static void ctimeFunc(12360,534631
static void cdateFunc(12374,534880
static void ctimestampFunc(12388,535138
static void currentTimeFunc(12410,535897
SQLITE_PRIVATE void sqlite3RegisterDateTimeFunctions(12459,537048
#define _SQLITE_OS_C_ 12502,538781
#undef _SQLITE_OS_C_12503,538805
  #define DO_OS_MALLOC_TEST(12523,539430
  #define DO_OS_MALLOC_TEST(12529,539727
SQLITE_PRIVATE int sqlite3OsClose(12538,540010
SQLITE_PRIVATE int sqlite3OsRead(12546,540188
SQLITE_PRIVATE int sqlite3OsWrite(12550,540353
SQLITE_PRIVATE int sqlite3OsTruncate(12554,540526
SQLITE_PRIVATE int sqlite3OsSync(12557,540638
SQLITE_PRIVATE int sqlite3OsFileSize(12561,540769
SQLITE_PRIVATE int sqlite3OsLock(12565,540909
SQLITE_PRIVATE int sqlite3OsUnlock(12569,541046
SQLITE_PRIVATE int sqlite3OsCheckReservedLock(12572,541162
SQLITE_PRIVATE int sqlite3OsFileControl(12576,541324
SQLITE_PRIVATE int sqlite3OsSectorSize(12579,541456
SQLITE_PRIVATE int sqlite3OsDeviceCharacteristics(12583,541652
SQLITE_PRIVATE int sqlite3OsOpen(12591,541863
SQLITE_PRIVATE int sqlite3OsDelete(12608,542405
SQLITE_PRIVATE int sqlite3OsAccess(12611,542540
SQLITE_PRIVATE int sqlite3OsFullPathname(12620,542731
SQLITE_PRIVATE void *sqlite3OsDlOpen(sqlite3OsDlOpen12630,542973
SQLITE_PRIVATE void sqlite3OsDlError(12633,543088
SQLITE_PRIVATE void (*sqlite3OsDlSym(sqlite3OsDlSym12636,543213
SQLITE_PRIVATE void sqlite3OsDlClose(12639,543352
SQLITE_PRIVATE int sqlite3OsRandomness(12643,543499
SQLITE_PRIVATE int sqlite3OsSleep(12646,543636
SQLITE_PRIVATE int sqlite3OsCurrentTime(12649,543741
SQLITE_PRIVATE int sqlite3OsOpenMalloc(12653,543867
SQLITE_PRIVATE int sqlite3OsCloseFree(12673,544303
SQLITE_PRIVATE int sqlite3OsInit(12687,544750
static sqlite3_vfs * SQLITE_WSD vfsList 12697,544963
#define vfsList 12698,545008
SQLITE_API sqlite3_vfs *sqlite3_vfs_find(sqlite3_vfs_find12704,545153
static void vfsUnlink(12728,545710
SQLITE_API int sqlite3_vfs_register(12750,546267
SQLITE_API int sqlite3_vfs_unregister(12774,546849
typedef struct BenignMallocHooks BenignMallocHooks;12818,548410
static SQLITE_WSD struct BenignMallocHooks 12819,548462
  void (*xBenignBegin)xBenignBegin12820,548507
  void (*xBenignEnd)xBenignEnd12821,548537
} sqlite3Hooks 12822,548565
# define wsdHooksInit 12831,548964
# define wsdHooks 12833,549053
# define wsdHooksInit12835,549082
# define wsdHooks 12836,549104
SQLITE_PRIVATE void sqlite3BenignMallocHooks(12844,549266
SQLITE_PRIVATE void sqlite3BeginBenignMalloc(12858,549688
SQLITE_PRIVATE void sqlite3EndBenignMalloc(12864,549822
static void *sqlite3MemMalloc(sqlite3MemMalloc12904,551104
static void sqlite3MemFree(12905,551158
static void *sqlite3MemRealloc(sqlite3MemRealloc12906,551210
static int sqlite3MemSize(12907,551279
static int sqlite3MemRoundup(12908,551332
static int sqlite3MemInit(12909,551381
static void sqlite3MemShutdown(12910,551443
SQLITE_PRIVATE void sqlite3MemSetDefault(12918,551716
static void *sqlite3MemMalloc(sqlite3MemMalloc12971,553385
static void sqlite3MemFree(12994,553989
static int sqlite3MemSize(13005,554206
static void *sqlite3MemRealloc(sqlite3MemRealloc13023,554764
static int sqlite3MemRoundup(13044,555259
static int sqlite3MemInit(13051,555352
static void sqlite3MemShutdown(13059,555481
SQLITE_PRIVATE void sqlite3MemSetDefault(13070,555785
# define backtrace(13123,557454
# define backtrace_symbols_fd(13124,557480
struct MemBlockHdr 13140,558109
  i64 iSize;13141,558130
  struct MemBlockHdr *pNext,pNext13142,558198
  struct MemBlockHdr *pNext, *pPrev;pPrev13142,558198
  char nBacktrace;13143,558276
  char nBacktraceSlots;13144,558355
  short nTitle;13145,558425
  int iForeGuard;13146,558499
#define FOREGUARD 13152,558590
#define REARGUARD 13153,558619
#define NCSIZE 13158,558701
  sqlite3_mutex *mutex;mutex13171,559077
  struct MemBlockHdr *pFirst;pFirst13176,559179
  struct MemBlockHdr *pLast;pLast13177,559209
  int nBacktrace;13182,559318
  void (*xBacktrace)xBacktrace13183,559336
  int nTitle;13188,559437
  char zTitle[zTitle13189,559516
  int disallow;13195,559674
  int nAlloc[nAlloc13203,559957
  int nCurrent[nCurrent13204,560018
  int mxCurrent[mxCurrent13205,560081
} mem;13207,560143
static void adjustStats(13213,560192
static struct MemBlockHdr *sqlite3MemsysGetHeader(sqlite3MemsysGetHeader13236,560726
static int sqlite3MemSize(13260,561392
static int sqlite3MemInit(13272,561600
static void sqlite3MemShutdown(13286,562048
static int sqlite3MemRoundup(13294,562212
static void randomFill(13303,562486
static void *sqlite3MemMalloc(sqlite3MemMalloc13326,562952
static void sqlite3MemFree(13384,564442
static void *sqlite3MemRealloc(sqlite3MemRealloc13426,565707
SQLITE_PRIVATE void sqlite3MemSetDefault(13446,566305
SQLITE_PRIVATE void sqlite3MemdebugBacktrace(13465,566806
SQLITE_PRIVATE void sqlite3MemdebugBacktraceCallback(13472,566980
SQLITE_PRIVATE void sqlite3MemdebugSettitle(13479,567165
SQLITE_PRIVATE void sqlite3MemdebugSync(13489,567485
SQLITE_PRIVATE void sqlite3MemdebugDump(13502,567840
SQLITE_PRIVATE int sqlite3MemdebugMallocCount(13544,569092
#define MX_SMALL 13596,570824
#define N_HASH 13602,570885
typedef struct Mem3Block Mem3Block;13636,572505
struct Mem3Block 13637,572541
      u32 prevSize;13640,572583
      u32 size4x;13641,572656
    } hdr;13642,572735
      u32 next;13644,572759
      u32 prev;13645,572828
    } list;13646,572901
  } u;13647,572913
static SQLITE_WSD struct Mem3Global 13656,573185
  u32 nPool;13661,573351
  Mem3Block *aPool;aPool13662,573364
  int alarmBusy;13667,573453
  sqlite3_mutex *mutex;mutex13672,573548
  u32 mnMaster;13677,573642
  u32 iMaster;13685,573944
  u32 szMaster;13686,573959
  u32 aiSmall[aiSmall13693,574127
  u32 aiHash[aiHash13694,574202
} mem3 13695,574269
#define mem3 13697,574293
static void memsys3UnlinkFromList(13703,574458
static void memsys3Unlink(13723,574940
static void memsys3LinkIntoList(13743,575478
static void memsys3Link(13757,575842
static void memsys3Enter(13778,576467
static void memsys3Leave(13784,576659
static void memsys3OutOfMemory(13791,576800
static void *memsys3Checkout(memsys3Checkout13808,577241
static void *memsys3FromMaster(memsys3FromMaster13826,577857
static void memsys3Merge(13871,579636
static void *memsys3MallocUnsafe(memsys3MallocUnsafe13910,580714
void memsys3FreeUnsafe(13992,582906
static int memsys3Size(14033,584495
static int memsys3Roundup(14044,584758
static void *memsys3Malloc(memsys3Malloc14055,584902
void memsys3Free(14067,585152
void *memsys3Realloc(memsys3Realloc14077,585330
static int memsys3Init(14108,585886
static void memsys3Shutdown(14133,586579
SQLITE_PRIVATE void sqlite3Memsys3Dump(14145,586787
SQLITE_PRIVATE const sqlite3_mem_methods *sqlite3MemGetMemsys3(sqlite3MemGetMemsys314229,589329
typedef struct Mem5Link Mem5Link;14312,592401
struct Mem5Link 14313,592435
  int next;14314,592453
  int prev;14315,592502
#define LOGMAX 14323,592753
#define CTRL_LOGSIZE 14328,592819
#define CTRL_FREE 14329,592879
static SQLITE_WSD struct Mem5Global 14337,593201
  int szAtom;14341,593286
  int nBlock;14342,593349
  u8 *zPool;zPool14343,593413
  sqlite3_mutex *mutex;mutex14348,593549
  u64 nAlloc;14353,593612
  u64 totalAlloc;14354,593672
  u64 totalExcess;14355,593751
  u32 currentOut;14356,593808
  u32 currentCount;14357,593887
  u32 maxOut;14358,593952
  u32 maxCount;14359,594013
  u32 maxRequest;14360,594076
  int aiFreelist[aiFreelist14367,594323
  u8 *aCtrl;aCtrl14373,594469
} mem5 14375,594483
#define mem5 14380,594572
#define MEM5LINK(14386,594743
static void memsys5Unlink(14392,594939
static void memsys5Link(14414,595435
static void memsys5Enter(14435,596036
static void memsys5Leave(14438,596105
static int memsys5Size(14447,596359
static int memsys5UnlinkFirst(14461,596690
static void *memsys5MallocUnsafe(memsys5MallocUnsafe14486,597336
static void memsys5FreeUnsafe(14548,599293
static void *memsys5Malloc(memsys5Malloc14604,600936
static void memsys5Free(14620,601242
static void *memsys5Realloc(memsys5Realloc14639,601838
static int memsys5Roundup(14671,602594
static int memsys5Log(14688,603020
static int memsys5Init(14700,603305
static void memsys5Shutdown(14757,604933
SQLITE_PRIVATE void sqlite3Memsys5Dump(14768,605158
SQLITE_PRIVATE const sqlite3_mem_methods *sqlite3MemGetMemsys5(sqlite3MemGetMemsys514811,606535
static SQLITE_WSD int mutexIsInit 14851,607814
SQLITE_PRIVATE int sqlite3MutexInit(14859,607945
SQLITE_PRIVATE int sqlite3MutexEnd(14890,609006
SQLITE_API sqlite3_mutex *sqlite3_mutex_alloc(sqlite3_mutex_alloc14906,609321
SQLITE_PRIVATE sqlite3_mutex *sqlite3MutexAlloc(sqlite3MutexAlloc14913,609506
SQLITE_API void sqlite3_mutex_free(14924,609746
SQLITE_API void sqlite3_mutex_enter(14934,609971
SQLITE_API int sqlite3_mutex_try(14944,610247
SQLITE_API void sqlite3_mutex_leave(14958,610653
SQLITE_API int sqlite3_mutex_held(14969,610909
SQLITE_API int sqlite3_mutex_notheld(14972,611022
static int noopMutexHeld(15016,612474
static int noopMutexNotheld(15017,612530
static int noopMutexInit(15018,612589
static int noopMutexEnd(15019,612641
static sqlite3_mutex *noopMutexAlloc(noopMutexAlloc15020,612692
static void noopMutexFree(15021,612766
static void noopMutexEnter(15022,612821
static int noopMutexTry(15023,612877
static void noopMutexLeave(15024,612940
SQLITE_PRIVATE sqlite3_mutex_methods *sqlite3DefaultMutex(sqlite3DefaultMutex15026,612997
struct sqlite3_mutex 15054,613613
  int id;15055,613636
  int cnt;15056,613671
static int debugMutexHeld(15063,613860
static int debugMutexNotheld(15066,613934
static int debugMutexInit(15073,614071
static int debugMutexEnd(15074,614124
static sqlite3_mutex *debugMutexAlloc(debugMutexAlloc15081,614346
static void debugMutexFree(15108,614931
static void debugMutexEnter(15125,615714
static int debugMutexTry(15129,615842
static void debugMutexLeave(15141,616228
SQLITE_PRIVATE sqlite3_mutex_methods *sqlite3DefaultMutex(sqlite3DefaultMutex15147,616388
struct sqlite3_mutex 15196,617751
  HMTX mutex;15197,617774
  int  id;15198,617827
  int  nRef;15199,617864
  TID  owner;15200,617911
#define OS2_MUTEX_INITIALIZER 15203,617967
static int os2MutexInit(15208,618066
static int os2MutexEnd(15209,618117
static sqlite3_mutex *os2MutexAlloc(os2MutexAlloc15250,620047
static void os2MutexFree(15318,621968
static int os2MutexHeld(15331,622326
static int os2MutexNotheld(15344,622629
static void os2MutexEnter(15370,623563
static int os2MutexTry(15381,623879
static void os2MutexLeave(15406,624549
SQLITE_PRIVATE sqlite3_mutex_methods *sqlite3DefaultMutex(sqlite3DefaultMutex15419,624869
struct sqlite3_mutex 15471,626228
  pthread_mutex_t mutex;15472,626251
  int id;15473,626313
  int nRef;15474,626359
  pthread_t owner;15475,626414
  int trace;15477,626502
#define SQLITE3_MUTEX_INITIALIZER 15481,626589
#define SQLITE3_MUTEX_INITIALIZER 15483,626682
static int pthreadMutexHeld(15503,627640
static int pthreadMutexNotheld(15506,627755
static int pthreadMutexInit(15514,627940
static int pthreadMutexEnd(15515,627995
static sqlite3_mutex *pthreadMutexAlloc(pthreadMutexAlloc15559,629976
static void pthreadMutexFree(15614,631480
static void pthreadMutexEnter(15632,632302
static int pthreadMutexTry(15671,633583
static void pthreadMutexLeave(15726,635297
SQLITE_PRIVATE sqlite3_mutex_methods *sqlite3DefaultMutex(sqlite3DefaultMutex15746,635724
struct sqlite3_mutex 15794,636945
  CRITICAL_SECTION mutex;15795,636968
  int id;15796,637030
  int nRef;15797,637076
  DWORD owner;15798,637132
  int trace;15800,637213
#define SQLITE_W32_MUTEX_INITIALIZER 15803,637280
#define SQLITE3_MUTEX_INITIALIZER 15805,637343
#define SQLITE3_MUTEX_INITIALIZER 15807,637436
# define mutexIsNT(15829,638365
  static int mutexIsNT(15831,638397
static int winMutexHeld(15849,638861
static int winMutexNotheld2(15852,638961
static int winMutexNotheld(15855,639059
static sqlite3_mutex winMutex_staticMutexes[winMutex_staticMutexes15865,639246
static int winMutex_isInit 15873,639473
static long winMutex_lock 15879,639696
static int winMutexInit(15881,639728
static int winMutexEnd(15898,640210
static sqlite3_mutex *winMutexAlloc(winMutexAlloc15955,642566
static void winMutexFree(15986,643253
static void winMutexEnter(16005,644086
static int winMutexTry(16017,644429
static void winMutexLeave(16057,645654
SQLITE_PRIVATE sqlite3_mutex_methods *sqlite3DefaultMutex(sqlite3DefaultMutex16073,646036
static void softHeapLimitEnforcer(16117,647145
SQLITE_API void sqlite3_soft_heap_limit(16130,647435
SQLITE_API int sqlite3_release_memory(16157,648080
static SQLITE_WSD struct Mem0Global 16171,648370
  u32 nScratchFree;16173,648471
  u32 nPageFree;16174,648491
  sqlite3_mutex *mutex;mutex16176,648509
  sqlite3_int64 alarmThreshold;16184,648800
  void (*alarmCallback)alarmCallback16185,648832
  void *alarmArg;alarmArg16186,648883
  u32 *aScratchFree;aScratchFree16193,649070
  u32 *aPageFree;aPageFree16194,649091
} mem0 16195,649109
#define mem0 16197,649147
SQLITE_PRIVATE int sqlite3MallocInit(16202,649246
SQLITE_PRIVATE void sqlite3MallocEnd(16244,650860
SQLITE_API sqlite3_int64 sqlite3_memory_used(16254,651115
SQLITE_API sqlite3_int64 sqlite3_memory_highwater(16267,651508
SQLITE_PRIVATE int sqlite3MemoryAlarm(16278,651802
SQLITE_API int sqlite3_memory_alarm(16296,652263
static void sqlite3MallocAlarm(16308,652498
static int mallocWithAlarm(16328,653070
SQLITE_PRIVATE void *sqlite3Malloc(sqlite3Malloc16357,653900
SQLITE_API void *sqlite3_malloc(sqlite3_malloc16381,654749
static int scratchAllocOut 16395,655201
SQLITE_PRIVATE void *sqlite3ScratchMalloc(sqlite3ScratchMalloc16407,655592
SQLITE_PRIVATE void sqlite3ScratchFree(16458,657111
static int isLookaside(16501,658591
#define isLookaside(16505,658714
SQLITE_PRIVATE int sqlite3MallocSize(16512,658862
SQLITE_PRIVATE int sqlite3DbMallocSize(16515,658952
SQLITE_API void sqlite3_free(16527,659245
SQLITE_PRIVATE void sqlite3DbFree(16543,659665
SQLITE_PRIVATE void *sqlite3Realloc(sqlite3Realloc16558,660039
SQLITE_API void *sqlite3_realloc(sqlite3_realloc16603,661350
SQLITE_PRIVATE void *sqlite3MallocZero(sqlite3MallocZero16614,661552
SQLITE_PRIVATE void *sqlite3DbMallocZero(sqlite3DbMallocZero16626,661798
SQLITE_PRIVATE void *sqlite3DbMallocRaw(sqlite3DbMallocRaw16652,662702
SQLITE_PRIVATE void *sqlite3DbRealloc(sqlite3DbRealloc16687,663549
SQLITE_PRIVATE void *sqlite3DbReallocOrFree(sqlite3DbReallocOrFree16718,664283
SQLITE_PRIVATE char *sqlite3DbStrDup(sqlite3DbStrDup16734,664802
SQLITE_PRIVATE char *sqlite3DbStrNDup(sqlite3DbStrNDup16748,665087
SQLITE_PRIVATE void sqlite3SetString(16767,665531
SQLITE_PRIVATE int sqlite3ApiExit(16792,666313
#define etRADIX 16865,669371
#define etFLOAT 16866,669442
#define etEXP 16867,669492
#define etGENERIC 16868,669556
#define etSIZE 16869,669637
#define etSTRING 16870,669716
#define etDYNSTRING 16871,669758
#define etPERCENT 16872,669822
#define etCHARX 16873,669871
#define etSQLESCAPE 16875,669978
#define etSQLESCAPE2 16876,670039
#define etTOKEN 16878,670181
#define etSRCLIST 16879,670242
#define etPOINTER 16880,670295
#define etSQLESCAPE3 16881,670343
#define etORDINAL 16882,670405
#define etINVALID 16884,670481
typedef unsigned char etByte;16890,670595
typedef struct et_info 16896,670749
  char fmttype;16897,670818
  etByte base;16898,670880
  etByte flags;16899,670943
  etByte type;16900,671013
  etByte charset;16901,671066
  etByte prefix;16902,671142
} et_info;16903,671218
#define FLAG_SIGNED 16908,671272
#define FLAG_INTERN 16909,671344
#define FLAG_STRING 16910,671407
static const char aDigits[aDigits16917,671591
static const char aPrefix[aPrefix16918,671657
static const et_info fmtinfo[fmtinfo16919,671700
static char et_getdigit(16968,673356
static void appendSpace(16983,673686
#   define SQLITE_PRINT_BUF_SIZE 17000,674177
#   define SQLITE_PRINT_BUF_SIZE 17002,674220
#define etBUFSIZE 17005,674272
SQLITE_PRIVATE void sqlite3VXPrintf(17034,675394
SQLITE_PRIVATE void sqlite3StrAccumAppend(17550,692711
SQLITE_PRIVATE char *sqlite3StrAccumFinish(sqlite3StrAccumFinish17602,693917
SQLITE_PRIVATE void sqlite3StrAccumReset(17620,694340
SQLITE_PRIVATE void sqlite3StrAccumInit(17630,694523
SQLITE_PRIVATE char *sqlite3VMPrintf(sqlite3VMPrintf17645,694867
SQLITE_PRIVATE char *sqlite3MPrintf(sqlite3MPrintf17665,695405
SQLITE_PRIVATE char *sqlite3MAppendf(sqlite3MAppendf17682,695868
SQLITE_API char *sqlite3_vmprintf(sqlite3_vmprintf17696,696209
SQLITE_API char *sqlite3_mprintf(sqlite3_mprintf17713,696685
SQLITE_API char *sqlite3_snprintf(sqlite3_snprintf17731,697181
static void renderLogMsg(17757,697910
SQLITE_API void sqlite3_log(17771,698428
SQLITE_PRIVATE void sqlite3DebugPrintf(17786,698909
SQLITE_PRIVATE void sqlite3XPrintf(17805,699351
static SQLITE_WSD struct sqlite3PrngType 17837,700415
  unsigned char isInit;17838,700458
  unsigned char i,17839,700517
  unsigned char i, j;17839,700517
  unsigned char s[s17840,700572
} sqlite3Prng;17841,700627
static u8 randomByte(17859,701439
# define wsdPrng 17871,701948
# define wsdPrng 17873,701976
SQLITE_API void sqlite3_randomness(17918,703149
static SQLITE_WSD struct sqlite3PrngType sqlite3SavedPrng;17940,703795
SQLITE_PRIVATE void sqlite3PrngSaveState(17941,703854
SQLITE_PRIVATE void sqlite3PrngRestoreState(17948,704048
SQLITE_PRIVATE void sqlite3PrngResetState(17955,704245
#define _VDBEINT_H_18017,706635
typedef struct VdbeOp Op;18024,706819
typedef unsigned char Bool;18029,706870
struct VdbeCursor 18046,707582
  BtCursor *pCursor;pCursor18047,707602
  int iDb;18048,707668
  i64 lastRowid;18049,707744
  Bool zeroed;18050,707818
  Bool rowidIsValid;18051,707887
  Bool atFirst;18052,707944
  Bool useRandomRowid;18053,708006
  Bool nullRow;18054,708078
  Bool deferredMoveto;18055,708147
  Bool isTable;18056,708218
  Bool isIndex;18057,708287
  i64 movetoTarget;18058,708365
  Btree *pBt;pBt18059,708441
  int pseudoTableReg;18060,708509
  KeyInfo *pKeyInfo;pKeyInfo18061,708577
  int nField;18062,708653
  i64 seqCount;18063,708714
  sqlite3_vtab_cursor *pVtabCursor;pVtabCursor18064,708761
  const sqlite3_module *pModule;pModule18065,708835
  int seekResult;18069,709021
  u32 cacheStatus;18080,709452
  int payloadSize;18081,709527
  u32 *aType;aType18082,709593
  u32 *aOffset;aOffset18083,709665
  u8 *aRow;aRow18084,709744
typedef struct VdbeCursor VdbeCursor;18086,709822
typedef struct VdbeFrame VdbeFrame;18101,710494
struct VdbeFrame 18102,710530
  Vdbe *v;v18103,710549
  int pc;18104,710606
  Op *aOp;aOp18105,710654
  int nOp;18106,710707
  Mem *aMem;aMem18107,710757
  int nMem;18108,710811
  VdbeCursor **apCsr;apCsr18109,710869
  u16 nCursor;18110,710925
  void *token;token18111,710984
  int nChildMem;18112,711041
  int nChildCsr;18113,711112
  i64 lastRowid;18114,711178
  int nChange;18115,711248
  VdbeFrame *pParent;pParent18116,711318
#define VdbeFrameMem(18119,711375
#define CACHE_STALE 18124,711530
struct Mem 18137,712037
    i64 i;18139,712060
    int nZero;18140,712105
    FuncDef *pDef;pDef18141,712174
    RowSet *pRowSet;pRowSet18142,712234
    VdbeFrame *pFrame;pFrame18143,712297
  } u;18144,712354
  double r;18145,712361
  sqlite3 *db;db18146,712400
  char *z;z18147,712463
  int n;18148,712512
  u16 flags;18149,712593
  u8  type;18150,712674
  u8  enc;18151,712755
  void (*xDel)xDel18152,712827
  char *zMalloc;zMalloc18153,712906
#define MEM_Null 18171,713665
#define MEM_Str 18172,713716
#define MEM_Int 18173,713771
#define MEM_Real 18174,713828
#define MEM_Blob 18175,713888
#define MEM_RowSet 18176,713941
#define MEM_Frame 18177,714003
#define MEM_TypeMask 18178,714068
#define MEM_Term 18185,714375
#define MEM_Dyn 18186,714441
#define MEM_Static 18187,714513
#define MEM_Ephem 18188,714582
#define MEM_Agg 18189,714655
#define MEM_Zero 18190,714732
  #undef MEM_Zero18193,714842
  #define MEM_Zero 18194,714860
#define MemSetTypeFlag(18201,714969
struct VdbeFunc 18214,715582
  FuncDef *pFunc;pFunc18215,715600
  int nAux;18216,715669
  struct AuxData 18217,715747
    void *pAux;pAux18218,715766
    void (*xDelete)xDelete18219,715837
  } apAux[apAux18220,715905
struct sqlite3_context 18236,716532
  FuncDef *pFunc;pFunc18237,716557
  VdbeFunc *pVdbeFunc;pVdbeFunc18238,716635
  Mem s;18239,716692
  Mem *pMem;pMem18240,716754
  int isError;18241,716828
  CollSeq *pColl;pColl18242,716895
typedef struct Set Set;18251,717131
struct Set 18252,717155
  Hash hash;18253,717168
  HashElem *prev;prev18254,717226
struct Vdbe 18272,718004
  sqlite3 *db;db18273,718018
  Vdbe *pPrev,pPrev18274,718099
  Vdbe *pPrev,*pNext;pNext18274,718099
  int nOp;18275,718174
  int nOpAlloc;18276,718244
  Op *aOp;aOp18277,718312
  int nLabel;18278,718388
  int nLabelAlloc;18279,718442
  int *aLabel;aLabel18280,718512
  Mem **apArg;apArg18281,718569
  Mem *aColName;aColName18282,718648
  Mem *pResultSet;pResultSet18283,718703
  u16 nResColumn;18284,718766
  u16 nCursor;18285,718845
  VdbeCursor **apCsr;apCsr18286,718904
  u8 errorAction;18287,718983
  u8 okVar;18288,719057
  ynVar nVar;18289,719126
  Mem *aVar;aVar18290,719186
  char **azVar;azVar18291,719253
  u32 magic;18292,719303
  int nMem;18293,719368
  Mem *aMem;aMem18294,719447
  u32 cacheCtr;18295,719500
  int pc;18296,719572
  int rc;18297,719624
  char *zErrMsg;zErrMsg18298,719672
  u8 explain;18299,719731
  u8 changeCntOn;18300,719802
  u8 expired;18301,719868
  u8 runOnlyOnce;18302,719938
  u8 minWriteFileFormat;18303,720000
  u8 inVtabMethod;18304,720080
  u8 usesStmtJournal;18305,720131
  u8 readOnly;18306,720196
  u8 isPrepareV2;18307,720258
  int nChange;18308,720325
  int btreeMask;18309,720400
  i64 startTime;18310,720472
  BtreeMutexArray aMutex;18311,720549
  int aCounter[aCounter18312,720627
  char *zSql;zSql18313,720698
  void *pFree;pFree18314,720776
  i64 nFkConstraint;18315,720841
  i64 nStmtDefCons;18316,720911
  int iStatement;18317,720988
  FILE *trace;trace18319,721087
  VdbeFrame *pFrame;pFrame18321,721169
  int nFrame;18322,721214
  u32 expmask;18323,721278
#define VDBE_MAGIC_INIT 18329,721408
#define VDBE_MAGIC_RUN 18330,721480
#define VDBE_MAGIC_HALT 18331,721553
#define VDBE_MAGIC_DEAD 18332,721630
# define sqlite3VdbeMemSetDouble 18365,723260
# define sqlite3VdbeCheckFk(18394,724636
# define sqlite3VdbeMutexArrayEnter(18400,724775
  #define sqlite3VdbeMemExpandBlob(18413,725170
SQLITE_PRIVATE const int sqlite3one 18426,725556
static const unsigned char sqlite3Utf8Trans1[sqlite3Utf8Trans118433,725731
#define WRITE_UTF8(18445,726187
#define WRITE_UTF16LE(18465,727216
#define WRITE_UTF16BE(18477,727919
#define READ_UTF16LE(18489,728622
#define READ_UTF16BE(18499,729201
#define READ_UTF8(18536,730901
SQLITE_PRIVATE int sqlite3Utf8Read(18547,731515
SQLITE_PRIVATE int sqlite3VdbeMemTranslate(18585,732557
SQLITE_PRIVATE int sqlite3VdbeMemHandleBom(18729,736819
SQLITE_PRIVATE int sqlite3Utf8CharLen(18767,737808
SQLITE_PRIVATE int sqlite3Utf8To8(18797,738589
SQLITE_PRIVATE char *sqlite3Utf16to8(sqlite3Utf16to818821,739165
SQLITE_PRIVATE char *sqlite3Utf8to16(sqlite3Utf8to1618849,740134
SQLITE_PRIVATE int sqlite3Utf16ByteLen(18869,740680
SQLITE_PRIVATE void sqlite3UtfSelfTest(18894,741279
SQLITE_PRIVATE void sqlite3Coverage(18970,743180
SQLITE_PRIVATE int sqlite3IsNaN(18983,743532
SQLITE_PRIVATE int sqlite3Strlen30(19031,745359
SQLITE_PRIVATE void sqlite3Error(19059,746267
SQLITE_PRIVATE void sqlite3ErrorMsg(19092,747473
SQLITE_PRIVATE int sqlite3Dequote(19126,748516
#define UpperToLower 19155,749121
SQLITE_PRIVATE int sqlite3StrICmp(19161,749289
SQLITE_API int sqlite3_strnicmp(19168,749572
SQLITE_PRIVATE int sqlite3IsNumber(19189,750427
SQLITE_PRIVATE int sqlite3AtoF(19229,751617
static int compare2pow63(19370,755364
SQLITE_PRIVATE int sqlite3Atoi64(19393,755986
SQLITE_PRIVATE int sqlite3FitsIn64Bits(19449,757728
SQLITE_PRIVATE int sqlite3GetInt32(19483,758708
SQLITE_PRIVATE int sqlite3PutVarint(19547,760192
SQLITE_PRIVATE int sqlite3PutVarint32(19580,761028
#define SLOT_2_0 19604,761623
#define SLOT_4_2_0 19605,761655
SQLITE_PRIVATE u8 sqlite3GetVarint(19612,761830
SQLITE_PRIVATE u8 sqlite3GetVarint32(19782,765039
SQLITE_PRIVATE int sqlite3VarintLen(19905,767586
SQLITE_PRIVATE u32 sqlite3Get4byte(19918,767781
SQLITE_PRIVATE void sqlite3Put4byte(19921,767885
static u8 hexToInt(19936,768248
SQLITE_PRIVATE void *sqlite3HexToBlob(sqlite3HexToBlob19955,768836
static void logBadConnection(19976,769423
SQLITE_PRIVATE int sqlite3SafetyCheckOk(19997,770293
SQLITE_PRIVATE int sqlite3SafetyCheckSickOrOk(20014,770652
SQLITE_PRIVATE void sqlite3HashInit(20050,771753
SQLITE_PRIVATE void sqlite3HashClear(20062,772057
static unsigned int strHash(20082,772449
static void insertElement(20096,772770
static int rehash(20130,773747
static HashElem *findElementGivenHash(findElementGivenHash20166,775035
static void removeElementGivenHash(20195,775909
SQLITE_PRIVATE void *sqlite3HashFind(sqlite3HashFind20230,776790
SQLITE_PRIVATE void *sqlite3HashInsert(sqlite3HashInsert20260,777790
SQLITE_PRIVATE const char *sqlite3OpcodeName(sqlite3OpcodeName20311,779361
# define SQLITE_OS2_THREADS 20513,785305
#define _OS_COMMON_H_20541,786226
SQLITE_PRIVATE int sqlite3OSTrace 20553,786595
#define OSTRACE1(20554,786634
#define OSTRACE2(20555,786705
#define OSTRACE3(20556,786778
#define OSTRACE4(20557,786853
#define OSTRACE5(20558,786930
#define OSTRACE6(20559,787009
#define OSTRACE7(20561,787096
#define OSTRACE1(20564,787193
#define OSTRACE2(20565,787213
#define OSTRACE3(20566,787235
#define OSTRACE4(20567,787259
#define OSTRACE5(20568,787285
#define OSTRACE6(20569,787313
#define OSTRACE7(20570,787343
#define _HWTIME_H_20601,788280
  __inline__ sqlite_uint64 sqlite3Hwtime(20614,788672
  __declspec(20622,788880
  __inline__ sqlite_uint64 sqlite3Hwtime(20641,789290
SQLITE_PRIVATE   sqlite_uint64 sqlite3Hwtime(20665,790032
static sqlite_uint64 g_start;20674,790318
static sqlite_uint64 g_elapsed;20675,790348
#define TIMER_START 20676,790380
#define TIMER_END 20677,790430
#define TIMER_ELAPSED 20678,790490
#define TIMER_START20680,790532
#define TIMER_END20681,790552
#define TIMER_ELAPSED 20682,790570
SQLITE_API int sqlite3_io_error_hit 20691,790841
SQLITE_API int sqlite3_io_error_hardhit 20692,790926
SQLITE_API int sqlite3_io_error_pending 20693,791012
SQLITE_API int sqlite3_io_error_persist 20694,791100
SQLITE_API int sqlite3_io_error_benign 20695,791185
SQLITE_API int sqlite3_diskfull_pending 20696,791269
SQLITE_API int sqlite3_diskfull 20697,791314
#define SimulateIOErrorBenign(20698,791351
#define SimulateIOError(20699,791412
static void local_ioerr(20703,791590
#define SimulateDiskfullError(20708,791730
#define SimulateIOErrorBenign(20720,792025
#define SimulateIOError(20721,792058
#define SimulateDiskfullError(20722,792085
SQLITE_API int sqlite3_open_file_count 20729,792210
#define OpenCounter(20730,792254
#define OpenCounter(20732,792313
typedef struct os2File os2File;20744,792646
struct os2File 20745,792678
  const sqlite3_io_methods *pMethod;pMethod20746,792695
  HFILE h;20747,792762
  char* pathToDel;20748,792826
  unsigned char locktype;20749,792905
#define LOCK_TIMEOUT 20752,792984
static int os2Close(20762,793330
static int os2Read(20786,793957
static int os2Write(20817,794971
static int os2Truncate(20849,795978
SQLITE_API int sqlite3_sync_count 20863,796459
SQLITE_API int sqlite3_fullsync_count 20864,796498
static int os2Sync(20870,796623
static int os2FileSize(20893,797186
static int getReadLock(20911,797681
static int unlockReadLock(20929,798169
static int os2Lock(20970,799596
static int os2CheckReservedLock(21106,804181
static int os2Unlock(21152,805818
static int os2FileControl(21207,807782
static int os2SectorSize(21228,808499
static int os2DeviceCharacteristics(21235,808635
static UconvObject ucUtf8 21243,808777
static UconvObject uclCp 21244,808849
static void initUconvObjects(21249,809012
static void freeUconvObjects(21259,809307
static char *convertUtf8PathToCp(convertUtf8PathToCp21274,809725
char *convertCpPathToUtf8(convertCpPathToUtf821303,810683
static const sqlite3_io_methods os2IoMethod 21327,811338
static int getTempname(21353,812017
static int os2FullPathname(21408,813890
static int os2Open(21430,814601
static int os2Delete(21545,818079
static int os2Access(21562,818647
static void *os2DlOpen(os2DlOpen21605,820141
static void os2DlError(21618,820590
static void *os2DlSym(os2DlSym21621,820672
static void os2DlClose(21635,821216
  #define os2DlOpen 21639,821365
  #define os2DlError 21640,821387
  #define os2DlSym 21641,821410
  #define os2DlClose 21642,821431
static int os2Randomness(21649,821520
static int os2Sleep(21716,823473
SQLITE_API int sqlite3_current_time 21726,823749
int os2CurrentTime(21734,823998
static int os2GetLastError(21769,825024
SQLITE_API int sqlite3_os_init(21776,825177
SQLITE_API int sqlite3_os_end(21802,826020
#    define SQLITE_ENABLE_LOCKING_STYLE 21877,829025
#    define SQLITE_ENABLE_LOCKING_STYLE 21879,829075
#    define OS_VXWORKS 21889,829300
#    define OS_VXWORKS 21891,829333
# define _LARGE_FILE 21914,830364
#   define _FILE_OFFSET_BITS 21916,830420
# define _LARGEFILE_SOURCE 21918,830460
#define SQLITE_FSFLAGS_IS_MSDOS 21949,831028
# define SQLITE_UNIX_THREADS 21956,831202
# define SQLITE_DEFAULT_FILE_PERMISSIONS 21963,831335
# define SQLITE_DEFAULT_PROXYDIR_PERMISSIONS 21970,831493
#define MAX_PATHNAME 21976,831591
#define IS_LOCK_ERROR(21982,831753
typedef struct UnixUnusedFd UnixUnusedFd;21991,832095
struct UnixUnusedFd 21992,832137
  int fd;21993,832159
  int flags;21994,832218
  UnixUnusedFd *pNext;pNext21995,832295
typedef struct unixFile unixFile;22002,832479
struct unixFile 22003,832513
  sqlite3_io_methods const *pMethod;pMethod22004,832531
  struct unixOpenCnt *pOpen;pOpen22005,832598
  struct unixLockInfo *pLock;pLock22006,832678
  int h;22007,832750
  int dirfd;22008,832811
  unsigned char locktype;22009,832886
  int lastErrno;22010,832960
  void *lockingContext;lockingContext22011,833040
  UnixUnusedFd *pUnused;pUnused22012,833110
  int fileFlags;22013,833178
  int openFlags;22015,833270
  unsigned fsFlags;22018,833402
  pthread_t tid;22021,833524
  int isDelete;22024,833624
  struct vxworksFileId *pId;pId22025,833689
  unsigned char transCntrChng;22035,834162
  unsigned char dbUpdate;22036,834241
  unsigned char inNormalWrite;22037,834322
  char aPadding[aPadding22043,834562
#define SQLITE_WHOLE_FILE_LOCKING 22050,834658
#define _OS_COMMON_H_22077,835615
SQLITE_PRIVATE int sqlite3OSTrace 22089,835984
#define OSTRACE1(22090,836023
#define OSTRACE2(22091,836094
#define OSTRACE3(22092,836167
#define OSTRACE4(22093,836242
#define OSTRACE5(22094,836319
#define OSTRACE6(22095,836398
#define OSTRACE7(22097,836485
#define OSTRACE1(22100,836582
#define OSTRACE2(22101,836602
#define OSTRACE3(22102,836624
#define OSTRACE4(22103,836648
#define OSTRACE5(22104,836674
#define OSTRACE6(22105,836702
#define OSTRACE7(22106,836732
#define _HWTIME_H_22137,837669
  __inline__ sqlite_uint64 sqlite3Hwtime(22150,838061
  __declspec(22158,838269
  __inline__ sqlite_uint64 sqlite3Hwtime(22177,838679
SQLITE_PRIVATE   sqlite_uint64 sqlite3Hwtime(22201,839421
static sqlite_uint64 g_start;22210,839707
static sqlite_uint64 g_elapsed;22211,839737
#define TIMER_START 22212,839769
#define TIMER_END 22213,839819
#define TIMER_ELAPSED 22214,839879
#define TIMER_START22216,839921
#define TIMER_END22217,839941
#define TIMER_ELAPSED 22218,839959
SQLITE_API int sqlite3_io_error_hit 22227,840230
SQLITE_API int sqlite3_io_error_hardhit 22228,840315
SQLITE_API int sqlite3_io_error_pending 22229,840401
SQLITE_API int sqlite3_io_error_persist 22230,840489
SQLITE_API int sqlite3_io_error_benign 22231,840574
SQLITE_API int sqlite3_diskfull_pending 22232,840658
SQLITE_API int sqlite3_diskfull 22233,840703
#define SimulateIOErrorBenign(22234,840740
#define SimulateIOError(22235,840801
static void local_ioerr(22239,840979
#define SimulateDiskfullError(22244,841119
#define SimulateIOErrorBenign(22256,841414
#define SimulateIOError(22257,841447
#define SimulateDiskfullError(22258,841474
SQLITE_API int sqlite3_open_file_count 22265,841599
#define OpenCounter(22266,841643
#define OpenCounter(22268,841702
# define O_LARGEFILE 22280,842019
# undef O_LARGEFILE22283,842075
# define O_LARGEFILE 22284,842095
# define O_NOFOLLOW 22287,842144
# define O_BINARY 22290,842190
# define fcntl(22300,842496
#define threadid 22308,842654
#define threadid 22310,842692
static void unixEnterMutex(22328,843207
static void unixLeaveMutex(22331,843313
static int unixMutexHeld(22335,843439
static const char *locktypeName(locktypeName22347,843743
static int lockTrace(22368,844343
#define fcntl 22415,845589
static int sqliteErrorFromPosixError(22430,846094
struct vxworksFileId 22504,848375
  struct vxworksFileId *pNext;pNext22505,848398
  int nRef;22506,848463
  int nName;22507,848534
  char *zCanonicalName;zCanonicalName22508,848610
static struct vxworksFileId *vxworksFileList vxworksFileList22516,848771
static int vxworksSimplifyName(22531,849215
static struct vxworksFileId *vxworksFindFileId(vxworksFindFileId22565,850108
static void vxworksReleaseFileId(22607,851506
# define SET_THREADID(22734,858055
# define CHECK_THREADID(22735,858108
# define SET_THREADID(22738,858251
# define CHECK_THREADID(22739,858276
struct unixFileId 22747,858527
  dev_t dev;22748,858547
  struct vxworksFileId *pId;pId22750,858612
  ino_t ino;22752,858682
struct unixLockKey 22766,859191
  struct unixFileId fid;22767,859212
  pthread_t tid;22769,859319
struct unixLockInfo 22782,859802
  struct unixLockKey lockKey;22783,859824
  int cnt;22784,859879
  int locktype;22785,859947
  int nRef;22786,860026
  unsigned long long sharedByte;22788,860144
  struct unixLockInfo *pNext;pNext22790,860221
  struct unixLockInfo *pPrev;pPrev22791,860294
struct unixOpenCnt 22806,860931
  struct unixFileId fileId;22807,860952
  int nRef;22808,861003
  int nLock;22809,861076
  UnixUnusedFd *pUnused;pUnused22810,861140
  sem_t *pSem;pSem22812,861224
  char aSemName[aSemName22813,861287
  struct unixOpenCnt *pNext,pNext22815,861358
  struct unixOpenCnt *pNext, *pPrev;pPrev22815,861358
static struct unixLockInfo *lockList lockList22824,861704
static struct unixOpenCnt *openList openList22825,861746
#    define SQLITE_THREAD_OVERRIDE_LOCK 22847,862645
int threadsOverrideEachOthersLocks 22850,862718
static int threadsOverrideEachOthersLocks 22852,862792
struct threadTestData 22860,863007
  int fd;22861,863031
  struct flock lock;22862,863080
  int result;22863,863133
static void *threadLockingTest(threadLockingTest22876,863667
static void testThreadLockingBehavior(22890,864125
static void releaseLockInfo(22925,864978
static void releaseOpenCnt(22952,865680
static int findLockInfo(22994,867036
static int transferOwnership(23128,871304
# define transferOwnership(23161,872373
static int unixCheckReservedLock(23171,872748
static int unixLock(23236,874598
static int closePendingFds(23480,882860
static void setPendingFd(23505,883414
static int _posixUnlock(23527,884258
static int unixUnlock(23706,889907
static int closeUnixFile(23720,890405
static int unixClose(23759,891241
static int nolockCheckReservedLock(23801,892953
static int nolockLock(23806,893093
static int nolockUnlock(23810,893215
static int nolockClose(23818,893365
#define DOTLOCK_SUFFIX 23851,894753
static int dotlockCheckReservedLock(23863,895293
static int dotlockLock(23914,896998
static int dotlockUnlock(23967,898443
static int dotlockClose(24009,899542
static int flockCheckReservedLock(24045,900990
static int flockLock(24127,903458
static int flockUnlock(24171,904694
static int flockClose(24214,905713
static int semCheckReservedLock(24244,906855
static int semLock(24312,908927
static int semUnlock(24346,909802
static int semClose(24383,910670
typedef struct afpLockingContext afpLockingContext;24419,911741
struct afpLockingContext 24420,911793
  int reserved;24421,911820
  const char *dbPath;dbPath24422,911836
struct ByteRangeLockPB224425,911902
  unsigned long long offset;24427,911928
  unsigned long long length;24428,911999
  unsigned long long retRangeStart;24429,912062
  unsigned char unLockFlag;24430,912141
  unsigned char startEndFlag;24431,912204
  int fd;24432,912283
#define afpfsByteRangeLock2FSCTL 24435,912363
static int afpSetLock(24443,912597
static int afpCheckReservedLock(24489,914168
static int afpLock(24558,916231
static int afpUnlock(24748,922514
static int afpClose(24855,925920
static int nfsUnlock(24899,927557
static int seekAndRead(24935,929079
static int unixRead(24973,930071
static int seekAndWrite(25011,931110
static int unixWrite(25047,931977
SQLITE_API int sqlite3_sync_count 25111,933818
SQLITE_API int sqlite3_fullsync_count 25112,933857
# define fdatasync 25122,934221
# define HAVE_FULLFSYNC 25131,934460
# define HAVE_FULLFSYNC 25133,934492
static int full_fsync(25161,935816
static int unixSync(25244,938488
static int unixTruncate(25303,940366
static int unixFileSize(25332,941234
static int unixFileControl(25368,942174
static int unixSectorSize(25409,943491
static int unixDeviceCharacteristics(25417,943694
#define IOMETHODS(25462,945434
IOMETHODS(25490,947279
  static const struct Mapping 25596,951468
    const char *zFilesystem;zFilesystem25597,951500
    const sqlite3_io_methods *pMethods;pMethods25598,951569
static const sqlite3_io_methods *autolockIoFinderImpl(autolockIoFinderImpl25658,953311
typedef const sqlite3_io_methods *(*finder_type)finder_type25691,954262
static int fillInUnixFile(25704,954664
static int openDirectory(25881,960288
static int getTempname(25907,961013
static UnixUnusedFd *findReusableFd(findReusableFd25988,963576
static int unixOpen(26052,965852
static int unixDelete(26285,974076
static int unixAccess(26326,975138
static int unixFullPathname(26363,976193
static void *unixDlOpen(unixDlOpen26401,977349
static void unixDlError(26413,977814
static void (*unixDlSym(unixDlSym26423,978058
static void unixDlClose(26446,979138
  #define unixDlOpen 26451,979305
  #define unixDlError 26452,979329
  #define unixDlSym 26453,979353
  #define unixDlClose 26454,979377
static int unixRandomness(26460,979479
static int unixSleep(26507,981072
SQLITE_API int sqlite3_current_time 26534,981797
static int unixCurrentTime(26542,982093
static int unixGetLastError(26577,983127
typedef struct proxyLockingContext proxyLockingContext;26746,990473
struct proxyLockingContext 26747,990529
  unixFile *conchFile;conchFile26748,990558
  char *conchFilePath;conchFilePath26749,990611
  unixFile *lockProxy;lockProxy26750,990671
  char *lockProxyPath;lockProxyPath26751,990729
  char *dbPath;dbPath26752,990794
  int conchHeld;26753,990853
  void *oldLockingContext;oldLockingContext26754,990929
  sqlite3_io_methods const *pOldMethod;pOldMethod26755,991010
static int proxyGetLockPath(26763,991275
static int proxyCreateLockPath(26804,992309
static int proxyCreateUnixFile(26844,993652
SQLITE_API int sqlite3_hostid_num 26927,995984
#define PROXY_HOSTIDLEN 26930,996031
static int proxyGetHostID(26935,996204
#define PROXY_CONCHVERSION 26959,996846
#define PROXY_HEADERLEN 26960,996920
#define PROXY_PATHINDEX 26961,996982
#define PROXY_MAXCONCHLEN 26962,997043
static int proxyBreakConchLock(26970,997390
static int proxyConchLock(27029,999168
static int proxyTakeConch(27106,1001840
static int proxyReleaseConch(27328,1010097
static int proxyCreateConchPathname(27358,1011255
static int switchLockProxyPath(27395,1012292
static int proxyGetDbPathForUnixFile(27431,1013366
static int proxyTransformUnixFile(27461,1014601
static int proxyFileControl(27548,1017268
static int proxyCheckReservedLock(27618,1019586
static int proxyLock(27657,1020863
static int proxyUnlock(27681,1021594
static int proxyClose(27700,1022120
SQLITE_API int sqlite3_os_init(27762,1024225
  #define UNIXVFS(27783,1025363
SQLITE_API int sqlite3_os_end(27850,1027980
# define SQLITE_W32_THREADS 27911,1030240
#define _OS_COMMON_H_27939,1031161
SQLITE_PRIVATE int sqlite3OSTrace 27951,1031530
#define OSTRACE1(27952,1031569
#define OSTRACE2(27953,1031640
#define OSTRACE3(27954,1031713
#define OSTRACE4(27955,1031788
#define OSTRACE5(27956,1031865
#define OSTRACE6(27957,1031944
#define OSTRACE7(27959,1032031
#define OSTRACE1(27962,1032128
#define OSTRACE2(27963,1032148
#define OSTRACE3(27964,1032170
#define OSTRACE4(27965,1032194
#define OSTRACE5(27966,1032220
#define OSTRACE6(27967,1032248
#define OSTRACE7(27968,1032278
#define _HWTIME_H_27999,1033215
  __inline__ sqlite_uint64 sqlite3Hwtime(28012,1033607
  __declspec(28020,1033815
  __inline__ sqlite_uint64 sqlite3Hwtime(28039,1034225
SQLITE_PRIVATE   sqlite_uint64 sqlite3Hwtime(28063,1034967
static sqlite_uint64 g_start;28072,1035253
static sqlite_uint64 g_elapsed;28073,1035283
#define TIMER_START 28074,1035315
#define TIMER_END 28075,1035365
#define TIMER_ELAPSED 28076,1035425
#define TIMER_START28078,1035467
#define TIMER_END28079,1035487
#define TIMER_ELAPSED 28080,1035505
SQLITE_API int sqlite3_io_error_hit 28089,1035776
SQLITE_API int sqlite3_io_error_hardhit 28090,1035861
SQLITE_API int sqlite3_io_error_pending 28091,1035947
SQLITE_API int sqlite3_io_error_persist 28092,1036035
SQLITE_API int sqlite3_io_error_benign 28093,1036120
SQLITE_API int sqlite3_diskfull_pending 28094,1036204
SQLITE_API int sqlite3_diskfull 28095,1036249
#define SimulateIOErrorBenign(28096,1036286
#define SimulateIOError(28097,1036347
static void local_ioerr(28101,1036525
#define SimulateDiskfullError(28106,1036665
#define SimulateIOErrorBenign(28118,1036960
#define SimulateIOError(28119,1036993
#define SimulateDiskfullError(28120,1037020
SQLITE_API int sqlite3_open_file_count 28127,1037145
#define OpenCounter(28128,1037189
#define OpenCounter(28130,1037248
# define INVALID_FILE_ATTRIBUTES 28142,1037566
# define AreFileApisANSI(28150,1037727
# define FormatMessageW(28151,1037756
typedef struct winceLock 28159,1037930
  int nReaders;28160,1037957
  BOOL bPending;28161,1038017
  BOOL bReserved;28162,1038088
  BOOL bExclusive;28163,1038160
} winceLock;28164,1038234
typedef struct winFile winFile;28171,1038361
struct winFile 28172,1038393
  const sqlite3_io_methods *pMethod;pMethod28173,1038410
  HANDLE h;28174,1038466
  unsigned char locktype;28175,1038528
  short sharedLockByte;28176,1038601
  DWORD lastErrno;28177,1038676
  DWORD sectorSize;28178,1038750
  WCHAR *zDeleteOnClose;zDeleteOnClose28180,1038839
  HANDLE hMutex;28181,1038907
  HANDLE hShared;28182,1038985
  winceLock local;28183,1039056
  winceLock *shared;shared28184,1039131
SQLITE_API int sqlite3_os_type 28209,1039761
static int sqlite3_os_type 28211,1039803
# define isNT(28226,1040380
  static int isNT(28228,1040407
static WCHAR *utf8ToUnicode(utf8ToUnicode28244,1040842
static char *unicodeToUtf8(unicodeToUtf828265,1041390
static WCHAR *mbcsToUnicode(mbcsToUnicode28290,1042007
static char *unicodeToMbcs(unicodeToMbcs28315,1042690
SQLITE_API char *sqlite3_win32_mbcs_to_utf8(sqlite3_win32_mbcs_to_utf828338,1043304
static char *utf8ToMbcs(utf8ToMbcs28355,1043701
struct tm *__cdecl localtime(28376,1044187
#define GetTempPathA(28399,1044809
#define LockFile(28401,1044836
#define UnlockFile(28402,1044900
#define LockFileEx(28403,1044966
#define HANDLE_TO_WINFILE(28405,1045036
static void winceMutexAcquire(28410,1045155
#define winceMutexRelease(28419,1045389
static BOOL winceCreateLock(28425,1045528
static void winceDestroyLock(28500,1047754
static BOOL winceLockFile(28534,1048679
static BOOL winceUnlockFile(28598,1050428
static BOOL winceLockFileEx(28660,1052161
#define MX_CLOSE_ATTEMPT 28700,1053544
static int winClose(28701,1053571
#define WINCE_DELETION_ATTEMPTS 28711,1053842
# define INVALID_SET_FILE_POINTER 28733,1054388
static int winRead(28741,1054589
static int winWrite(28779,1055793
static int winTruncate(28820,1056963
SQLITE_API int sqlite3_sync_count 28848,1057860
SQLITE_API int sqlite3_fullsync_count 28849,1057899
static int winSync(28855,1058024
static int winFileSize(28890,1058732
# define LOCKFILE_FAIL_IMMEDIATELY 28913,1059343
static int getReadLock(28921,1059512
static int unlockReadLock(28949,1060206
static int winLock(28992,1061568
static int winCheckReservedLock(29115,1065155
static int winUnlock(29146,1066073
static int winFileControl(29179,1067023
static int winSectorSize(29203,1067757
static int winDeviceCharacteristics(29211,1067919
static const sqlite3_io_methods winIoMethod 29220,1068108
static void *convertUtf8Filename(convertUtf8Filename29248,1068879
static int getTempname(29267,1069356
static int getLastErrorMsg(29324,1071082
static int winOpen(29384,1073036
#define MX_DELETION_ATTEMPTS 29541,1077813
static int winDelete(29542,1077844
static int winAccess(29587,1079337
static int winFullPathname(29633,1080616
static int getSectorSize(29704,1082570
static void *winDlOpen(winDlOpen29777,1084592
static void winDlError(29798,1085177
void (*winDlSym(winDlSym29802,1085307
void winDlClose(29813,1085769
  #define winDlOpen 29818,1085934
  #define winDlError 29819,1085957
  #define winDlSym 29820,1085980
  #define winDlClose 29821,1086003
static int winRandomness(29828,1086092
static int winSleep(29865,1086917
SQLITE_API int sqlite3_current_time 29876,1087234
int winCurrentTime(29884,1087483
static int winGetLastError(29961,1090563
SQLITE_API int sqlite3_os_init(29969,1090768
SQLITE_API int sqlite3_os_end(29995,1091592
#define BITVEC_SZ 30041,1093569
#define BITVEC_USIZE 30045,1093782
#define BITVEC_TELEM 30051,1094095
#define BITVEC_SZELEM 30053,1094167
#define BITVEC_NELEM 30055,1094238
#define BITVEC_NBIT 30057,1094341
#define BITVEC_NINT 30060,1094438
#define BITVEC_MXHASH 30063,1094576
#define BITVEC_HASH(30068,1094819
#define BITVEC_NPTR 30070,1094867
struct Bitvec 30094,1095843
  u32 iSize;30095,1095859
  u32 nSet;30096,1095931
  u32 iDivisor;30099,1096120
    BITVEC_TELEM aBitmap[aBitmap30104,1096397
    u32 aHash[aHash30105,1096468
    Bitvec *apSub[apSub30106,1096533
  } u;30107,1096597
SQLITE_PRIVATE Bitvec *sqlite3BitvecCreate(sqlite3BitvecCreate30115,1096770
SQLITE_PRIVATE int sqlite3BitvecTest(30130,1097133
SQLITE_PRIVATE int sqlite3BitvecSet(30166,1098138
SQLITE_PRIVATE void sqlite3BitvecClear(30237,1100227
SQLITE_PRIVATE void sqlite3BitvecDestroy(30274,1101110
SQLITE_PRIVATE u32 sqlite3BitvecSize(30289,1101424
#define SETBIT(30300,1101756
#define CLEARBIT(30301,1101803
#define TESTBIT(30302,1101851
SQLITE_PRIVATE int sqlite3BitvecBuiltinTest(30334,1103236
struct PCache 30430,1105775
  PgHdr *pDirty,pDirty30431,1105791
  PgHdr *pDirty, *pDirtyTail;pDirtyTail30431,1105791
  PgHdr *pSynced;pSynced30432,1105868
  int nRef;30433,1105948
  int nMax;30434,1106019
  int szPage;30435,1106085
  int szExtra;30436,1106162
  int bPurgeable;30437,1106240
  int (*xStress)xStress30438,1106319
  void *pStress;pStress30439,1106393
  sqlite3_pcache *pCache;pCache30440,1106457
  PgHdr *pPage1;pPage130441,1106524
# define expensive_assert(30451,1106885
# define expensive_assert(30453,1106931
static int pcacheCheckSynced(30466,1107373
static void pcacheRemoveFromDirtyList(30478,1107730
static void pcacheAddToDirtyList(30515,1108698
static void pcacheUnpin(30539,1109362
SQLITE_PRIVATE int sqlite3PcacheInitialize(30554,1109762
SQLITE_PRIVATE void sqlite3PcacheShutdown(30560,1109970
SQLITE_PRIVATE int sqlite3PcacheSize(30569,1110201
SQLITE_PRIVATE void sqlite3PcacheOpen(30577,1110504
SQLITE_PRIVATE void sqlite3PcacheSetPageSize(30598,1111273
SQLITE_PRIVATE int sqlite3PcacheFetch(30611,1111606
SQLITE_PRIVATE void sqlite3PcacheRelease(30700,1114234
SQLITE_PRIVATE void sqlite3PcacheRef(30719,1114664
SQLITE_PRIVATE void sqlite3PcacheDrop(30729,1114936
SQLITE_PRIVATE void sqlite3PcacheMakeDirty(30747,1115335
SQLITE_PRIVATE void sqlite3PcacheMakeClean(30760,1115638
SQLITE_PRIVATE void sqlite3PcacheCleanAll(30773,1115910
SQLITE_PRIVATE void sqlite3PcacheClearSyncFlags(30783,1116117
SQLITE_PRIVATE void sqlite3PcacheMove(30794,1116375
SQLITE_PRIVATE void sqlite3PcacheTruncate(30815,1117142
SQLITE_PRIVATE void sqlite3PcacheClose(30837,1117663
SQLITE_PRIVATE void sqlite3PcacheClear(30846,1117852
static PgHdr *pcacheMergeDirtyList(pcacheMergeDirtyList30854,1118067
#define N_SORT_BUCKET 30888,1118939
static PgHdr *pcacheSortDirtyList(pcacheSortDirtyList30889,1118965
SQLITE_PRIVATE PgHdr *sqlite3PcacheDirtyList(sqlite3PcacheDirtyList30923,1119738
SQLITE_PRIVATE int sqlite3PcacheRefCount(30934,1120014
SQLITE_PRIVATE int sqlite3PcachePageRefcount(30941,1120176
SQLITE_PRIVATE int sqlite3PcachePagecount(30948,1120310
SQLITE_PRIVATE int sqlite3PcacheGetCachesize(30960,1120564
SQLITE_PRIVATE void sqlite3PcacheSetCachesize(30968,1120704
SQLITE_PRIVATE void sqlite3PcacheIterateDirty(30981,1121111
typedef struct PCache1 PCache1;31011,1122180
typedef struct PgHdr1 PgHdr1;31012,1122212
typedef struct PgFreeslot PgFreeslot;31013,1122242
struct PCache1 31018,1122383
  int szPage;31024,1122676
  int bPurgeable;31025,1122753
  unsigned int nMin;31026,1122824
  unsigned int nMax;31027,1122901
  unsigned int nRecyclable;31033,1123164
  unsigned int nPage;31034,1123240
  unsigned int nHash;31035,1123316
  PgHdr1 **apHash;apHash31036,1123388
  unsigned int iMaxKey;31038,1123467
struct PgHdr1 31047,1123780
  unsigned int iKey;31048,1123796
  PgHdr1 *pNext;pNext31049,1123859
  PCache1 *pCache;pCache31050,1123923
  PgHdr1 *pLruNext;pLruNext31051,1123998
  PgHdr1 *pLruPrev;pLruPrev31052,1124072
struct PgFreeslot 31059,1124277
  PgFreeslot *pNext;pNext31060,1124297
static SQLITE_WSD struct PCacheGlobal 31066,1124385
  sqlite3_mutex *mutex;mutex31067,1124425
  int nMaxPage;31069,1124500
  int nMinPage;31070,1124581
  int nCurrentPage;31071,1124662
  PgHdr1 *pLruHead,pLruHead31072,1124742
  PgHdr1 *pLruHead, *pLruTail;pLruTail31072,1124742
  int szSlot;31075,1124877
  void *pStart,pStart31076,1124944
  void *pStart, *pEnd;pEnd31076,1124944
  PgFreeslot *pFree;pFree31077,1125021
  int isInit;31078,1125082
} pcache1_g;31079,1125146
#define pcache1 31086,1125364
#define PGHDR1_TO_PAGE(31100,1126038
#define PAGE_TO_PGHDR1(31101,1126107
#define pcache1EnterMutex(31106,1126228
#define pcache1LeaveMutex(31107,1126291
SQLITE_PRIVATE void sqlite3PCacheBufferSetup(31118,1126800
static void *pcache1Alloc(pcache1Alloc31141,1127458
static void pcache1Free(31172,1128462
static PgHdr1 *pcache1AllocPage(pcache1AllocPage31191,1128992
static void pcache1FreePage(31213,1129564
SQLITE_PRIVATE void *sqlite3PageMalloc(sqlite3PageMalloc31227,1129949
SQLITE_PRIVATE void sqlite3PageFree(31238,1130162
static int pcache1ResizeHash(31253,1130611
static void pcache1PinPage(31297,1131740
static void pcache1RemoveFromHash(31325,1132517
static void pcache1EnforceMaxPage(31341,1132928
static void pcache1TruncateUnsafe(31358,1133468
static int pcache1Init(31389,1134323
static void pcache1Shutdown(31405,1134761
static sqlite3_pcache *pcache1Create(pcache1Create31416,1134998
static void pcache1Cachesize(31439,1135576
static int pcache1Pagecount(31453,1135921
static void *pcache1Fetch(pcache1Fetch31510,1138166
static void pcache1Unpin(31592,1140359
static void pcache1Rekey(31631,1141572
static void pcache1Truncate(31671,1142485
static void pcache1Destroy(31686,1142868
SQLITE_PRIVATE void sqlite3PCacheSetDefault(31703,1143379
SQLITE_PRIVATE int sqlite3PcacheReleaseMemory(31730,1144449
SQLITE_PRIVATE void sqlite3PcacheStats(31752,1145009
#define ROWSET_ALLOCATION_SIZE 31839,1148331
#define ROWSET_ENTRY_PER_CHUNK 31844,1148428
struct RowSetEntry 31850,1148614
  i64 v;31851,1148647
  struct RowSetEntry *pRight;pRight31852,1148712
  struct RowSetEntry *pLeft;pLeft31853,1148789
struct RowSetChunk 31862,1149107
  struct RowSetChunk *pNextChunk;pNextChunk31863,1149128
  struct RowSetEntry aEntry[aEntry31864,1149206
struct RowSet 31872,1149407
  struct RowSetChunk *pChunk;pChunk31873,1149423
  sqlite3 *db;db31874,1149492
  struct RowSetEntry *pEntry;pEntry31875,1149555
  struct RowSetEntry *pLast;pLast31876,1149623
  struct RowSetEntry *pFresh;pFresh31877,1149692
  struct RowSetEntry *pTree;pTree31878,1149759
  u16 nFresh;31879,1149821
  u8 isSorted;31880,1149888
  u8 iBatch;31881,1149952
SQLITE_PRIVATE RowSet *sqlite3RowSetInit(sqlite3RowSetInit31896,1150477
SQLITE_PRIVATE void sqlite3RowSetClear(31917,1151071
SQLITE_PRIVATE void sqlite3RowSetInsert(31937,1151537
static struct RowSetEntry *rowSetMerge(rowSetMerge31975,1152524
static void rowSetSort(32011,1153449
static void rowSetTreeToList(32043,1154276
static struct RowSetEntry *rowSetNDeepTree(rowSetNDeepTree32078,1155413
static struct RowSetEntry *rowSetListToTree(rowSetListToTree32108,1156109
static void rowSetToList(32132,1156806
SQLITE_PRIVATE int sqlite3RowSetNext(32152,1157328
SQLITE_PRIVATE int sqlite3RowSetTest(32170,1157731
int sqlite3PagerTrace=32222,1159338
#define sqlite3DebugPrintf 32223,1159393
#define PAGERTRACE(32224,1159427
#define PAGERTRACE(32226,1159508
#define PAGERID(32237,1159831
#define FILEHANDLEID(32238,1159865
#define PAGER_UNLOCK 32288,1162469
#define PAGER_SHARED 32289,1162497
#define PAGER_RESERVED 32290,1162553
#define PAGER_EXCLUSIVE 32291,1162611
#define PAGER_SYNCED 32292,1162670
# define CODEC1(32298,1162784
# define CODEC2(32300,1162872
# define CODEC1(32304,1163012
# define CODEC2(32305,1163053
#define MAX_SECTOR_SIZE 32314,1163385
typedef struct PagerSavepoint PagerSavepoint;32329,1164078
struct PagerSavepoint 32330,1164124
  i64 iOffset;32331,1164148
  i64 iHdrOffset;32332,1164217
  Bitvec *pInSavepoint;pInSavepoint32333,1164264
  Pgno nOrig;32334,1164332
  Pgno iSubRec;32335,1164402
struct Pager 32434,1168845
  sqlite3_vfs *pVfs;pVfs32435,1168860
  u8 exclusiveMode;32436,1168923
  u8 journalMode;32437,1169000
  u8 useJournal;32438,1169073
  u8 noReadlock;32439,1169145
  u8 noSync;32440,1169215
  u8 fullSync;32441,1169283
  u8 sync_flags;32442,1169364
  u8 tempFile;32443,1169432
  u8 readOnly;32444,1169498
  u8 memDb;32445,1169564
  u8 state;32458,1170207
  u8 dbModified;32459,1170282
  u8 needSync;32460,1170358
  u8 journalStarted;32461,1170438
  u8 changeCountDone;32462,1170510
  u8 setMaster;32463,1170588
  u8 doNotSync;32464,1170668
  u8 dbSizeValid;32465,1170748
  u8 subjInMemory;32466,1170811
  Pgno dbSize;32467,1170882
  Pgno dbOrigSize;32468,1170950
  Pgno dbFileSize;32469,1171024
  int errCode;32470,1171097
  int nRec;32471,1171164
  u32 cksumInit;32472,1171245
  u32 nSubRec;32473,1171324
  Bitvec *pInJournal;pInJournal32474,1171401
  sqlite3_file *fd;fd32475,1171480
  sqlite3_file *jfd;jfd32476,1171545
  sqlite3_file *sjfd;sjfd32477,1171614
  i64 journalOff;32478,1171682
  i64 journalHdr;32479,1171759
  PagerSavepoint *aSavepoint;aSavepoint32480,1171834
  int nSavepoint;32481,1171897
  char dbFileVers[dbFileVers32482,1171968
  u32 sectorSize;32483,1172043
  u16 nExtra;32485,1172116
  i16 nReserve;32486,1172195
  u32 vfsFlags;32487,1172274
  int pageSize;32488,1172340
  Pgno mxPgno;32489,1172402
  char *zFilename;zFilename32490,1172475
  char *zJournal;zJournal32491,1172537
  int (*xBusyHandler)xBusyHandler32492,1172598
  void *pBusyHandlerArg;pBusyHandlerArg32493,1172661
  int nHit,32495,1172750
  int nHit, nMiss;32495,1172750
  int nRead,32496,1172809
  int nRead, nWrite;32496,1172809
  void (*xReiniter)xReiniter32498,1172880
  void *(*xCodec)xCodec32500,1172979
  void (*xCodecSizeChng)xCodecSizeChng32501,1173055
  void (*xCodecFree)xCodecFree32502,1173130
  void *pCodec;pCodec32503,1173202
  char *pTmpSpace;pTmpSpace32505,1173281
  i64 journalSizeLimit;32506,1173359
  PCache *pPCache;pPCache32507,1173435
  sqlite3_backup *pBackup;pBackup32508,1173500
SQLITE_API int sqlite3_pager_readdb_count 32517,1173787
SQLITE_API int sqlite3_pager_writedb_count 32518,1173877
SQLITE_API int sqlite3_pager_writej_count 32519,1173968
# define PAGER_INCR(32520,1174059
# define PAGER_INCR(32522,1174093
static const unsigned char aJournalMagic[aJournalMagic32550,1175427
#define JOURNAL_PG_SZ(32558,1175624
#define JOURNAL_HDR_SZ(32564,1175815
# define MEMDB 32573,1176160
# define MEMDB 32575,1176183
#define PAGER_MAX_PGNO 32581,1176274
static int assert_pager_state(32589,1176387
static int subjRequiresPage(32610,1177084
static int pageInJournal(32626,1177456
static int read32bits(32637,1177805
#define put32bits(32649,1178101
static int write32bits(32655,1178290
#define isOpen(32673,1178730
static int osUnlock(32678,1178829
static int jrnlBufferSize(32703,1179716
static u32 pager_datahash(32735,1180641
static u32 pager_pagehash(32743,1180808
static void pager_set_pagehash(32746,1180932
#define CHECK_PAGE(32755,1181254
static void checkPage(32756,1181289
#define pager_datahash(32763,1181483
#define pager_pagehash(32764,1181514
#define CHECK_PAGE(32765,1181543
static int readMasterJournal(32793,1182809
static i64 journalHdrOffset(32846,1184601
static int zeroJournalHdr(32879,1185915
static int writeJournalHdr(32928,1187745
static int readJournalHdr(33045,1193019
static int writeMasterJournal(33165,1197874
static PgHdr *pager_lookup(pager_lookup33232,1200410
static void pager_reset(33248,1200942
static void releaseAllSavepoints(33261,1201341
static int addToSavepointBitvecs(33280,1201978
static void pager_unlock(33305,1202836
static int pager_error(33367,1205100
static void pagerUnlockAndRollback(33398,1206218
static int pager_end_transaction(33463,1209048
static u32 pager_cksum(33559,1212481
static int pager_playback_one_page(33607,1214628
static int pager_delmaster(33834,1225012
static int pager_truncate(33946,1229020
static void setSectorSize(33981,1230285
static int pager_playback(34057,1233695
static int pagerPlaybackSavepoint(34275,1242474
SQLITE_PRIVATE void sqlite3PagerSetCachesize(34374,1246178
SQLITE_PRIVATE void sqlite3PagerSetSafetyLevel(34405,1247629
SQLITE_API int sqlite3_opentemp_count 34419,1248157
static int pagerOpentemp(34437,1248672
SQLITE_PRIVATE void sqlite3PagerSetBusyhandler(34476,1250173
static void pagerReportSize(34490,1250640
# define pagerReportSize(34497,1250840
SQLITE_PRIVATE int sqlite3PagerSetPagesize(34530,1252233
SQLITE_PRIVATE void *sqlite3PagerTempSpace(sqlite3PagerTempSpace34568,1253562
SQLITE_PRIVATE int sqlite3PagerMaxPageCount(34579,1253933
static int saved_cnt;34598,1254520
void disable_simulated_io_errors(34599,1254542
void enable_simulated_io_errors(34603,1254657
# define disable_simulated_io_errors(34607,1254744
# define enable_simulated_io_errors(34608,1254783
SQLITE_PRIVATE int sqlite3PagerReadFileheader(34625,1255447
SQLITE_PRIVATE int sqlite3PagerPagecount(34654,1256563
static int pager_wait_on_lock(34716,1258527
static void assertTruncateConstraintCb(34777,1261016
static void assertTruncateConstraint(34781,1261176
# define assertTruncateConstraint(34785,1261311
SQLITE_PRIVATE void sqlite3PagerTruncateImage(34794,1261638
SQLITE_PRIVATE int sqlite3PagerClose(34816,1262493
SQLITE_PRIVATE Pgno sqlite3PagerPagenumber(34857,1263761
SQLITE_PRIVATE void sqlite3PagerRef(34865,1263901
static int syncJournal(34907,1265573
static int pager_write_pagelist(35031,1271179
static int subjournalPage(35131,1275187
static int pagerStress(35176,1276887
SQLITE_PRIVATE int sqlite3PagerOpen(35293,1281357
static int hasHotJournal(35577,1292831
static int readDbPage(35669,1296673
SQLITE_PRIVATE int sqlite3PagerSharedLock(35751,1300235
static void pagerUnlockIfUnused(35937,1307064
SQLITE_PRIVATE int sqlite3PagerAcquire(35995,1309817
SQLITE_PRIVATE DbPage *sqlite3PagerLookup(sqlite3PagerLookup36118,1313776
SQLITE_PRIVATE void sqlite3PagerUnref(36136,1314303
static int openSubJournal(36153,1314795
static int pager_open_journal(36187,1316167
SQLITE_PRIVATE int sqlite3PagerBegin(36285,1319738
static int pager_write(36346,1322187
SQLITE_PRIVATE int sqlite3PagerWrite(36501,1327889
SQLITE_PRIVATE int sqlite3PagerIswriteable(36595,1331006
SQLITE_PRIVATE void sqlite3PagerDontWrite(36614,1331696
static int pager_incr_changecounter(36642,1332815
# define DIRECT_MODE 36656,1333438
# define DIRECT_MODE 36660,1333530
SQLITE_PRIVATE int sqlite3PagerSync(36715,1335384
SQLITE_PRIVATE int sqlite3PagerCommitPhaseOne(36752,1336796
SQLITE_PRIVATE int sqlite3PagerCommitPhaseTwo(36923,1344027
SQLITE_PRIVATE int sqlite3PagerRollback(37004,1347641
SQLITE_PRIVATE u8 sqlite3PagerIsreadonly(37043,1348765
SQLITE_PRIVATE int sqlite3PagerRefcount(37050,1348907
SQLITE_PRIVATE int sqlite3PagerPageRefcount(37057,1349079
SQLITE_PRIVATE int *sqlite3PagerStats(sqlite3PagerStats37065,1349265
SQLITE_PRIVATE int sqlite3PagerIsMemdb(37085,1349814
SQLITE_PRIVATE int sqlite3PagerOpenSavepoint(37099,1350347
SQLITE_PRIVATE int sqlite3PagerSavepoint(37180,1353781
SQLITE_PRIVATE const char *sqlite3PagerFilename(sqlite3PagerFilename37230,1355612
SQLITE_PRIVATE const sqlite3_vfs *sqlite3PagerVfs(sqlite3PagerVfs37237,1355756
SQLITE_PRIVATE sqlite3_file *sqlite3PagerFile(sqlite3PagerFile37246,1355996
SQLITE_PRIVATE const char *sqlite3PagerJournalname(sqlite3PagerJournalname37253,1356137
SQLITE_PRIVATE int sqlite3PagerNosync(37261,1356353
static void sqlite3PagerSetCodec(37269,1356509
static void *sqlite3PagerGetCodec(sqlite3PagerGetCodec37283,1356933
SQLITE_PRIVATE int sqlite3PagerMovepage(37314,1358253
SQLITE_PRIVATE void *sqlite3PagerGetData(sqlite3PagerGetData37450,1363158
SQLITE_PRIVATE void *sqlite3PagerGetExtra(sqlite3PagerGetExtra37459,1363398
SQLITE_PRIVATE int sqlite3PagerLockingMode(37473,1363891
SQLITE_PRIVATE int sqlite3PagerJournalMode(37506,1365030
SQLITE_PRIVATE i64 sqlite3PagerJournalSizeLimit(37534,1365954
SQLITE_PRIVATE sqlite3_backup **sqlite3PagerBackupPtr(sqlite3PagerBackupPtr37547,1366371
#define MX_CELL_SIZE(37793,1377666
#define MX_CELL(37800,1377979
typedef struct MemPage MemPage;37803,1378050
typedef struct BtLock BtLock;37804,1378082
#  define SQLITE_FILE_HEADER 37819,1378770
#define PTF_INTKEY 37826,1378953
#define PTF_ZERODATA 37827,1378980
#define PTF_LEAFDATA 37828,1379007
#define PTF_LEAF 37829,1379034
struct MemPage 37844,1379669
  u8 isInit;37845,1379686
  u8 nOverflow;37846,1379762
  u8 intKey;37847,1379833
  u8 leaf;37848,1379889
  u8 hasData;37849,1379943
  u8 hdrOffset;37850,1380002
  u8 childPtrSize;37851,1380060
  u16 maxLocal;37852,1380117
  u16 minLocal;37853,1380192
  u16 cellOffset;37854,1380267
  u16 nFree;37855,1380333
  u16 nCell;37856,1380395
  u16 maskPage;37857,1380469
  struct _OvflCell 37858,1380519
    u8 *pCell;pCell37859,1380583
    u16 idx;37860,1380655
  } aOvfl[aOvfl37861,1380734
  BtShared *pBt;pBt37862,1380748
  u8 *aData;aData37863,1380823
  DbPage *pDbPage;pDbPage37864,1380891
  Pgno pgno;37865,1380938
#define EXTRA_SIZE 37873,1381181
struct BtLock 37882,1381553
  Btree *pBtree;pBtree37883,1381569
  Pgno iTable;37884,1381630
  u8 eLock;37885,1381679
  BtLock *pNext;pNext37886,1381733
#define READ_LOCK 37890,1381835
#define WRITE_LOCK 37891,1381859
struct Btree 37914,1382922
  sqlite3 *db;db37915,1382937
  BtShared *pBt;pBt37916,1383007
  u8 inTrans;37917,1383065
  u8 sharable;37918,1383130
  u8 locked;37919,1383198
  int wantToLock;37920,1383261
  int nBackup;37921,1383334
  Btree *pNext;pNext37922,1383408
  Btree *pPrev;pPrev37923,1383482
  BtLock lock;37925,1383572
#define TRANS_NONE 37936,1383904
#define TRANS_READ 37937,1383926
#define TRANS_WRITE 37938,1383948
struct BtShared 37975,1385450
  Pager *pPager;pPager37976,1385468
  sqlite3 *db;db37977,1385513
  BtCursor *pCursor;pCursor37978,1385590
  MemPage *pPage1;pPage137979,1385647
  u8 readOnly;37980,1385704
  u8 pageSizeFixed;37981,1385774
  u8 secureDelete;37982,1385851
  u8 autoVacuum;37984,1385945
  u8 incrVacuum;37985,1386006
  u16 pageSize;37987,1386074
  u16 usableSize;37988,1386136
  u16 maxLocal;37989,1386202
  u16 minLocal;37990,1386277
  u16 maxLeaf;37991,1386352
  u16 minLeaf;37992,1386424
  u8 inTransaction;37993,1386496
  int nTransaction;37994,1386544
  void *pSchema;pSchema37995,1386617
  void (*xFreeSchema)xFreeSchema37996,1386698
  sqlite3_mutex *mutex;mutex37997,1386767
  Bitvec *pHasContent;pHasContent37998,1386848
  int nRef;38000,1386960
  BtShared *pNext;pNext38001,1387029
  BtLock *pLock;pLock38002,1387103
  Btree *pWriter;pWriter38003,1387180
  u8 isExclusive;38004,1387254
  u8 isPending;38005,1387332
  u8 *pTmpSpace;pTmpSpace38007,1387404
typedef struct CellInfo CellInfo;38015,1387685
struct CellInfo 38016,1387719
  u8 *pCell;pCell38017,1387737
  i64 nKey;38018,1387797
  u32 nData;38019,1387873
  u32 nPayload;38020,1387920
  u16 nHeader;38021,1387967
  u16 nLocal;38022,1388031
  u16 iOverflow;38023,1388085
  u16 nSize;38024,1388161
#define BTCURSOR_MAX_DEPTH 38036,1388615
struct BtCursor 38052,1389154
  Btree *pBtree;pBtree38053,1389172
  BtShared *pBt;pBt38054,1389245
  BtCursor *pNext,pNext38055,1389314
  BtCursor *pNext, *pPrev;pPrev38055,1389314
  struct KeyInfo *pKeyInfo;pKeyInfo38056,1389383
  Pgno pgnoRoot;38057,1389456
  sqlite3_int64 cachedRowid;38058,1389517
  CellInfo info;38059,1389589
  u8 wrFlag;38060,1389662
  u8 atLast;38061,1389713
  u8 validNKey;38062,1389781
  u8 eState;38063,1389842
  void *pKey;pKey38064,1389920
  i64 nKey;38065,1389993
  int skipNext;38066,1390052
  u8 isIncrblobHandle;38068,1390161
  Pgno *aOverflow;aOverflow38069,1390237
  i16 iPage;38071,1390311
  MemPage *apPage[apPage38072,1390389
  u16 aiIdx[aiIdx38073,1390467
#define CURSOR_INVALID 38101,1391591
#define CURSOR_VALID 38102,1391626
#define CURSOR_REQUIRESEEK 38103,1391661
#define CURSOR_FAULT 38104,1391696
# define PENDING_BYTE_PAGE(38109,1391812
#define PTRMAP_PAGENO(38126,1392534
#define PTRMAP_PTROFFSET(38127,1392591
#define PTRMAP_ISPAGE(38128,1392654
#define PTRMAP_ROOTPAGE 38161,1394350
#define PTRMAP_FREEPAGE 38162,1394376
#define PTRMAP_OVERFLOW1 38163,1394402
#define PTRMAP_OVERFLOW2 38164,1394429
#define PTRMAP_BTREE 38165,1394456
#define btreeIntegrity(38170,1394614
#define ISAUTOVACUUM 38183,1395117
#define ISAUTOVACUUM 38185,1395162
typedef struct IntegrityCk IntegrityCk;38193,1395336
struct IntegrityCk 38194,1395376
  BtShared *pBt;pBt38195,1395397
  Pager *pPager;pPager38196,1395450
  Pgno nPage;38197,1395530
  int *anRef;anRef38198,1395588
  int mxErr;38199,1395654
  int nErr;38200,1395728
  int mallocFailed;38201,1395799
  StrAccum errMsg;38202,1395864
#define get2byte(38208,1396004
#define put2byte(38209,1396047
#define get4byte 38210,1396111
#define put4byte 38211,1396144
static void lockBtreeMutex(38223,1396566
static void unlockBtreeMutex(38237,1396911
SQLITE_PRIVATE void sqlite3BtreeEnter(38263,1397892
SQLITE_PRIVATE void sqlite3BtreeLeave(38325,1399927
SQLITE_PRIVATE int sqlite3BtreeHoldsMutex(38342,1400309
SQLITE_PRIVATE void sqlite3BtreeEnterCursor(38359,1400913
SQLITE_PRIVATE void sqlite3BtreeLeaveCursor(38362,1401011
SQLITE_PRIVATE void sqlite3BtreeEnterAll(38382,1401705
SQLITE_PRIVATE void sqlite3BtreeLeaveAll(38410,1402581
SQLITE_PRIVATE int sqlite3BtreeHoldsAllMutexes(38433,1403108
SQLITE_PRIVATE void sqlite3BtreeMutexArrayInsert(38463,1403942
SQLITE_PRIVATE void sqlite3BtreeMutexArrayEnter(38496,1404854
SQLITE_PRIVATE void sqlite3BtreeMutexArrayLeave(38521,1405538
SQLITE_PRIVATE void sqlite3BtreeEnter(38541,1406050
SQLITE_PRIVATE void sqlite3BtreeEnterAll(38544,1406123
static const char zMagicHeader[zMagicHeader38578,1407210
int sqlite3BtreeTrace=38585,1407355
# define TRACE(38586,1407410
# define TRACE(38588,1407483
SQLITE_PRIVATE BtShared *SQLITE_WSD sqlite3SharedCacheList 38603,1407866
static BtShared *SQLITE_WSD sqlite3SharedCacheList 38605,1407936
SQLITE_API int sqlite3_enable_shared_cache(38617,1408319
  #define querySharedCacheTableLock(38635,1408954
  #define setSharedCacheTableLock(38636,1409007
  #define clearAllSharedCacheTableLocks(38637,1409058
  #define downgradeAllSharedCacheTableLocks(38638,1409101
  #define hasSharedCacheTableLock(38639,1409148
  #define hasReadConflicts(38640,1409193
static int hasSharedCacheTableLock(38668,1410251
static int hasReadConflicts(38749,1413087
static int querySharedCacheTableLock(38769,1413653
static int setSharedCacheTableLock(38841,1416270
static void clearAllSharedCacheTableLocks(38905,1418419
static void downgradeAllSharedCacheTableLocks(38950,1419785
static int cursorHoldsMutex(38974,1420393
static void invalidateOverflowCache(38984,1420593
static void invalidateAllOverflowCache(38994,1420851
static void invalidateIncrblobCursors(39015,1421624
  #define invalidateOverflowCache(39032,1422157
  #define invalidateAllOverflowCache(39033,1422194
  #define invalidateIncrblobCursors(39034,1422234
static int btreeSetHasContent(39072,1424092
static int btreeGetHasContent(39097,1424936
static void btreeClearHasContent(39106,1425232
static int saveCursorPosition(39118,1425612
static int saveAllCursors(39168,1427027
SQLITE_PRIVATE void sqlite3BtreeClearCursor(39187,1427505
static int btreeMoveto(39199,1427882
static int btreeRestoreCursorPosition(39232,1429132
#define restoreCursorPosition(39249,1429616
SQLITE_PRIVATE int sqlite3BtreeCursorHasMoved(39262,1430081
static Pgno ptrmapPageno(39284,1430584
static void ptrmapPut(39307,1431259
static int ptrmapGet(39358,1432815
  #define ptrmapPut(39385,1433631
  #define ptrmapGet(39386,1433663
  #define ptrmapPutOvflPtr(39387,1433702
#define findCell(39397,1433988
static u8 *findOverflowCell(findOverflowCell39404,1434200
static void btreeParseCellPtr(39431,1434997
#define parseCell(39502,1437518
static void btreeParseCell(39504,1437625
static u16 cellSizePtr(39518,1438118
static u16 cellSize(39574,1439717
static void ptrmapPutOvflPtr(39585,1440012
static int defragmentPage(39605,1440634
static int allocateSpace(39695,1444005
static int freeSpace(39794,1447534
static int decodeFlags(39887,1450693
static int btreeInitPage(39921,1451807
static void zeroPage(40031,1455807
static MemPage *btreePageFromDbPage(btreePageFromDbPage40066,1456885
static int btreeGetPage(40087,1457694
static MemPage *btreePageLookup(btreePageLookup40108,1458380
static Pgno pagerPagecount(40122,1458758
static int getAndInitPage(40139,1459275
static void releasePage(40171,1460200
static void pageReinit(40190,1460874
static int btreeInvokeBusyHandler(40212,1461671
SQLITE_PRIVATE int sqlite3BtreeOpen(40234,1462551
static int removeFromSharingList(40475,1470714
static void allocateTempSpace(40513,1471646
static void freeTempSpace(40522,1471825
SQLITE_PRIVATE int sqlite3BtreeClose(40530,1471988
SQLITE_PRIVATE int sqlite3BtreeSetCacheSize(40600,1474188
SQLITE_PRIVATE int sqlite3BtreeSetSafetyLevel(40618,1474927
SQLITE_PRIVATE int sqlite3BtreeSyncDisabled(40632,1475356
SQLITE_PRIVATE int sqlite3BtreeSetPageSize(40664,1476529
SQLITE_PRIVATE int sqlite3BtreeGetPageSize(40694,1477419
SQLITE_PRIVATE int sqlite3BtreeGetReserve(40703,1477681
SQLITE_PRIVATE int sqlite3BtreeMaxPageCount(40716,1478045
SQLITE_PRIVATE int sqlite3BtreeSecureDelete(40729,1478415
SQLITE_PRIVATE int sqlite3BtreeSetAutoVacuum(40748,1479034
SQLITE_PRIVATE int sqlite3BtreeGetAutoVacuum(40772,1479591
static int lockBtree(40798,1480278
static void unlockBtreeIfUnused(40908,1483958
static int newDatabase(40925,1484497
SQLITE_PRIVATE int sqlite3BtreeBeginTrans(40998,1487274
static int setChildPtrmaps(41123,1490990
static int modifyPagePointer(41173,1492509
static int relocatePage(41232,1494158
static int incrVacuumStep(41326,1497590
SQLITE_PRIVATE int sqlite3BtreeIncrVacuum(41434,1500779
static int autoVacuumCommit(41459,1501523
# define setChildPtrmaps(41516,1503532
SQLITE_PRIVATE int sqlite3BtreeCommitPhaseOne(41545,1504940
static void btreeEndTransaction(41569,1505548
SQLITE_PRIVATE int sqlite3BtreeCommitPhaseTwo(41617,1507422
SQLITE_PRIVATE int sqlite3BtreeCommit(41646,1508094
static int countWriteCursors(41668,1508759
SQLITE_PRIVATE void sqlite3BtreeTripAllCursors(41695,1509594
SQLITE_PRIVATE int sqlite3BtreeRollback(41720,1510329
SQLITE_PRIVATE int sqlite3BtreeBeginStmt(41783,1512670
SQLITE_PRIVATE int sqlite3BtreeSavepoint(41818,1514032
static int btreeCursor(41866,1515926
SQLITE_PRIVATE int sqlite3BtreeCursor(41914,1517639
SQLITE_PRIVATE int sqlite3BtreeCursorSize(41936,1518465
SQLITE_PRIVATE void sqlite3BtreeCursorZero(41948,1518897
SQLITE_PRIVATE void sqlite3BtreeSetCachedRowid(41964,1519587
SQLITE_PRIVATE sqlite3_int64 sqlite3BtreeGetCachedRowid(41978,1520075
SQLITE_PRIVATE int sqlite3BtreeCloseCursor(41986,1520287
  static void assertCellInfo(42028,1521651
  #define assertCellInfo(42036,1521918
  static void getCellInfo(42040,1522043
#define getCellInfo(42051,1522401
SQLITE_PRIVATE int sqlite3BtreeCursorIsValid(42067,1523278
SQLITE_PRIVATE int sqlite3BtreeKeySize(42084,1523848
SQLITE_PRIVATE int sqlite3BtreeDataSize(42108,1524665
static int getOverflowPage(42135,1525830
static int copyPayload(42203,1527828
static int accessPayload(42252,1529743
SQLITE_PRIVATE int sqlite3BtreeKey(42396,1534631
SQLITE_PRIVATE int sqlite3BtreeData(42413,1535301
static const unsigned char *fetchPayload(fetchPayload42452,1536788
SQLITE_PRIVATE const void *sqlite3BtreeKeyFetch(sqlite3BtreeKeyFetch42504,1538405
SQLITE_PRIVATE const void *sqlite3BtreeDataFetch(sqlite3BtreeDataFetch42513,1538707
static int moveToChild(42533,1539374
static void assertParentIndex(42567,1540340
#  define assertParentIndex(42576,1540625
static void moveToParent(42587,1540937
static int moveToRoot(42624,1542420
static int moveToLeftmost(42700,1544844
static int moveToRightmost(42725,1545688
SQLITE_PRIVATE int sqlite3BtreeFirst(42749,1546409
SQLITE_PRIVATE int sqlite3BtreeLast(42773,1547087
SQLITE_PRIVATE int sqlite3BtreeMovetoUnpacked(42837,1549265
SQLITE_PRIVATE int sqlite3BtreeEof(43021,1555472
SQLITE_PRIVATE int sqlite3BtreeNext(43035,1555992
SQLITE_PRIVATE int sqlite3BtreePrevious(43104,1557561
static int allocateBtreePage(43179,1559765
static int freePage2(43458,1568710
static void freePage(43580,1573328
static int clearCell(43589,1573529
static int fillInCell(43660,1576082
static void dropCell(43818,1581020
static void insertCell(43873,1582974
static void assemblePage(43960,1586285
#define NN 44008,1588256
#define NB 44009,1588331
static int balance_quick(44036,1589515
static int ptrmapCheckPages(44122,1592946
static void copyNodeContent(44175,1594697
static int balance_nonroot(44256,1598178
static int balance_deeper(44883,1621744
static int balance(44937,1623647
SQLITE_PRIVATE int sqlite3BtreeInsert(45072,1629267
SQLITE_PRIVATE int sqlite3BtreeDelete(45214,1634942
static int btreeCreateTable(45337,1639824
SQLITE_PRIVATE int sqlite3BtreeCreateTable(45459,1643476
static int clearDatabasePage(45471,1643771
SQLITE_PRIVATE int sqlite3BtreeClearTable(45529,1645560
static int btreeDropTable(45568,1647101
SQLITE_PRIVATE int sqlite3BtreeDropTable(45671,1650112
SQLITE_PRIVATE void sqlite3BtreeGetMeta(45693,1650891
SQLITE_PRIVATE int sqlite3BtreeUpdateMeta(45717,1651600
SQLITE_PRIVATE int sqlite3BtreeCount(45750,1652601
SQLITE_PRIVATE Pager *sqlite3BtreePager(sqlite3BtreePager45815,1654911
static void checkAppendMsg(45823,1655081
static int checkRef(45857,1655975
static void checkPtrmap(45876,1656545
static void checkList(45906,1657550
static int checkTreePage(45992,1660547
SQLITE_PRIVATE char *sqlite3BtreeIntegrityCheck(sqlite3BtreeIntegrityCheck46216,1667692
SQLITE_PRIVATE const char *sqlite3BtreeGetFilename(sqlite3BtreeGetFilename46327,1671043
SQLITE_PRIVATE const char *sqlite3BtreeGetJournalname(sqlite3BtreeGetJournalname46340,1671499
SQLITE_PRIVATE int sqlite3BtreeIsInTrans(46348,1671701
SQLITE_PRIVATE int sqlite3BtreeIsInReadTrans(46356,1671922
SQLITE_PRIVATE int sqlite3BtreeIsInBackup(46362,1672075
SQLITE_PRIVATE void *sqlite3BtreeSchema(sqlite3BtreeSchema46388,1673210
SQLITE_PRIVATE int sqlite3BtreeSchemaLocked(46404,1673695
SQLITE_PRIVATE int sqlite3BtreeLockTable(46421,1674172
SQLITE_PRIVATE int sqlite3BtreePutData(46451,1675178
SQLITE_PRIVATE void sqlite3BtreeCacheOverflow(46494,1676706
# define MIN(46523,1677682
struct sqlite3_backup 46529,1677782
  sqlite3* pDestDb;46530,1677806
  Btree *pDest;pDest46531,1677867
  u32 iDestSchema;46532,1677924
  int bDestLocked;46533,1677995
  Pgno iNext;46535,1678076
  sqlite3* pSrcDb;46536,1678153
  Btree *pSrc;pSrc46537,1678209
  int rc;46539,1678262
  Pgno nRemaining;46544,1678466
  Pgno nPagecount;46545,1678528
  int isAttached;46547,1678592
  sqlite3_backup *pNext;pNext46548,1678673
static Btree *findBtree(findBtree46590,1680576
SQLITE_API sqlite3_backup *sqlite3_backup_init(sqlite3_backup_init46630,1681675
static int isFatalError(46695,1683889
static int backupOnePage(46704,1684162
static int backupTruncateFile(46765,1686394
static void attachBackupObject(46778,1686760
SQLITE_API int sqlite3_backup_step(46790,1687059
SQLITE_API int sqlite3_backup_finish(46976,1693925
SQLITE_API int sqlite3_backup_remaining(47025,1695302
SQLITE_API int sqlite3_backup_pagecount(47033,1695511
SQLITE_PRIVATE void sqlite3BackupUpdate(47049,1696114
SQLITE_PRIVATE void sqlite3BackupRestart(47078,1697278
SQLITE_PRIVATE int sqlite3BtreeCopyFile(47095,1697849
#define expandBlob(47156,1699885
SQLITE_PRIVATE int sqlite3VdbeChangeEncoding(47171,1700514
SQLITE_PRIVATE int sqlite3VdbeMemGrow(47208,1701786
SQLITE_PRIVATE int sqlite3VdbeMemMakeWriteable(47253,1703156
SQLITE_PRIVATE int sqlite3VdbeMemExpandBlob(47276,1703774
SQLITE_PRIVATE int sqlite3VdbeMemNulTerminate(47304,1704473
SQLITE_PRIVATE int sqlite3VdbeMemStringify(47331,1705484
SQLITE_PRIVATE int sqlite3VdbeMemFinalize(47375,1706825
SQLITE_PRIVATE void sqlite3VdbeMemReleaseExternal(47400,1707642
SQLITE_PRIVATE void sqlite3VdbeMemRelease(47428,1708552
static i64 doubleToInt64(47448,1709242
SQLITE_PRIVATE i64 sqlite3VdbeIntValue(47488,1710730
SQLITE_PRIVATE double sqlite3VdbeRealValue(47518,1711586
SQLITE_PRIVATE void sqlite3VdbeIntegerAffinity(47547,1712486
SQLITE_PRIVATE int sqlite3VdbeMemIntegerify(47576,1713550
SQLITE_PRIVATE int sqlite3VdbeMemRealify(47590,1713946
SQLITE_PRIVATE int sqlite3VdbeMemNumerify(47607,1714509
SQLITE_PRIVATE void sqlite3VdbeMemSetNull(47629,1715195
SQLITE_PRIVATE void sqlite3VdbeMemSetZeroBlob(47644,1715577
SQLITE_PRIVATE void sqlite3VdbeMemSetInt64(47666,1716059
SQLITE_PRIVATE void sqlite3VdbeMemSetDouble(47678,1716367
SQLITE_PRIVATE void sqlite3VdbeMemSetRowSet(47694,1716723
SQLITE_PRIVATE int sqlite3VdbeMemTooBig(47715,1717371
#define MEMCELLSIZE 47730,1717694
SQLITE_PRIVATE void sqlite3VdbeMemShallowCopy(47738,1718007
SQLITE_PRIVATE int sqlite3VdbeMemCopy(47754,1718515
SQLITE_PRIVATE void sqlite3VdbeMemMove(47778,1719128
SQLITE_PRIVATE int sqlite3VdbeMemSetStr(47805,1720200
SQLITE_PRIVATE int sqlite3MemCompare(47895,1722856
SQLITE_PRIVATE int sqlite3VdbeMemFromBtree(48017,1726635
SQLITE_PRIVATE const void *sqlite3ValueText(sqlite3ValueText48074,1728664
SQLITE_PRIVATE sqlite3_value *sqlite3ValueNew(sqlite3ValueNew48113,1729830
SQLITE_PRIVATE int sqlite3ValueFromExpr(48133,1730540
SQLITE_PRIVATE void sqlite3ValueSetStr(48211,1732848
SQLITE_PRIVATE void sqlite3ValueFree(48224,1733241
SQLITE_PRIVATE int sqlite3ValueBytes(48234,1733497
SQLITE_PRIVATE int sqlite3VdbeAddopTrace 48273,1734823
SQLITE_PRIVATE Vdbe *sqlite3VdbeCreate(sqlite3VdbeCreate48280,1734925
SQLITE_PRIVATE void sqlite3VdbeSetSql(48298,1735282
SQLITE_API const char *sqlite3_sql(sqlite3_sql48312,1735664
SQLITE_PRIVATE void sqlite3VdbeSwap(48320,1735852
SQLITE_PRIVATE void sqlite3VdbeTrace(48342,1736264
static int growOpArray(48356,1736707
SQLITE_PRIVATE int sqlite3VdbeAddOp3(48383,1737463
SQLITE_PRIVATE int sqlite3VdbeAddOp0(48415,1738099
SQLITE_PRIVATE int sqlite3VdbeAddOp1(48418,1738200
SQLITE_PRIVATE int sqlite3VdbeAddOp2(48421,1738310
SQLITE_PRIVATE int sqlite3VdbeAddOp4(48429,1738495
SQLITE_PRIVATE int sqlite3VdbeAddOp4Int(48446,1739028
SQLITE_PRIVATE int sqlite3VdbeMakeLabel(48473,1740123
SQLITE_PRIVATE void sqlite3VdbeResolveLabel(48494,1740750
SQLITE_PRIVATE void sqlite3VdbeRunOnlyOnce(48506,1741013
typedef struct VdbeOpIter VdbeOpIter;48528,1741642
struct VdbeOpIter 48529,1741680
  Vdbe *v;v48530,1741700
  SubProgram **apSub;apSub48531,1741774
  int nSub;48532,1741830
  int iAddr;48533,1741892
  int iSub;48534,1741965
static Op *opIterNext(opIterNext48536,1742048
SQLITE_PRIVATE int sqlite3VdbeAssertMayAbort(48600,1743775
static void resolveP2Values(48644,1745355
SQLITE_PRIVATE int sqlite3VdbeCurrentAddr(48684,1746426
SQLITE_PRIVATE VdbeOp *sqlite3VdbeTakeOpArray(sqlite3VdbeTakeOpArray48700,1747043
SQLITE_PRIVATE int sqlite3VdbeAddOpList(48717,1747491
SQLITE_PRIVATE void sqlite3VdbeChangeP1(48759,1748628
SQLITE_PRIVATE void sqlite3VdbeChangeP2(48771,1748921
SQLITE_PRIVATE void sqlite3VdbeChangeP3(48782,1749156
SQLITE_PRIVATE void sqlite3VdbeChangeP5(48794,1749405
SQLITE_PRIVATE void sqlite3VdbeJumpHere(48806,1749683
static void freeEphemeralFunction(48815,1749908
static void freeP4(48824,1750110
static void vdbeFreeOpArray(48869,1751221
SQLITE_PRIVATE void sqlite3VdbeProgramDelete(48895,1752113
SQLITE_PRIVATE void sqlite3VdbeChangeToNoop(48915,1752506
SQLITE_PRIVATE void sqlite3VdbeChangeP4(48953,1754032
SQLITE_PRIVATE void sqlite3VdbeComment(49027,1756194
SQLITE_PRIVATE void sqlite3VdbeNoopComment(49040,1756602
SQLITE_PRIVATE VdbeOp *sqlite3VdbeGetOp(sqlite3VdbeGetOp49074,1758082
static char *displayP4(displayP449097,1758703
SQLITE_PRIVATE void sqlite3VdbeUsesBtree(49199,1761383
SQLITE_PRIVATE void sqlite3VdbePrintOp(49215,1761829
static void releaseMemArray(49236,1762343
SQLITE_PRIVATE void sqlite3VdbeFrameDelete(49273,1763708
SQLITE_PRIVATE int sqlite3VdbeList(49300,1764644
SQLITE_PRIVATE void sqlite3VdbePrintSql(49488,1770733
SQLITE_PRIVATE void sqlite3VdbeIOTraceSql(49505,1771140
static void *allocSpace(allocSpace49552,1772706
SQLITE_PRIVATE void sqlite3VdbeMakeReady(49588,1774145
SQLITE_PRIVATE void sqlite3VdbeFreeCursor(49712,1778424
SQLITE_PRIVATE int sqlite3VdbeFrameRestore(49739,1779193
static void closeAllCursors(49760,1779800
static void Cleanup(49791,1780508
SQLITE_PRIVATE void sqlite3VdbeSetNumCols(49813,1781219
SQLITE_PRIVATE int sqlite3VdbeSetColName(49841,1782129
static int vdbeCommit(49869,1783211
static void checkActiveVdbeCnt(50095,1790772
#define checkActiveVdbeCnt(50111,1791100
static void invalidateCursorsOnModifiedBtrees(50130,1791846
SQLITE_PRIVATE int sqlite3VdbeCloseStatement(50150,1792504
SQLITE_PRIVATE void sqlite3VdbeMutexArrayEnter(50213,1794864
SQLITE_PRIVATE int sqlite3VdbeCheckFk(50233,1795546
SQLITE_PRIVATE int sqlite3VdbeHalt(50258,1796498
SQLITE_PRIVATE void sqlite3VdbeResetStepResult(50445,1802795
SQLITE_PRIVATE int sqlite3VdbeReset(50460,1803262
SQLITE_PRIVATE int sqlite3VdbeFinalize(50536,1805516
SQLITE_PRIVATE void sqlite3VdbeDeleteAuxData(50552,1806003
SQLITE_PRIVATE void sqlite3VdbeDelete(50568,1806368
SQLITE_PRIVATE int sqlite3VdbeCursorMoveto(50607,1807577
SQLITE_PRIVATE u32 sqlite3VdbeSerialType(50684,1810273
#   define MAX_6BYTE 50693,1810504
SQLITE_PRIVATE u32 sqlite3VdbeSerialTypeLen(50722,1811172
static u64 floatSwap(50766,1813121
    u64 r;50768,1813161
    u32 i[i50769,1813172
# define swapMixedEndianFloat(50779,1813278
# define swapMixedEndianFloat(50781,1813335
SQLITE_PRIVATE u32 sqlite3VdbeSerialPut(50802,1814245
SQLITE_PRIVATE u32 sqlite3VdbeSerialGet(50852,1815516
SQLITE_PRIVATE UnpackedRecord *sqlite3VdbeRecordUnpack(sqlite3VdbeRecordUnpack50959,1818871
SQLITE_PRIVATE void sqlite3VdbeDeleteUnpackedRecord(51020,1820911
SQLITE_PRIVATE int sqlite3VdbeRecordCompare(51065,1822879
SQLITE_PRIVATE int sqlite3VdbeIdxRowid(51174,1826858
SQLITE_PRIVATE int sqlite3VdbeIdxKeyCompare(51254,1829709
SQLITE_PRIVATE void sqlite3VdbeSetChanges(51288,1830871
SQLITE_PRIVATE void sqlite3VdbeCountChanges(51298,1831137
SQLITE_PRIVATE void sqlite3ExpirePreparedStatements(51312,1831635
SQLITE_PRIVATE sqlite3 *sqlite3VdbeDb(sqlite3VdbeDb51322,1831831
SQLITE_PRIVATE sqlite3_value *sqlite3VdbeGetValue(sqlite3VdbeGetValue51334,1832257
SQLITE_PRIVATE void sqlite3VdbeSetVarmask(51356,1832889
SQLITE_API int sqlite3_expired(51392,1834101
static int vdbeSafety(51403,1834399
static int vdbeSafetyNotNull(51411,1834572
SQLITE_API int sqlite3_finalize(51429,1835114
SQLITE_API int sqlite3_reset(51459,1835900
SQLITE_API int sqlite3_clear_bindings(51478,1836362
SQLITE_API const void *sqlite3_value_blob(sqlite3_value_blob51502,1836973
SQLITE_API int sqlite3_value_bytes(51513,1837253
SQLITE_API int sqlite3_value_bytes16(51516,1837359
SQLITE_API double sqlite3_value_double(51519,1837474
SQLITE_API int sqlite3_value_int(51522,1837580
SQLITE_API sqlite_int64 sqlite3_value_int64(51525,1837684
SQLITE_API const unsigned char *sqlite3_value_text(sqlite3_value_text51528,1837794
SQLITE_API const void *sqlite3_value_text16(sqlite3_value_text1651532,1837964
SQLITE_API const void *sqlite3_value_text16be(sqlite3_value_text16be51535,1838085
SQLITE_API const void *sqlite3_value_text16le(sqlite3_value_text16le51538,1838204
SQLITE_API int sqlite3_value_type(51542,1838354
static void setResultStrOrError(51554,1838806
SQLITE_API void sqlite3_result_blob(51565,1839228
SQLITE_API void sqlite3_result_double(51575,1839460
SQLITE_API void sqlite3_result_error(51579,1839631
SQLITE_API void sqlite3_result_error16(51585,1839896
SQLITE_API void sqlite3_result_int(51591,1840151
SQLITE_API void sqlite3_result_int64(51595,1840320
SQLITE_API void sqlite3_result_null(51599,1840486
SQLITE_API void sqlite3_result_text(51603,1840634
SQLITE_API void sqlite3_result_text16(51613,1840883
SQLITE_API void sqlite3_result_text16be(51622,1841116
SQLITE_API void sqlite3_result_text16le(51631,1841347
SQLITE_API void sqlite3_result_value(51641,1841609
SQLITE_API void sqlite3_result_zeroblob(51645,1841786
SQLITE_API void sqlite3_result_error_code(51649,1841952
SQLITE_API void sqlite3_result_error_toobig(51658,1842253
SQLITE_API void sqlite3_result_error_nomem(51666,1842553
static int sqlite3Step(51682,1843155
SQLITE_API int sqlite3_step(51782,1846109
SQLITE_API void *sqlite3_user_data(sqlite3_user_data51828,1847761
SQLITE_API sqlite3 *sqlite3_context_db_handle(sqlite3_context_db_handle51837,1847972
SQLITE_PRIVATE void sqlite3InvalidFunction(51850,1848478
SQLITE_API void *sqlite3_aggregate_context(sqlite3_aggregate_context51869,1849179
SQLITE_API void *sqlite3_get_auxdata(sqlite3_get_auxdata51896,1849882
SQLITE_API void sqlite3_set_auxdata(51912,1850390
SQLITE_API int sqlite3_aggregate_count(51961,1851717
SQLITE_API int sqlite3_column_count(51970,1851946
SQLITE_API int sqlite3_data_count(51979,1852187
static Mem *columnMem(columnMem51992,1852572
static void columnMallocFailure(52048,1854709
SQLITE_API const void *sqlite3_column_blob(sqlite3_column_blob52066,1855328
SQLITE_API int sqlite3_column_bytes(52076,1855672
SQLITE_API int sqlite3_column_bytes16(52081,1855838
SQLITE_API double sqlite3_column_double(52086,1856008
SQLITE_API int sqlite3_column_int(52091,1856182
SQLITE_API sqlite_int64 sqlite3_column_int64(52096,1856344
SQLITE_API const unsigned char *sqlite3_column_text(sqlite3_column_text52101,1856528
SQLITE_API sqlite3_value *sqlite3_column_value(sqlite3_column_value52106,1856726
SQLITE_API const void *sqlite3_column_text16(sqlite3_column_text1652116,1857025
SQLITE_API int sqlite3_column_type(52122,1857240
static const void *columnName(columnName52151,1858339
SQLITE_API const char *sqlite3_column_name(sqlite3_column_name52185,1859106
SQLITE_API const void *sqlite3_column_name16(sqlite3_column_name1652190,1859300
SQLITE_API const char *sqlite3_column_decltype(sqlite3_column_decltype52210,1859915
SQLITE_API const void *sqlite3_column_decltype16(sqlite3_column_decltype1652215,1860117
SQLITE_API const char *sqlite3_column_database_name(sqlite3_column_database_name52228,1860626
SQLITE_API const void *sqlite3_column_database_name16(sqlite3_column_database_name1652233,1860833
SQLITE_API const char *sqlite3_column_table_name(sqlite3_column_table_name52244,1861273
SQLITE_API const void *sqlite3_column_table_name16(sqlite3_column_table_name1652249,1861474
SQLITE_API const char *sqlite3_column_origin_name(sqlite3_column_origin_name52260,1861915
SQLITE_API const void *sqlite3_column_origin_name16(sqlite3_column_origin_name1652265,1862118
static int vdbeUnbind(52288,1862982
static int bindText(52326,1863994
SQLITE_API int sqlite3_bind_blob(52358,1864898
SQLITE_API int sqlite3_bind_double(52367,1865081
SQLITE_API int sqlite3_bind_int(52377,1865355
SQLITE_API int sqlite3_bind_int64(52380,1865474
SQLITE_API int sqlite3_bind_null(52390,1865752
SQLITE_API int sqlite3_bind_text(52399,1865956
SQLITE_API int sqlite3_bind_text16(52409,1866176
SQLITE_API int sqlite3_bind_value(52419,1866409
SQLITE_API int sqlite3_bind_zeroblob(52450,1867230
SQLITE_API int sqlite3_bind_parameter_count(52465,1867621
static void createVarMap(52475,1867883
SQLITE_API const char *sqlite3_bind_parameter_name(sqlite3_bind_parameter_name52502,1868679
SQLITE_PRIVATE int sqlite3VdbeParameterIndex(52516,1869036
SQLITE_API int sqlite3_bind_parameter_index(52532,1869372
SQLITE_PRIVATE int sqlite3TransferBindings(52539,1869617
SQLITE_API int sqlite3_transfer_bindings(52566,1870540
SQLITE_API sqlite3 *sqlite3_db_handle(sqlite3_db_handle52588,1871223
SQLITE_API sqlite3_stmt *sqlite3_next_stmt(sqlite3_next_stmt52598,1871565
SQLITE_API int sqlite3_stmt_status(52613,1871947
static int findNextHostParameter(52646,1873116
SQLITE_PRIVATE char *sqlite3VdbeExpandSql(sqlite3VdbeExpandSql52681,1874253
SQLITE_API int sqlite3_search_count 52819,1879691
SQLITE_API int sqlite3_interrupt_count 52831,1880092
SQLITE_API int sqlite3_sort_count 52842,1880482
SQLITE_API int sqlite3_max_blobsize 52853,1880889
static void updateMaxBlobsize(52854,1880930
SQLITE_API int sqlite3_found_count 52869,1881410
# define UPDATE_MAX_BLOBSIZE(52877,1881647
# define UPDATE_MAX_BLOBSIZE(52879,1881707
#define Stringify(52886,1881862
#define Deephemeralize(52901,1882496
#define ExpandBlob(52909,1882711
SQLITE_PRIVATE void sqlite3VdbeMemStoreType(52917,1883021
static VdbeCursor *allocateCursor(allocateCursor52939,1883511
static void applyNumericAffinity(53001,1885846
static void applyAffinity(53050,1887246
SQLITE_API int sqlite3_value_numeric_type(53082,1888450
SQLITE_PRIVATE void sqlite3ValueApplyAffinity(53093,1888739
SQLITE_PRIVATE void sqlite3VdbeMemPrettyPrint(53106,1889013
static void memTracePrint(53188,1891145
static void registerTrace(53208,1891727
#  define REGISTER_TRACE(53216,1891896
#  define REGISTER_TRACE(53218,1891972
#define _HWTIME_H_53246,1892800
  __inline__ sqlite_uint64 sqlite3Hwtime(53259,1893192
  __declspec(53267,1893400
  __inline__ sqlite_uint64 sqlite3Hwtime(53286,1893810
SQLITE_PRIVATE   sqlite_uint64 sqlite3Hwtime(53310,1894552
#define CHECK_FOR_INTERRUPT 53331,1895320
static int fileExists(53335,1895430
static int checkSavepointCount(53362,1896282
SQLITE_PRIVATE int sqlite3VdbeExec(53402,1897758
  union vdbeExecUnion 53435,1899360
    struct OP_Yield_stack_vars 53436,1899384
      int pcDest;53437,1899417
    } aa;53438,1899435
    struct OP_Variable_stack_vars 53439,1899445
      int p1;53440,1899481
      int p2;53441,1899532
      int n;53442,1899581
      Mem *pVar;pVar53443,1899640
    } ab;53444,1899693
    struct OP_Move_stack_vars 53445,1899703
      char *zMalloc;zMalloc53446,1899735
      int n;53447,1899802
      int p1;53448,1899864
      int p2;53449,1899915
    } ac;53450,1899964
    struct OP_ResultRow_stack_vars 53451,1899974
      Mem *pMem;pMem53452,1900011
      int i;53453,1900028
    } ad;53454,1900041
    struct OP_Concat_stack_vars 53455,1900051
      i64 nByte;53456,1900085
    } ae;53457,1900102
    struct OP_Remainder_stack_vars 53458,1900112
      int flags;53459,1900149
      i64 iA;53460,1900215
      i64 iB;53461,1900273
      double rA;53462,1900332
      double rB;53463,1900387
    } af;53464,1900443
    struct OP_Function_stack_vars 53465,1900453
      int i;53466,1900489
      Mem *pArg;pArg53467,1900502
      sqlite3_context ctx;53468,1900519
      sqlite3_value **apVal;apVal53469,1900546
      int n;53470,1900575
    } ag;53471,1900588
    struct OP_ShiftRight_stack_vars 53472,1900598
      i64 a;53473,1900636
      i64 b;53474,1900649
    } ah;53475,1900662
    struct OP_Ge_stack_vars 53476,1900672
      int res;53477,1900702
      char affinity;53478,1900780
      u16 flags1;53479,1900843
      u16 flags3;53480,1900912
    } ai;53481,1900981
    struct OP_Compare_stack_vars 53482,1900991
      int n;53483,1901026
      int i;53484,1901039
      int p1;53485,1901052
      int p2;53486,1901066
      const KeyInfo *pKeyInfo;pKeyInfo53487,1901080
      int idx;53488,1901111
      CollSeq *pColl;pColl53489,1901126
      int bRev;53490,1901196
    } aj;53491,1901258
    struct OP_Or_stack_vars 53492,1901268
      int v1;53493,1901298
      int v2;53494,1901374
    } ak;53495,1901450
    struct OP_IfNot_stack_vars 53496,1901460
      int c;53497,1901493
    } al;53498,1901506
    struct OP_Column_stack_vars 53499,1901516
      u32 payloadSize;53500,1901550
      i64 payloadSize64;53501,1901611
      int p1;53502,1901672
      int p2;53503,1901726
      VdbeCursor *pC;pC53504,1901783
      char *zRec;zRec53505,1901830
      BtCursor *pCrsr;pCrsr53506,1901893
      u32 *aType;aType53507,1901941
      u32 *aOffset;aOffset53508,1902023
      int nField;53509,1902108
      int len;53510,1902170
      int i;53511,1902250
      char *zData;zData53512,1902294
      Mem *pDest;pDest53513,1902358
      Mem sMem;53514,1902424
      u8 *zIdx;zIdx53515,1902492
      u8 *zEndHdr;zEndHdr53516,1902541
      u32 offset;53517,1902611
      u32 szField;53518,1902663
      int szHdr;53519,1902736
      int avail;53520,1902816
      Mem *pReg;pReg53521,1902881
    } am;53522,1902939
    struct OP_Affinity_stack_vars 53523,1902949
      const char *zAffinity;zAffinity53524,1902985
      char cAff;53525,1903049
    } an;53526,1903117
    struct OP_MakeRecord_stack_vars 53527,1903127
      u8 *zNewRecord;zNewRecord53528,1903165
      Mem *pRec;pRec53529,1903245
      u64 nData;53530,1903295
      int nHdr;53531,1903360
      i64 nByte;53532,1903427
      int nZero;53533,1903498
      int nVarint;53534,1903579
      u32 serial_type;53535,1903642
      Mem *pData0;pData053536,1903688
      Mem *pLast;pLast53537,1903766
      int nField;53538,1903826
      char *zAffinity;zAffinity53539,1903892
      int file_format;53540,1903962
      int i;53541,1904029
      int len;53542,1904091
    } ao;53543,1904144
    struct OP_Count_stack_vars 53544,1904154
      i64 nEntry;53545,1904187
      BtCursor *pCrsr;pCrsr53546,1904205
    } ap;53547,1904228
    struct OP_Savepoint_stack_vars 53548,1904238
      int p1;53549,1904275
      char *zName;zName53550,1904339
      int nName;53551,1904401
      Savepoint *pNew;pNew53552,1904418
      Savepoint *pSavepoint;pSavepoint53553,1904441
      Savepoint *pTmp;pTmp53554,1904470
      int iSavepoint;53555,1904493
      int ii;53556,1904515
    } aq;53557,1904529
    struct OP_AutoCommit_stack_vars 53558,1904539
      int desiredAutoCommit;53559,1904577
      int iRollback;53560,1904606
      int turnOnAC;53561,1904627
    } ar;53562,1904647
    struct OP_Transaction_stack_vars 53563,1904657
      Btree *pBt;pBt53564,1904696
    } as;53565,1904714
    struct OP_ReadCookie_stack_vars 53566,1904724
      int iMeta;53567,1904762
      int iDb;53568,1904779
      int iCookie;53569,1904794
    } at;53570,1904813
    struct OP_SetCookie_stack_vars 53571,1904823
      Db *pDb;pDb53572,1904860
    } au;53573,1904875
    struct OP_VerifyCookie_stack_vars 53574,1904885
      int iMeta;53575,1904925
      Btree *pBt;pBt53576,1904942
    } av;53577,1904960
    struct OP_OpenWrite_stack_vars 53578,1904970
      int nField;53579,1905007
      KeyInfo *pKeyInfo;pKeyInfo53580,1905025
      int p2;53581,1905050
      int iDb;53582,1905064
      int wrFlag;53583,1905079
      Btree *pX;pX53584,1905097
      VdbeCursor *pCur;pCur53585,1905114
      Db *pDb;pDb53586,1905138
    } aw;53587,1905153
    struct OP_OpenEphemeral_stack_vars 53588,1905163
      VdbeCursor *pCx;pCx53589,1905204
    } ax;53590,1905227
    struct OP_OpenPseudo_stack_vars 53591,1905237
      VdbeCursor *pCx;pCx53592,1905275
    } ay;53593,1905298
    struct OP_SeekGt_stack_vars 53594,1905308
      int res;53595,1905342
      int oc;53596,1905357
      VdbeCursor *pC;pC53597,1905371
      UnpackedRecord r;53598,1905393
      int nField;53599,1905417
      i64 iKey;53600,1905435
    } az;53601,1905490
    struct OP_Seek_stack_vars 53602,1905500
      VdbeCursor *pC;pC53603,1905532
    } ba;53604,1905554
    struct OP_Found_stack_vars 53605,1905564
      int alreadyExists;53606,1905597
      VdbeCursor *pC;pC53607,1905622
      int res;53608,1905644
      UnpackedRecord *pIdxKey;pIdxKey53609,1905659
      UnpackedRecord r;53610,1905690
      char aTempRec[aTempRec53611,1905714
    } bb;53612,1905787
    struct OP_IsUnique_stack_vars 53613,1905797
      u16 ii;53614,1905833
      VdbeCursor *pCx;pCx53615,1905847
      BtCursor *pCrsr;pCrsr53616,1905870
      u16 nField;53617,1905893
      Mem *aMx;aMx53618,1905911
      UnpackedRecord r;53619,1905927
      i64 R;53620,1905998
    } bc;53621,1906073
    struct OP_NotExists_stack_vars 53622,1906083
      VdbeCursor *pC;pC53623,1906120
      BtCursor *pCrsr;pCrsr53624,1906142
      int res;53625,1906165
      u64 iKey;53626,1906180
    } bd;53627,1906196
    struct OP_NewRowid_stack_vars 53628,1906206
      i64 v;53629,1906242
      VdbeCursor *pC;pC53630,1906291
      int res;53631,1906363
      int cnt;53632,1906430
      Mem *pMem;pMem53633,1906505
      VdbeFrame *pFrame;pFrame53634,1906589
    } be;53635,1906643
    struct OP_InsertInt_stack_vars 53636,1906653
      Mem *pData;pData53637,1906690
      Mem *pKey;pKey53638,1906772
      i64 iKey;53639,1906839
      VdbeCursor *pC;pC53640,1906924
      int nZero;53641,1906999
      int seekResult;53642,1907060
      const char *zDb;zDb53643,1907141
      const char *zTbl;zTbl53644,1907211
      int op;53645,1907278
    } bf;53646,1907363
    struct OP_Delete_stack_vars 53647,1907373
      i64 iKey;53648,1907407
      VdbeCursor *pC;pC53649,1907423
    } bg;53650,1907445
    struct OP_RowData_stack_vars 53651,1907455
      VdbeCursor *pC;pC53652,1907490
      BtCursor *pCrsr;pCrsr53653,1907512
      u32 n;53654,1907535
      i64 n64;53655,1907548
    } bh;53656,1907563
    struct OP_Rowid_stack_vars 53657,1907573
      VdbeCursor *pC;pC53658,1907606
      i64 v;53659,1907628
      sqlite3_vtab *pVtab;pVtab53660,1907641
      const sqlite3_module *pModule;pModule53661,1907668
    } bi;53662,1907705
    struct OP_NullRow_stack_vars 53663,1907715
      VdbeCursor *pC;pC53664,1907750
    } bj;53665,1907772
    struct OP_Last_stack_vars 53666,1907782
      VdbeCursor *pC;pC53667,1907814
      BtCursor *pCrsr;pCrsr53668,1907836
      int res;53669,1907859
    } bk;53670,1907874
    struct OP_Rewind_stack_vars 53671,1907884
      VdbeCursor *pC;pC53672,1907918
      BtCursor *pCrsr;pCrsr53673,1907940
      int res;53674,1907963
    } bl;53675,1907978
    struct OP_Next_stack_vars 53676,1907988
      VdbeCursor *pC;pC53677,1908020
      BtCursor *pCrsr;pCrsr53678,1908042
      int res;53679,1908065
    } bm;53680,1908080
    struct OP_IdxInsert_stack_vars 53681,1908090
      VdbeCursor *pC;pC53682,1908127
      BtCursor *pCrsr;pCrsr53683,1908149
      int nKey;53684,1908172
      const char *zKey;zKey53685,1908188
    } bn;53686,1908212
    struct OP_IdxDelete_stack_vars 53687,1908222
      VdbeCursor *pC;pC53688,1908259
      BtCursor *pCrsr;pCrsr53689,1908281
      int res;53690,1908304
      UnpackedRecord r;53691,1908319
    } bo;53692,1908343
    struct OP_IdxRowid_stack_vars 53693,1908353
      BtCursor *pCrsr;pCrsr53694,1908389
      VdbeCursor *pC;pC53695,1908412
      i64 rowid;53696,1908434
    } bp;53697,1908451
    struct OP_IdxGE_stack_vars 53698,1908461
      VdbeCursor *pC;pC53699,1908494
      int res;53700,1908516
      UnpackedRecord r;53701,1908531
    } bq;53702,1908555
    struct OP_Destroy_stack_vars 53703,1908565
      int iMoved;53704,1908600
      int iCnt;53705,1908618
      Vdbe *pVdbe;pVdbe53706,1908634
      int iDb;53707,1908653
    } br;53708,1908668
    struct OP_Clear_stack_vars 53709,1908678
      int nChange;53710,1908711
    } bs;53711,1908730
    struct OP_CreateTable_stack_vars 53712,1908740
      int pgno;53713,1908779
      int flags;53714,1908795
      Db *pDb;pDb53715,1908812
    } bt;53716,1908827
    struct OP_ParseSchema_stack_vars 53717,1908837
      int iDb;53718,1908876
      const char *zMaster;zMaster53719,1908891
      char *zSql;zSql53720,1908918
      InitData initData;53721,1908936
    } bu;53722,1908961
    struct OP_IntegrityCk_stack_vars 53723,1908971
      int nRoot;53724,1909010
      int *aRoot;aRoot53725,1909090
      int j;53726,1909169
      int nErr;53727,1909210
      char *z;z53728,1909264
      Mem *pnErr;pnErr53729,1909317
    } bv;53730,1909388
    struct OP_RowSetRead_stack_vars 53731,1909398
      i64 val;53732,1909436
    } bw;53733,1909451
    struct OP_RowSetTest_stack_vars 53734,1909461
      int iSet;53735,1909499
      int exists;53736,1909515
    } bx;53737,1909533
    struct OP_Program_stack_vars 53738,1909543
      int nMem;53739,1909578
      int nByte;53740,1909657
      Mem *pRt;pRt53741,1909741
      Mem *pMem;pMem53742,1909812
      Mem *pEnd;pEnd53743,1909885
      VdbeFrame *pFrame;pFrame53744,1909951
      SubProgram *pProgram;pProgram53745,1910016
      void *t;t53746,1910075
    } by;53747,1910137
    struct OP_Param_stack_vars 53748,1910147
      VdbeFrame *pFrame;pFrame53749,1910180
      Mem *pIn;pIn53750,1910205
    } bz;53751,1910221
    struct OP_MemMax_stack_vars 53752,1910231
      Mem *pIn1;pIn153753,1910265
      VdbeFrame *pFrame;pFrame53754,1910282
    } ca;53755,1910307
    struct OP_AggStep_stack_vars 53756,1910317
      int n;53757,1910352
      int i;53758,1910365
      Mem *pMem;pMem53759,1910378
      Mem *pRec;pRec53760,1910395
      sqlite3_context ctx;53761,1910412
      sqlite3_value **apVal;apVal53762,1910439
    } cb;53763,1910468
    struct OP_AggFinal_stack_vars 53764,1910478
      Mem *pMem;pMem53765,1910514
    } cc;53766,1910531
    struct OP_IncrVacuum_stack_vars 53767,1910541
      Btree *pBt;pBt53768,1910579
    } cd;53769,1910597
    struct OP_VBegin_stack_vars 53770,1910607
      VTable *pVTab;pVTab53771,1910641
    } ce;53772,1910662
    struct OP_VOpen_stack_vars 53773,1910672
      VdbeCursor *pCur;pCur53774,1910705
      sqlite3_vtab_cursor *pVtabCursor;pVtabCursor53775,1910729
      sqlite3_vtab *pVtab;pVtab53776,1910769
      sqlite3_module *pModule;pModule53777,1910796
    } cf;53778,1910827
    struct OP_VFilter_stack_vars 53779,1910837
      int nArg;53780,1910872
      int iQuery;53781,1910888
      const sqlite3_module *pModule;pModule53782,1910906
      Mem *pQuery;pQuery53783,1910943
      Mem *pArgc;pArgc53784,1910962
      sqlite3_vtab_cursor *pVtabCursor;pVtabCursor53785,1910980
      sqlite3_vtab *pVtab;pVtab53786,1911020
      VdbeCursor *pCur;pCur53787,1911047
      int res;53788,1911071
      int i;53789,1911086
      Mem **apArg;apArg53790,1911099
    } cg;53791,1911118
    struct OP_VColumn_stack_vars 53792,1911128
      sqlite3_vtab *pVtab;pVtab53793,1911163
      const sqlite3_module *pModule;pModule53794,1911190
      Mem *pDest;pDest53795,1911227
      sqlite3_context sContext;53796,1911245
    } ch;53797,1911277
    struct OP_VNext_stack_vars 53798,1911287
      sqlite3_vtab *pVtab;pVtab53799,1911320
      const sqlite3_module *pModule;pModule53800,1911347
      int res;53801,1911384
      VdbeCursor *pCur;pCur53802,1911399
    } ci;53803,1911423
    struct OP_VRename_stack_vars 53804,1911433
      sqlite3_vtab *pVtab;pVtab53805,1911468
      Mem *pName;pName53806,1911495
    } cj;53807,1911513
    struct OP_VUpdate_stack_vars 53808,1911523
      sqlite3_vtab *pVtab;pVtab53809,1911558
      sqlite3_module *pModule;pModule53810,1911585
      int nArg;53811,1911616
      int i;53812,1911632
      sqlite_int64 rowid;53813,1911645
      Mem **apArg;apArg53814,1911671
      Mem *pX;pX53815,1911690
    } ck;53816,1911705
    struct OP_Pagecount_stack_vars 53817,1911715
      int p1;53818,1911752
      int nPage;53819,1911766
      Pager *pPager;pPager53820,1911783
    } cl;53821,1911804
    struct OP_Trace_stack_vars 53822,1911814
      char *zTrace;zTrace53823,1911847
    } cm;53824,1911867
case OP_Gosub:OP_Gosub54021,1918220
case OP_Return:OP_Return54035,1918539
case OP_HaltIfNull:OP_HaltIfNull54066,1919362
case OP_Copy:OP_Copy54326,1927181
case OP_SCopy:OP_SCopy54348,1927924
case OP_AddImm:OP_AddImm54784,1942492
case OP_MustBeInt:OP_MustBeInt54798,1942901
case OP_RealAffinity:OP_RealAffinity54824,1943621
case OP_ToText:OP_ToText54843,1944124
case OP_ToBlob:OP_ToBlob54865,1944856
case OP_ToNumeric:OP_ToNumeric54889,1945624
case OP_ToInt:OP_ToInt54907,1946225
case OP_ToReal:OP_ToReal54925,1946843
case OP_Not:OP_Not55237,1958142
case OP_BitNot:OP_BitNot55254,1958609
case OP_IsNull:OP_IsNull55303,1959920
case OP_NotNull:OP_NotNull55315,1960178
#   define MAX_ROWID 56990,2022741
#   define MAX_ROWID 56996,2023009
case OP_RowSetAdd:OP_RowSetAdd58090,2060232
case OP_IfPos:OP_IfPos58406,2071473
case OP_IfNeg:OP_IfNeg58422,2071868
case OP_IfZero:OP_IfZero58439,2072336
case OP_Vacuum:OP_Vacuum58543,2075415
case OP_TableLock:OP_TableLock58606,2077181
case OP_VCreate:OP_VCreate58654,2078637
      u64 elapsed 59070,2091488
  p->rc rc59107,2092627
  rc 59113,2092858
  sqlite3BtreeMutexArrayLeave(&p->aMutex)aMutex59120,2093090
  rc 59128,2093313
  goto vdbe_error_halt;59129,2093335
  db->mallocFailed mallocFailed59134,2093412
  rc 59136,2093490
  goto vdbe_error_halt;59137,2093511
  goto vdbe_error_halt;59148,2093839
  rc 59155,2094006
  p->rc rc59156,2094031
  goto vdbe_error_halt;59158,2094107
typedef struct Incrblob Incrblob;59184,2094834
struct Incrblob 59185,2094868
  int flags;59186,2094886
  int nByte;59187,2094964
  int iOffset;59188,2095024
  BtCursor *pCsr;pCsr59189,2095091
  sqlite3_stmt *pStmt;pStmt59190,2095151
  sqlite3 *db;db59191,2095213
SQLITE_API int sqlite3_blob_open(59197,2095302
SQLITE_API int sqlite3_blob_close(59449,2103851
static int blobReadWrite(59469,2104232
SQLITE_API int sqlite3_blob_read(59519,2105454
SQLITE_API int sqlite3_blob_write(59526,2105643
SQLITE_API int sqlite3_blob_bytes(59536,2105979
struct JournalFile 59578,2107454
  sqlite3_io_methods *pMethod;pMethod59579,2107475
  int nBuf;59580,2107544
  char *zBuf;zBuf59581,2107608
  int iSize;59582,2107679
  int flags;59583,2107751
  sqlite3_vfs *pVfs;pVfs59584,2107803
  sqlite3_file *pReal;pReal59585,2107869
  const char *zJournal;zJournal59586,2107947
typedef struct JournalFile JournalFile;59588,2108015
static int createFile(59594,2108156
static int jrnlClose(59613,2108579
static int jrnlRead(59625,2108795
static int jrnlWrite(59646,2109360
static int jrnlTruncate(59673,2110064
static int jrnlSync(59687,2110346
static int jrnlFileSize(59701,2110602
static struct sqlite3_io_methods JournalFileMethods 59715,2110923
SQLITE_PRIVATE int sqlite3JournalOpen(59734,2111449
SQLITE_PRIVATE int sqlite3JournalCreate(59763,2112337
SQLITE_PRIVATE int sqlite3JournalSize(59774,2112636
typedef struct MemJournal MemJournal;59799,2113556
typedef struct FilePoint FilePoint;59800,2113594
typedef struct FileChunk FileChunk;59801,2113630
#define JOURNAL_CHUNKSIZE 59811,2113993
# define MIN(59816,2114120
struct FileChunk 59822,2114244
  FileChunk *pNext;pNext59823,2114263
  u8 zChunk[zChunk59824,2114329
struct FilePoint 59831,2114529
  sqlite3_int64 iOffset;59832,2114548
  FileChunk *pChunk;pChunk59833,2114626
struct MemJournal 59840,2114823
  sqlite3_io_methods *pMethod;pMethod59841,2114843
  FileChunk *pFirst;pFirst59842,2114911
  FilePoint endpoint;59843,2114980
  FilePoint readpoint;59844,2115051
static int memjrnlRead(59851,2115250
static int memjrnlWrite(59896,2116515
static int memjrnlTruncate(59946,2117910
static int memjrnlClose(59964,2118287
static int memjrnlSync(59978,2118681
static int memjrnlFileSize(59987,2119103
static struct sqlite3_io_methods MemJournalMethods 59996,2119342
SQLITE_PRIVATE void sqlite3MemJournalOpen(60015,2119906
SQLITE_PRIVATE int sqlite3IsMemJournal(60026,2120214
SQLITE_PRIVATE int sqlite3MemJournalSize(60034,2120452
SQLITE_PRIVATE int sqlite3WalkExpr(60075,2121902
SQLITE_PRIVATE int sqlite3WalkExprList(60098,2122731
SQLITE_PRIVATE int sqlite3WalkSelectExpr(60115,2123252
SQLITE_PRIVATE int sqlite3WalkSelectFrom(60133,2124086
SQLITE_PRIVATE int sqlite3WalkSelect(60160,2124838
static void resolveAlias(60220,2127096
static int lookupName(60300,2130411
SQLITE_PRIVATE Expr *sqlite3CreateColumnExpr(sqlite3CreateColumnExpr60580,2140017
static int resolveExprStep(60608,2140904
static int resolveAsName(60792,2147004
static int resolveOrderByTermToExprList(60831,2148286
static void resolveOutOfRangeError(60878,2149672
static int resolveCompoundOrderBy(60904,2150786
SQLITE_PRIVATE int sqlite3ResolveOrderGroupBy(60994,2153439
static int resolveOrderGroupBy(61044,2155415
static int resolveSelectStep(61094,2157345
SQLITE_PRIVATE int sqlite3ResolveExprNames(61309,2164876
SQLITE_PRIVATE void sqlite3ResolveSelectNames(61360,2166275
SQLITE_PRIVATE char sqlite3ExprAffinity(61408,2167908
SQLITE_PRIVATE Expr *sqlite3ExprSetColl(sqlite3ExprSetColl61440,2169028
SQLITE_PRIVATE CollSeq *sqlite3ExprCollSeq(sqlite3ExprCollSeq61460,2169617
SQLITE_PRIVATE char sqlite3CompareAffinity(61499,2170709
static char comparisonAffinity(61526,2171573
SQLITE_PRIVATE int sqlite3IndexAffinityOk(61549,2172418
static u8 binaryCompareP5(61565,2172873
SQLITE_PRIVATE CollSeq *sqlite3BinaryCompareCollSeq(sqlite3BinaryCompareCollSeq61583,2173539
static int codeCompare(61608,2174087
SQLITE_PRIVATE int sqlite3ExprCheckHeight(61635,2174992
static void heightOfExpr(61656,2175693
static void heightOfExprList(61663,2175828
static void heightOfSelect(61671,2175996
static void exprSetHeight(61691,2176680
SQLITE_PRIVATE void sqlite3ExprSetHeight(61708,2177157
SQLITE_PRIVATE int sqlite3SelectExprHeight(61717,2177411
  #define exprSetHeight(61723,2177542
SQLITE_PRIVATE Expr *sqlite3ExprAlloc(sqlite3ExprAlloc61746,2178619
SQLITE_PRIVATE Expr *sqlite3Expr(sqlite3Expr61793,2179900
SQLITE_PRIVATE void sqlite3ExprAttachSubtrees(61810,2180445
SQLITE_PRIVATE Expr *sqlite3PExpr(sqlite3PExpr61846,2181329
SQLITE_PRIVATE Expr *sqlite3ExprAnd(sqlite3ExprAnd61862,2181860
SQLITE_PRIVATE Expr *sqlite3ExprFunction(sqlite3ExprFunction61878,2182243
SQLITE_PRIVATE void sqlite3ExprAssignVarNumber(61909,2183336
SQLITE_PRIVATE void sqlite3ExprDelete(61979,2185637
static int exprStructSize(62003,2186382
static int dupedExprStructSize(62043,2188241
static int dupedExprNodeSize(62067,2189035
static int dupedExprSize(62088,2189873
static Expr *exprDup(exprDup62107,2190558
SQLITE_PRIVATE Expr *sqlite3ExprDup(sqlite3ExprDup62208,2194201
SQLITE_PRIVATE ExprList *sqlite3ExprListDup(sqlite3ExprListDup62211,2194308
SQLITE_PRIVATE SrcList *sqlite3SrcListDup(sqlite3SrcListDup62247,2195533
SQLITE_PRIVATE IdList *sqlite3IdListDup(sqlite3IdListDup62280,2196820
SQLITE_PRIVATE Select *sqlite3SelectDup(sqlite3SelectDup62300,2197409
SQLITE_PRIVATE Select *sqlite3SelectDup(sqlite3SelectDup62325,2198366
SQLITE_PRIVATE ExprList *sqlite3ExprListAppend(sqlite3ExprListAppend62340,2198801
SQLITE_PRIVATE void sqlite3ExprListSetName(62386,2200107
SQLITE_PRIVATE void sqlite3ExprListSetSpan(62411,2200990
SQLITE_PRIVATE void sqlite3ExprListCheckLength(62432,2201733
SQLITE_PRIVATE void sqlite3ExprListDelete(62448,2202133
static int exprNodeIsConstant(62476,2203025
static int selectNodeIsConstant(62508,2204107
static int exprIsConst(62513,2204245
SQLITE_PRIVATE int sqlite3ExprIsConstant(62530,2204741
SQLITE_PRIVATE int sqlite3ExprIsConstantNotJoin(62540,2205058
SQLITE_PRIVATE int sqlite3ExprIsConstantOrFunction(62553,2205474
SQLITE_PRIVATE int sqlite3ExprIsInteger(62563,2205862
SQLITE_PRIVATE int sqlite3ExprCanBeNull(62613,2207257
SQLITE_PRIVATE void sqlite3ExprCodeIsNullJump(62636,2207899
SQLITE_PRIVATE int sqlite3ExprNeedsNoAffinityChange(62657,2208671
SQLITE_PRIVATE int sqlite3IsRowid(62690,2209523
static int isCandidateForInOpt(62710,2210069
SQLITE_PRIVATE int sqlite3FindInIndex(62795,2214100
SQLITE_PRIVATE int sqlite3CodeSubselect(62932,2219734
static void sqlite3ExprCodeIN(63141,2227777
static char *dup8bytes(dup8bytes63248,2231927
static void codeReal(63265,2232418
static void codeInteger(63287,2233080
static void cacheEntryClear(63316,2233854
SQLITE_PRIVATE void sqlite3ExprCacheStore(63330,2234207
SQLITE_PRIVATE void sqlite3ExprCacheRemove(63403,2236296
SQLITE_PRIVATE void sqlite3ExprCachePush(63421,2236790
SQLITE_PRIVATE void sqlite3ExprCachePop(63430,2237061
static void sqlite3ExprCachePinRegister(63450,2237645
SQLITE_PRIVATE int sqlite3ExprCodeGetColumn(63469,2238282
SQLITE_PRIVATE void sqlite3ExprCacheClear(63502,2239320
SQLITE_PRIVATE void sqlite3ExprCacheAffinityChange(63518,2239667
SQLITE_PRIVATE void sqlite3ExprCodeMove(63526,2239948
SQLITE_PRIVATE void sqlite3ExprCodeCopy(63543,2240428
static int usedAsColumnCache(63559,2240936
SQLITE_PRIVATE void sqlite3ExprHardCopy(63575,2241434
static int codeAlias(63606,2242526
SQLITE_PRIVATE int sqlite3ExprCodeTarget(63648,2243997
SQLITE_PRIVATE int sqlite3ExprCodeTemp(64264,2265998
SQLITE_PRIVATE int sqlite3ExprCode(64281,2266448
SQLITE_PRIVATE int sqlite3ExprCodeAndCache(64305,2267268
static int isAppropriateForFactoring(64344,2268815
static int evalConstExpr(64392,2270178
SQLITE_PRIVATE void sqlite3ExprCodeConstants(64436,2271475
SQLITE_PRIVATE int sqlite3ExprCodeExprList(64451,2271867
static void exprCodeBetween(64491,2272926
SQLITE_PRIVATE void sqlite3ExprIfTrue(64549,2275350
SQLITE_PRIVATE void sqlite3ExprIfFalse(64667,2279171
SQLITE_PRIVATE int sqlite3ExprCompare(64817,2284397
static int addAggInfoColumn(64864,2286041
static int addAggInfoFunc(64882,2286448
static int analyzeAggregate(64901,2286889
static int analyzeAggregatesInSelect(65024,2291564
SQLITE_PRIVATE void sqlite3ExprAnalyzeAggregates(65044,2292163
SQLITE_PRIVATE void sqlite3ExprAnalyzeAggList(65059,2292600
SQLITE_PRIVATE int sqlite3GetTempReg(65072,2292947
SQLITE_PRIVATE void sqlite3ReleaseTempReg(65087,2293366
SQLITE_PRIVATE int sqlite3GetTempRange(65104,2293805
SQLITE_PRIVATE void sqlite3ReleaseTempRange(65118,2294140
static void renameTableFunc(65163,2295695
static void renameParentFunc(65228,2297754
static void renameTriggerFunc(65283,2299602
SQLITE_PRIVATE void sqlite3AlterFunctions(65355,2301836
static char *whereOrName(whereOrName65384,2303004
static char *whereForeignKeys(whereForeignKeys65402,2303598
static char *whereTempTriggers(whereTempTriggers65418,2304100
static void reloadTableSchema(65447,2305215
SQLITE_PRIVATE void sqlite3AlterRenameTable(65492,2306742
SQLITE_PRIVATE void sqlite3MinimumFileFormat(65692,2313468
SQLITE_PRIVATE void sqlite3AlterFinishAddColumn(65721,2314517
SQLITE_PRIVATE void sqlite3AlterBeginAddColumn(65842,2318659
static void openStatTable(65954,2322627
    const char *zName;zName65961,2322935
    const char *zCols;zCols65962,2322958
static void analyzeOneTable(66024,2324952
static void loadAnalysis(66249,2334628
static void analyzeDatabase(66259,2334850
static void analyzeTable(66282,2335496
SQLITE_PRIVATE void sqlite3Analyze(66309,2336417
typedef struct analysisInfo analysisInfo;66367,2337989
struct analysisInfo 66368,2338031
  sqlite3 *db;db66369,2338053
  const char *zDatabase;zDatabase66370,2338068
static int analysisLoader(66380,2338297
SQLITE_PRIVATE void sqlite3DeleteIndexSamples(66414,2339033
SQLITE_PRIVATE int sqlite3AnalysisLoad(66453,2340419
static int resolveAttachExpr(66603,2345146
static void attachFunc(66631,2345904
static void detachFunc(66804,2351102
static void codeAttach(66856,2352449
SQLITE_PRIVATE void sqlite3Detach(66928,2354586
SQLITE_PRIVATE void sqlite3Attach(66949,2355218
SQLITE_PRIVATE int sqlite3FixInit(66973,2356100
SQLITE_PRIVATE int sqlite3FixSrcList(67006,2357422
SQLITE_PRIVATE int sqlite3FixSelect(67033,2358338
SQLITE_PRIVATE int sqlite3FixExpr(67054,2358868
SQLITE_PRIVATE int sqlite3FixExprList(67072,2359406
SQLITE_PRIVATE int sqlite3FixTriggerStep(67089,2359816
SQLITE_API int sqlite3_set_authorizer(67179,2362930
static void sqliteAuthBadReturnCode(67196,2363392
SQLITE_PRIVATE int sqlite3AuthReadCol(67210,2363987
SQLITE_PRIVATE void sqlite3AuthRead(67243,2365276
SQLITE_PRIVATE int sqlite3AuthCheck(67300,2367124
SQLITE_PRIVATE void sqlite3AuthContextPush(67336,2368069
SQLITE_PRIVATE void sqlite3AuthContextPop(67351,2368412
SQLITE_PRIVATE void sqlite3BeginParse(67391,2369648
struct TableLock 67401,2369919
  int iDb;67402,2369938
  int iTab;67403,2370014
  u8 isWriteLock;67404,2370083
  const char *zName;zName67405,2370156
SQLITE_PRIVATE void sqlite3TableLock(67418,2370617
static void codeTableLocks(67458,2371820
  #define codeTableLocks(67473,2372234
SQLITE_PRIVATE void sqlite3FinishCoding(67486,2372631
SQLITE_PRIVATE void sqlite3NestedParse(67588,2376174
# define SAVE_SZ 67593,2376332
SQLITE_PRIVATE Table *sqlite3FindTable(sqlite3FindTable67626,2377456
SQLITE_PRIVATE Table *sqlite3LocateTable(sqlite3LocateTable67651,2378362
SQLITE_PRIVATE Index *sqlite3FindIndex(sqlite3FindIndex67690,2379683
static void freeIndex(67708,2380204
static void sqlite3DeleteIndex(67725,2380673
SQLITE_PRIVATE void sqlite3UnlinkAndDeleteIndex(67741,2381148
SQLITE_PRIVATE void sqlite3ResetInternalSchema(67777,2382347
SQLITE_PRIVATE void sqlite3CommitInternalChanges(67827,2383700
static void sqliteResetColumnNames(67834,2383858
SQLITE_PRIVATE void sqlite3DeleteTable(67863,2384721
SQLITE_PRIVATE void sqlite3UnlinkAndDeleteTable(67906,2385814
SQLITE_PRIVATE char *sqlite3NameFromToken(sqlite3NameFromToken67934,2386783
SQLITE_PRIVATE void sqlite3OpenMasterTable(67949,2387138
SQLITE_PRIVATE int sqlite3FindDbName(67965,2387728
SQLITE_PRIVATE int sqlite3FindDb(67986,2388365
SQLITE_PRIVATE int sqlite3TwoPartName(68011,2389247
SQLITE_PRIVATE int sqlite3CheckObjectName(68048,2390440
SQLITE_PRIVATE void sqlite3StartTable(68074,2391680
#define STRICMP(68278,2398755
SQLITE_PRIVATE void sqlite3AddColumn(68291,2399196
SQLITE_PRIVATE void sqlite3AddNotNull(68340,2400583
SQLITE_PRIVATE char sqlite3AffinityType(68372,2401687
SQLITE_PRIVATE void sqlite3AddColumnType(68417,2403367
SQLITE_PRIVATE void sqlite3AddDefaultValue(68439,2404031
SQLITE_PRIVATE void sqlite3AddPrimaryKey(68482,2405758
SQLITE_PRIVATE void sqlite3AddCheckConstraint(68546,2407634
SQLITE_PRIVATE void sqlite3AddCollateType(68566,2408128
SQLITE_PRIVATE CollSeq *sqlite3LocateCollSeq(sqlite3LocateCollSeq68617,2409840
SQLITE_PRIVATE void sqlite3ChangeCookie(68651,2411017
static int identLength(68668,2411625
static void identPut(68689,2412414
static char *createTableStmt(createTableStmt68717,2413182
SQLITE_PRIVATE void sqlite3EndTable(68801,2415930
SQLITE_PRIVATE void sqlite3CreateView(69007,2422064
SQLITE_PRIVATE int sqlite3ViewGetColumnNames(69087,2424687
static void sqliteViewResetAll(69181,2427829
# define sqliteViewResetAll(69193,2428197
SQLITE_PRIVATE void sqlite3RootPageMoved(69214,2429173
static void destroyRootPage(69241,2430001
static void destroyTable(69269,2431183
SQLITE_PRIVATE void sqlite3DropTable(69326,2432919
SQLITE_PRIVATE void sqlite3CreateForeignKey(69503,2438619
SQLITE_PRIVATE void sqlite3DeferForeignKey(69623,2441987
static void sqlite3RefillIndex(69644,2442849
SQLITE_PRIVATE Index *sqlite3CreateIndex(sqlite3CreateIndex69728,2446662
SQLITE_PRIVATE void sqlite3DefaultRowEst(70210,2463919
SQLITE_PRIVATE void sqlite3DropIndex(70231,2464329
SQLITE_PRIVATE void *sqlite3ArrayAllocate(sqlite3ArrayAllocate70314,2466957
SQLITE_PRIVATE IdList *sqlite3IdListAppend(sqlite3IdListAppend70349,2468033
SQLITE_PRIVATE void sqlite3IdListDelete(70376,2468578
SQLITE_PRIVATE int sqlite3IdListIndex(70390,2468912
SQLITE_PRIVATE SrcList *sqlite3SrcListEnlarge(sqlite3SrcListEnlarge70418,2469877
SQLITE_PRIVATE SrcList *sqlite3SrcListAppend(sqlite3SrcListAppend70500,2472667
SQLITE_PRIVATE void sqlite3SrcListAssignCursors(70535,2473717
SQLITE_PRIVATE void sqlite3SrcListDelete(70553,2474214
SQLITE_PRIVATE SrcList *sqlite3SrcListAppendFromTerm(sqlite3SrcListAppendFromTerm70586,2475583
SQLITE_PRIVATE void sqlite3SrcListIndexedBy(70630,2477034
SQLITE_PRIVATE void sqlite3SrcListShiftJoinType(70660,2478160
SQLITE_PRIVATE void sqlite3BeginTransaction(70673,2478396
SQLITE_PRIVATE void sqlite3CommitTransaction(70699,2478986
SQLITE_PRIVATE void sqlite3RollbackTransaction(70719,2479387
SQLITE_PRIVATE void sqlite3Savepoint(70740,2479885
SQLITE_PRIVATE int sqlite3OpenTempDatabase(70760,2480624
SQLITE_PRIVATE void sqlite3CodeVerifySchema(70812,2482665
SQLITE_PRIVATE void sqlite3BeginWriteOperation(70851,2484142
SQLITE_PRIVATE void sqlite3MultiWrite(70865,2484757
SQLITE_PRIVATE void sqlite3MayAbort(70886,2485762
SQLITE_PRIVATE void sqlite3HaltConstraint(70896,2486093
static int collationMatch(70909,2486509
static void reindexTable(70928,2486940
static void reindexDatabases(70947,2487572
SQLITE_PRIVATE void sqlite3Reindex(70978,2488726
SQLITE_PRIVATE KeyInfo *sqlite3IndexKeyinfo(sqlite3IndexKeyinfo71042,2490977
static void callCollNeeded(71092,2492521
static int synthCollSeq(71121,2493558
SQLITE_PRIVATE CollSeq *sqlite3GetCollSeq(sqlite3GetCollSeq71151,2494618
SQLITE_PRIVATE int sqlite3CheckCollSeq(71188,2495956
static CollSeq *findCollSeqEntry(findCollSeqEntry71218,2496976
SQLITE_PRIVATE CollSeq *sqlite3FindCollSeq(sqlite3FindCollSeq71271,2498787
static int matchQuality(71310,2500257
static FuncDef *functionSearch(functionSearch71334,2500879
SQLITE_PRIVATE void sqlite3FuncDefInsert(71352,2501339
SQLITE_PRIVATE FuncDef *sqlite3FindFunction(sqlite3FindFunction71394,2502862
SQLITE_PRIVATE void sqlite3SchemaFree(71472,2505633
SQLITE_PRIVATE Schema *sqlite3SchemaGet(sqlite3SchemaGet71502,2506511
SQLITE_PRIVATE Table *sqlite3SrcListLookup(sqlite3SrcListLookup71543,2507872
SQLITE_PRIVATE int sqlite3IsReadOnly(71564,2508441
SQLITE_PRIVATE void sqlite3MaterializeView(71601,2509719
SQLITE_PRIVATE Expr *sqlite3LimitWhere(sqlite3LimitWhere71643,2511171
SQLITE_PRIVATE void sqlite3DeleteFrom(71735,2514704
# define pTrigger 71782,2516755
# define isView 71783,2516775
# undef isView71786,2516824
# define isView 71787,2516839
 #undef isView71965,2522923
 #undef pTrigger71968,2522961
SQLITE_PRIVATE void sqlite3GenerateRowDelete(71990,2523678
SQLITE_PRIVATE void sqlite3GenerateRowIndexDelete(72098,2528233
SQLITE_PRIVATE int sqlite3GenerateIndexKey(72126,2529298
static CollSeq *sqlite3GetFuncCollSeq(sqlite3GetFuncCollSeq72183,2531254
static void minmaxFunc(72190,2531418
static void typeofFunc(72220,2532136
static void lengthFunc(72241,2532666
static void absFunc(72281,2533493
static void substrFunc(72331,2535195
static void roundFunc(72417,2536946
static void *contextMalloc(contextMalloc72458,2538197
static void upperFunc(72479,2538748
static void lowerFunc(72499,2539358
static void ifnullFunc(72533,2540407
#define ifnullFunc 72547,2540676
static void randomFunc(72552,2540816
static void randomBlob(72578,2541645
static void last_insert_rowid(72602,2542162
static void changes(72622,2542804
static void total_changes(72636,2543184
struct compareInfo 72651,2543612
  u8 matchAll;72652,2543633
  u8 matchOne;72653,2543648
  u8 matchSet;72654,2543663
  u8 noCase;72655,2543678
# define sqlite3Utf8Read(72665,2543989
# define GlogUpperToLower(72666,2544031
# define GlogUpperToLower(72668,2544097
static const struct compareInfo globInfo 72671,2544182
static const struct compareInfo likeInfoNorm 72674,2544360
static const struct compareInfo likeInfoAlt 72677,2544554
static int patternCompare(72707,2545630
SQLITE_API int sqlite3_like_count 72821,2549058
static void likeFunc(72837,2549486
static void nullifFunc(72890,2551141
static void versionFunc(72906,2551547
static void sourceidFunc(72922,2552039
static void compileoptionusedFunc(72939,2552564
static void compileoptiongetFunc(72961,2553233
static const char hexdigits[hexdigits72978,2553740
static void quoteFunc(72994,2554352
static void hexFunc(73059,2556211
static void zeroblobFunc(73087,2556919
static void replaceFunc(73112,2557683
static void trimFunc(73196,2560451
static void soundexFunc(73288,2563184
static void loadExt(73341,2564754
typedef struct SumCtx SumCtx;73364,2565364
struct SumCtx 73365,2565394
  double rSum;73366,2565410
  i64 iSum;73367,2565455
  i64 cnt;73368,2565496
  u8 overflow;73369,2565548
  u8 approx;73370,2565604
static void sumStep(73383,2566118
static void sumFinalize(73409,2566931
static void avgFinalize(73422,2567288
static void totalFinalize(73429,2567486
typedef struct CountCtx CountCtx;73440,2567823
struct CountCtx 73441,2567857
  i64 n;73442,2567875
static void countStep(73448,2567951
static void countFinalize(73464,2568595
static void minmaxStep(73473,2568826
static void minMaxFinalize(73507,2569940
static void groupConcatStep(73521,2570257
static void groupConcatFinalize(73554,2571183
SQLITE_PRIVATE void sqlite3RegisterBuiltinFunctions(73574,2571775
static void setLikeOptFlag(73590,2572187
SQLITE_PRIVATE void sqlite3RegisterLikeFunctions(73604,2572631
SQLITE_PRIVATE int sqlite3IsLikeFunction(73627,2573588
SQLITE_PRIVATE void sqlite3RegisterGlobalFunctions(73662,2574830
static int locateFkeyIndex(73934,2587419
static void fkLookupParent(74067,2592796
static void fkScanChildren(74210,2599454
SQLITE_PRIVATE FKey *sqlite3FkReferences(sqlite3FkReferences74333,2604535
static void fkTriggerDelete(74346,2605034
SQLITE_PRIVATE void sqlite3FkDropTable(74374,2606113
SQLITE_PRIVATE void sqlite3FkCheck(74435,2608657
#define COLUMN_MASK(74577,2614204
SQLITE_PRIVATE u32 sqlite3FkOldmask(74583,2614379
SQLITE_PRIVATE int sqlite3FkRequired(74619,2615742
static Trigger *fkActionTrigger(fkActionTrigger74694,2618623
SQLITE_PRIVATE void sqlite3FkActions(74883,2625719
SQLITE_PRIVATE void sqlite3FkDelete(74911,2626870
SQLITE_PRIVATE void sqlite3OpenTable(74966,2628736
SQLITE_PRIVATE const char *sqlite3IndexAffinityStr(sqlite3IndexAffinityStr75003,2630138
SQLITE_PRIVATE void sqlite3TableAffinityStr(75045,2631451
static int readsTable(75082,2632642
static int autoIncBegin(75137,2634368
SQLITE_PRIVATE void sqlite3AutoincrementBegin(75169,2635461
static void autoIncStep(75210,2637228
SQLITE_PRIVATE void sqlite3AutoincrementEnd(75223,2637689
# define autoIncBegin(75261,2638956
# define autoIncStep(75262,2638989
SQLITE_PRIVATE void sqlite3Insert(75377,2643245
# define pTrigger 75454,2646836
# define tmask 75455,2646856
# define isView 75456,2646873
# undef isView75459,2646922
# define isView 75460,2646937
 #undef isView75998,2665510
 #undef pTrigger76001,2665548
 #undef tmask76004,2665585
SQLITE_PRIVATE void sqlite3GenerateConstraintChecks(76083,2669337
SQLITE_PRIVATE void sqlite3CompleteInsertion(76368,2679766
SQLITE_PRIVATE int sqlite3OpenTableAndIndices(76428,2681767
SQLITE_API int sqlite3_xferopt_count;76465,2682905
static int xferCompatibleCollation(76473,2683064
static int xferCompatibleIndex(76494,2683641
static int xferOptimization(76551,2685546
SQLITE_API int sqlite3_exec(76807,2695627
  #define SQLITE_CORE 76942,2699867
#define _SQLITE3EXT_H_76964,2700774
typedef struct sqlite3_api_routines sqlite3_api_routines;76966,2700798
struct sqlite3_api_routines 76978,2701230
  void * (*aggregate_context)aggregate_context76979,2701260
  int  (*aggregate_count)aggregate_count76980,2701320
  int  (*bind_blob)bind_blob76981,2701365
  int  (*bind_double)bind_double76982,2701438
  int  (*bind_int)bind_int76983,2701487
  int  (*bind_int64)bind_int6476984,2701530
  int  (*bind_null)bind_null76985,2701584
  int  (*bind_parameter_count)bind_parameter_count76986,2701624
  int  (*bind_parameter_index)bind_parameter_index76987,2701671
  const char * (*bind_parameter_name)bind_parameter_name76988,2701735
  int  (*bind_text)bind_text76989,2701793
  int  (*bind_text16)bind_text1676990,2701866
  int  (*bind_value)bind_value76991,2701939
  int  (*busy_handler)busy_handler76992,2702001
  int  (*busy_timeout)busy_timeout76993,2702059
  int  (*changes)changes76994,2702100
  int  (*close)close76995,2702129
  int  (*collation_needed)collation_needed76996,2702156
  int  (*collation_needed16)collation_needed1676997,2702249
  const void * (*column_blob)column_blob76998,2702344
  int  (*column_bytes)column_bytes76999,2702399
  int  (*column_bytes16)column_bytes1677000,2702447
  int  (*column_count)column_count77001,2702497
  const char * (*column_database_name)column_database_name77002,2702541
  const void * (*column_database_name16)column_database_name1677003,2702600
  const char * (*column_decltype)column_decltype77004,2702661
  const void * (*column_decltype16)column_decltype1677005,2702717
  double  (*column_double)column_double77006,2702773
  int  (*column_int)column_int77007,2702825
  sqlite_int64  (*column_int64)column_int6477008,2702871
  const char * (*column_name)column_name77009,2702928
  const void * (*column_name16)column_name1677010,2702978
  const char * (*column_origin_name)column_origin_name77011,2703030
  const void * (*column_origin_name16)column_origin_name1677012,2703087
  const char * (*column_table_name)column_table_name77013,2703146
  const void * (*column_table_name16)column_table_name1677014,2703202
  const unsigned char * (*column_text)column_text77015,2703260
  const void * (*column_text16)column_text1677016,2703324
  int  (*column_type)column_type77017,2703381
  sqlite3_value* (*column_value)column_value77018,2703428
  void * (*commit_hook)commit_hook77019,2703486
  int  (*complete)complete77020,2703541
  int  (*complete16)complete1677021,2703577
  int  (*create_collation)create_collation77022,2703615
  int  (*create_collation16)create_collation1677023,2703721
  int  (*create_function)create_function77024,2703829
  int  (*create_function16)create_function1677025,2704029
  int (*create_module)create_module77026,2704231
  int  (*data_count)data_count77027,2704305
  sqlite3 * (*db_handle)db_handle77028,2704347
  int (*declare_vtab)declare_vtab77029,2704388
  int  (*enable_shared_cache)enable_shared_cache77030,2704433
  int  (*errcode)errcode77031,2704469
  const char * (*errmsg)errmsg77032,2704500
  const void * (*errmsg16)errmsg1677033,2704536
  int  (*exec)exec77034,2704574
  int  (*expired)expired77035,2704642
  int  (*finalize)finalize77036,2704676
  void  (*free)free77037,2704716
  void  (*free_table)free_table77038,2704740
  int  (*get_autocommit)get_autocommit77039,2704777
  void * (*get_auxdata)get_auxdata77040,2704813
  int  (*get_table)get_table77041,2704860
  int  (*global_recover)global_recover77042,2704928
  void  (*interruptx)interruptx77043,2704960
  sqlite_int64  (*last_insert_rowid)last_insert_rowid77044,2704993
  const char * (*libversion)libversion77045,2705041
  int  (*libversion_number)libversion_number77046,2705077
  void *(*malloc)malloc77047,2705112
  char * (*mprintf)mprintf77048,2705136
  int  (*open)open77049,2705174
  int  (*open16)open1677050,2705213
  int  (*prepare)prepare77051,2705254
  int  (*prepare16)prepare1677052,2705327
  void * (*profile)profile77053,2705402
  void  (*progress_handler)progress_handler77054,2705480
  void *(*realloc)realloc77055,2705543
  int  (*reset)reset77056,2705574
  void  (*result_blob)result_blob77057,2705611
  void  (*result_double)result_double77058,2705684
  void  (*result_error)result_error77059,2705735
  void  (*result_error16)result_error1677060,2705794
  void  (*result_int)result_int77061,2705855
  void  (*result_int64)result_int6477062,2705900
  void  (*result_null)result_null77063,2705956
  void  (*result_text)result_text77064,2705998
  void  (*result_text16)result_text1677065,2706071
  void  (*result_text16be)result_text16be77066,2706146
  void  (*result_text16le)result_text16le77067,2706223
  void  (*result_value)result_value77068,2706300
  void * (*rollback_hook)rollback_hook77069,2706358
  int  (*set_authorizer)set_authorizer77070,2706416
  void  (*set_auxdata)set_auxdata77071,2706524
  char * (*snprintf)snprintf77072,2706592
  int  (*step)step77073,2706641
  int  (*table_column_metadata)table_column_metadata77074,2706672
  void  (*thread_cleanup)thread_cleanup77075,2706792
  int  (*total_changes)total_changes77076,2706825
  void * (*trace)trace77077,2706860
  int  (*transfer_bindings)transfer_bindings77078,2706928
  void * (*update_hook)update_hook77079,2706986
  void * (*user_data)user_data77080,2707084
  const void * (*value_blob)value_blob77081,2707125
  int  (*value_bytes)value_bytes77082,2707171
  int  (*value_bytes16)value_bytes1677083,2707210
  double  (*value_double)value_double77084,2707251
  int  (*value_int)value_int77085,2707294
  sqlite_int64  (*value_int64)value_int6477086,2707331
  int  (*value_numeric_type)value_numeric_type77087,2707379
  const unsigned char * (*value_text)value_text77088,2707425
  const void * (*value_text16)value_text1677089,2707480
  const void * (*value_text16be)value_text16be77090,2707528
  const void * (*value_text16le)value_text16le77091,2707578
  int  (*value_type)value_type77092,2707628
  char *(*vmprintf)vmprintf77093,2707666
  int (*overload_function)overload_function77095,2707726
  int (*prepare_v2)prepare_v277097,2707821
  int (*prepare16_v2)prepare16_v277098,2707896
  int (*clear_bindings)clear_bindings77099,2707973
  int (*create_module_v2)create_module_v277101,2708036
  int (*bind_zeroblob)bind_zeroblob77103,2708161
  int (*blob_bytes)blob_bytes77104,2708208
  int (*blob_close)blob_close77105,2708244
  int (*blob_open)blob_open77106,2708280
  int (*blob_read)blob_read77107,2708379
  int (*blob_write)blob_write77108,2708428
  int (*create_collation_v2)create_collation_v277109,2708484
  int (*file_control)file_control77110,2708607
  sqlite3_int64 (*memory_highwater)memory_highwater77111,2708662
  sqlite3_int64 (*memory_used)memory_used77112,2708704
  sqlite3_mutex *(*mutex_alloc)mutex_alloc77113,2708742
  void (*mutex_enter)mutex_enter77114,2708780
  void (*mutex_free)mutex_free77115,2708819
  void (*mutex_leave)mutex_leave77116,2708857
  int (*mutex_try)mutex_try77117,2708896
  int (*open_v2)open_v277118,2708932
  int (*release_memory)release_memory77119,2708989
  void (*result_error_nomem)result_error_nomem77120,2709019
  void (*result_error_toobig)result_error_toobig77121,2709067
  int (*sleep)sleep77122,2709116
  void (*soft_heap_limit)soft_heap_limit77123,2709137
  sqlite3_vfs *(*vfs_find)vfs_find77124,2709169
  int (*vfs_register)vfs_register77125,2709210
  int (*vfs_unregister)vfs_unregister77126,2709251
  int (*xthreadsafe)xthreadsafe77127,2709290
  void (*result_zeroblob)result_zeroblob77128,2709318
  void (*result_error_code)result_error_code77129,2709367
  int (*test_control)test_control77130,2709418
  void (*randomness)randomness77131,2709451
  sqlite3 *(*context_db_handle)context_db_handle77132,2709484
  int (*extended_result_codes)extended_result_codes77133,2709535
  int (*limit)limit77134,2709581
  sqlite3_stmt *(*next_stmt)next_stmt77135,2709615
  const char *(*sql)sql77136,2709669
  int (*status)status77137,2709706
#define sqlite3_aggregate_context 77152,2710245
#define sqlite3_aggregate_count 77154,2710346
#define sqlite3_bind_blob 77156,2710421
#define sqlite3_bind_double 77157,2710483
#define sqlite3_bind_int 77158,2710547
#define sqlite3_bind_int64 77159,2710608
#define sqlite3_bind_null 77160,2710671
#define sqlite3_bind_parameter_count 77161,2710733
#define sqlite3_bind_parameter_index 77162,2710806
#define sqlite3_bind_parameter_name 77163,2710879
#define sqlite3_bind_text 77164,2710951
#define sqlite3_bind_text16 77165,2711013
#define sqlite3_bind_value 77166,2711077
#define sqlite3_busy_handler 77167,2711140
#define sqlite3_busy_timeout 77168,2711205
#define sqlite3_changes 77169,2711270
#define sqlite3_close 77170,2711330
#define sqlite3_collation_needed 77171,2711388
#define sqlite3_collation_needed16 77172,2711457
#define sqlite3_column_blob 77173,2711528
#define sqlite3_column_bytes 77174,2711592
#define sqlite3_column_bytes16 77175,2711657
#define sqlite3_column_count 77176,2711724
#define sqlite3_column_database_name 77177,2711789
#define sqlite3_column_database_name16 77178,2711862
#define sqlite3_column_decltype 77179,2711937
#define sqlite3_column_decltype16 77180,2712005
#define sqlite3_column_double 77181,2712075
#define sqlite3_column_int 77182,2712141
#define sqlite3_column_int64 77183,2712204
#define sqlite3_column_name 77184,2712269
#define sqlite3_column_name16 77185,2712333
#define sqlite3_column_origin_name 77186,2712399
#define sqlite3_column_origin_name16 77187,2712470
#define sqlite3_column_table_name 77188,2712543
#define sqlite3_column_table_name16 77189,2712613
#define sqlite3_column_text 77190,2712685
#define sqlite3_column_text16 77191,2712749
#define sqlite3_column_type 77192,2712815
#define sqlite3_column_value 77193,2712879
#define sqlite3_commit_hook 77194,2712944
#define sqlite3_complete 77195,2713008
#define sqlite3_complete16 77196,2713069
#define sqlite3_create_collation 77197,2713132
#define sqlite3_create_collation16 77198,2713201
#define sqlite3_create_function 77199,2713272
#define sqlite3_create_function16 77200,2713340
#define sqlite3_create_module 77201,2713410
#define sqlite3_create_module_v2 77202,2713476
#define sqlite3_data_count 77203,2713545
#define sqlite3_db_handle 77204,2713608
#define sqlite3_declare_vtab 77205,2713670
#define sqlite3_enable_shared_cache 77206,2713735
#define sqlite3_errcode 77207,2713807
#define sqlite3_errmsg 77208,2713867
#define sqlite3_errmsg16 77209,2713926
#define sqlite3_exec 77210,2713987
#define sqlite3_expired 77212,2714075
#define sqlite3_finalize 77214,2714142
#define sqlite3_free 77215,2714203
#define sqlite3_free_table 77216,2714260
#define sqlite3_get_autocommit 77217,2714323
#define sqlite3_get_auxdata 77218,2714390
#define sqlite3_get_table 77219,2714454
#define sqlite3_global_recover 77221,2714547
#define sqlite3_interrupt 77223,2714621
#define sqlite3_last_insert_rowid 77224,2714684
#define sqlite3_libversion 77225,2714754
#define sqlite3_libversion_number 77226,2714817
#define sqlite3_malloc 77227,2714887
#define sqlite3_mprintf 77228,2714946
#define sqlite3_open 77229,2715006
#define sqlite3_open16 77230,2715063
#define sqlite3_prepare 77231,2715122
#define sqlite3_prepare16 77232,2715182
#define sqlite3_prepare_v2 77233,2715244
#define sqlite3_prepare16_v2 77234,2715307
#define sqlite3_profile 77235,2715372
#define sqlite3_progress_handler 77236,2715432
#define sqlite3_realloc 77237,2715501
#define sqlite3_reset 77238,2715561
#define sqlite3_result_blob 77239,2715619
#define sqlite3_result_double 77240,2715683
#define sqlite3_result_error 77241,2715749
#define sqlite3_result_error16 77242,2715814
#define sqlite3_result_int 77243,2715881
#define sqlite3_result_int64 77244,2715944
#define sqlite3_result_null 77245,2716009
#define sqlite3_result_text 77246,2716073
#define sqlite3_result_text16 77247,2716137
#define sqlite3_result_text16be 77248,2716203
#define sqlite3_result_text16le 77249,2716271
#define sqlite3_result_value 77250,2716339
#define sqlite3_rollback_hook 77251,2716404
#define sqlite3_set_authorizer 77252,2716470
#define sqlite3_set_auxdata 77253,2716537
#define sqlite3_snprintf 77254,2716601
#define sqlite3_step 77255,2716662
#define sqlite3_table_column_metadata 77256,2716719
#define sqlite3_thread_cleanup 77257,2716793
#define sqlite3_total_changes 77258,2716860
#define sqlite3_trace 77259,2716926
#define sqlite3_transfer_bindings 77261,2717015
#define sqlite3_update_hook 77263,2717092
#define sqlite3_user_data 77264,2717156
#define sqlite3_value_blob 77265,2717218
#define sqlite3_value_bytes 77266,2717281
#define sqlite3_value_bytes16 77267,2717345
#define sqlite3_value_double 77268,2717411
#define sqlite3_value_int 77269,2717476
#define sqlite3_value_int64 77270,2717538
#define sqlite3_value_numeric_type 77271,2717602
#define sqlite3_value_text 77272,2717673
#define sqlite3_value_text16 77273,2717736
#define sqlite3_value_text16be 77274,2717801
#define sqlite3_value_text16le 77275,2717868
#define sqlite3_value_type 77276,2717935
#define sqlite3_vmprintf 77277,2717998
#define sqlite3_overload_function 77278,2718059
#define sqlite3_prepare_v2 77279,2718129
#define sqlite3_prepare16_v2 77280,2718192
#define sqlite3_clear_bindings 77281,2718257
#define sqlite3_bind_zeroblob 77282,2718324
#define sqlite3_blob_bytes 77283,2718390
#define sqlite3_blob_close 77284,2718453
#define sqlite3_blob_open 77285,2718516
#define sqlite3_blob_read 77286,2718578
#define sqlite3_blob_write 77287,2718640
#define sqlite3_create_collation_v2 77288,2718703
#define sqlite3_file_control 77289,2718775
#define sqlite3_memory_highwater 77290,2718840
#define sqlite3_memory_used 77291,2718909
#define sqlite3_mutex_alloc 77292,2718973
#define sqlite3_mutex_enter 77293,2719037
#define sqlite3_mutex_free 77294,2719101
#define sqlite3_mutex_leave 77295,2719164
#define sqlite3_mutex_try 77296,2719228
#define sqlite3_open_v2 77297,2719290
#define sqlite3_release_memory 77298,2719350
#define sqlite3_result_error_nomem 77299,2719417
#define sqlite3_result_error_toobig 77300,2719488
#define sqlite3_sleep 77301,2719560
#define sqlite3_soft_heap_limit 77302,2719618
#define sqlite3_vfs_find 77303,2719686
#define sqlite3_vfs_register 77304,2719747
#define sqlite3_vfs_unregister 77305,2719812
#define sqlite3_threadsafe 77306,2719879
#define sqlite3_result_zeroblob 77307,2719943
#define sqlite3_result_error_code 77308,2720011
#define sqlite3_test_control 77309,2720081
#define sqlite3_randomness 77310,2720146
#define sqlite3_context_db_handle 77311,2720209
#define sqlite3_extended_result_codes 77312,2720279
#define sqlite3_limit 77313,2720353
#define sqlite3_next_stmt 77314,2720411
#define sqlite3_sql 77315,2720473
#define sqlite3_status 77316,2720529
#define SQLITE_EXTENSION_INIT1 77319,2720614
#define SQLITE_EXTENSION_INIT2(77320,2720694
# define sqlite3_column_database_name 77335,2721164
# define sqlite3_column_database_name16 77336,2721206
# define sqlite3_column_table_name 77337,2721248
# define sqlite3_column_table_name16 77338,2721290
# define sqlite3_column_origin_name 77339,2721332
# define sqlite3_column_origin_name16 77340,2721374
# define sqlite3_table_column_metadata 77341,2721416
# define sqlite3_set_authorizer 77345,2721499
# define sqlite3_bind_text16 77349,2721574
# define sqlite3_collation_needed16 77350,2721616
# define sqlite3_column_decltype16 77351,2721658
# define sqlite3_column_name16 77352,2721700
# define sqlite3_column_text16 77353,2721742
# define sqlite3_complete16 77354,2721784
# define sqlite3_create_collation16 77355,2721826
# define sqlite3_create_function16 77356,2721868
# define sqlite3_errmsg16 77357,2721910
# define sqlite3_open16 77358,2721952
# define sqlite3_prepare16 77359,2721994
# define sqlite3_prepare16_v2 77360,2722036
# define sqlite3_result_error16 77361,2722078
# define sqlite3_result_text16 77362,2722120
# define sqlite3_result_text16be 77363,2722162
# define sqlite3_result_text16le 77364,2722204
# define sqlite3_value_text16 77365,2722246
# define sqlite3_value_text16be 77366,2722288
# define sqlite3_value_text16le 77367,2722330
# define sqlite3_column_database_name16 77368,2722372
# define sqlite3_column_table_name16 77369,2722414
# define sqlite3_column_origin_name16 77370,2722456
# define sqlite3_complete 77374,2722534
# define sqlite3_complete16 77375,2722562
# define sqlite3_progress_handler 77379,2722637
# define sqlite3_create_module 77383,2722713
# define sqlite3_create_module_v2 77384,2722746
# define sqlite3_declare_vtab 77385,2722782
# define sqlite3_enable_shared_cache 77389,2722854
# define sqlite3_profile 77393,2722926
# define sqlite3_trace 77394,2722959
# define sqlite3_free_table 77398,2723029
# define sqlite3_get_table 77399,2723062
#define sqlite3_bind_zeroblob 77403,2723131
#define sqlite3_blob_bytes 77404,2723164
#define sqlite3_blob_close 77405,2723197
#define sqlite3_blob_open 77406,2723230
#define sqlite3_blob_read 77407,2723263
#define sqlite3_blob_write 77408,2723296
static const sqlite3_api_routines sqlite3Apis 77426,2723965
static int sqlite3LoadExtension(77648,2729111
SQLITE_API int sqlite3_load_extension(77732,2731852
SQLITE_PRIVATE void sqlite3CloseExtensions(77750,2732482
SQLITE_API int sqlite3_enable_load_extension(77763,2732868
static const sqlite3_api_routines sqlite3Apis 77783,2733447
typedef struct sqlite3AutoExtList sqlite3AutoExtList;77794,2733718
static SQLITE_WSD struct sqlite3AutoExtList 77795,2733772
  int nExt;77796,2733818
  void (**aExt)aExt77797,2733887
} sqlite3Autoext 77798,2733959
# define wsdAutoextInit 77807,2734350
# define wsdAutoext 77809,2734445
# define wsdAutoextInit77811,2734476
# define wsdAutoext 77812,2734500
SQLITE_API int sqlite3_auto_extension(77820,2734658
SQLITE_API void sqlite3_reset_auto_extension(77859,2735601
SQLITE_PRIVATE void sqlite3AutoLoadExtensions(77881,2736123
static u8 getSafetyLevel(77945,2738147
static u8 getBoolean(77967,2738767
static int getLockingMode(77974,2738898
static int getAutoVacuum(77989,2739384
static int getTempStore(78005,2739964
static int invalidateTempStorage(78023,2740422
static int changeTempStorage(78045,2741123
static void returnSingleInt(78060,2741530
static int flagPragma(78079,2742217
  static const struct sPragmaType 78080,2742294
    const char *zName;zName78081,2742330
    int mask;78082,2742379
static const char *actionName(actionName78158,2745145
SQLITE_PRIVATE void sqlite3Pragma(78187,2746063
#    define SQLITE_ENABLE_LOCKING_STYLE 78682,2763570
#    define SQLITE_ENABLE_LOCKING_STYLE 78684,2763620
# define SQLITE_INTEGRITY_CHECK_ERROR_MAX 78966,2774034
static void corruptSchema(79412,2790885
SQLITE_PRIVATE int sqlite3InitCallback(79442,2791977
static int sqlite3InitOne(79521,2794790
  #define temp_master_schema 79557,2795610
SQLITE_PRIVATE int sqlite3Init(79771,2802712
SQLITE_PRIVATE int sqlite3ReadSchema(79812,2803878
static void schemaIsValid(79832,2804352
SQLITE_PRIVATE int sqlite3SchemaToIndex(79879,2805923
static int sqlite3Prepare(79907,2806849
static int sqlite3LockAndPrepare(80069,2812074
SQLITE_PRIVATE int sqlite3Reprepare(80104,2813356
SQLITE_API int sqlite3_prepare(80141,2814483
SQLITE_API int sqlite3_prepare_v2(80153,2814991
static int sqlite3Prepare16(80171,2815610
SQLITE_API int sqlite3_prepare16(80221,2817535
SQLITE_API int sqlite3_prepare16_v2(80233,2818039
static void clearSelect(80270,2819337
SQLITE_PRIVATE void sqlite3SelectDestInit(80285,2819778
SQLITE_PRIVATE Select *sqlite3SelectNew(sqlite3SelectNew80298,2820063
SQLITE_PRIVATE void sqlite3SelectDelete(80347,2821673
SQLITE_PRIVATE int sqlite3JoinType(80371,2822292
    u8 i;80378,2822593
    u8 nChar;80379,2822656
    u8 code;80380,2822715
static int columnIndex(80432,2824316
static int tableAndColumnIndex(80449,2824768
static void addWhereTerm(80484,2825924
static void setJoinExpr(80543,2828360
static int sqliteProcessJoin(80568,2829323
static void pushOntoSorter(80660,2832654
static void codeOffset(80700,2834097
static void codeDistinct(80724,2834971
static int checkForMultiColumnSelectError(80748,2835801
static void selectInnerLoop(80772,2836595
static KeyInfo *keyInfoFromExprList(keyInfoFromExprList80997,2844428
static void generateSortTail(81031,2845413
static const char *columnType(columnType81144,2849191
static void generateColumnTypes(81272,2853642
static void generateColumnNames(81312,2854997
static const char *selectOpName(selectOpName81379,2857159
static int selectColumnsFromExprList(81404,2857986
static void selectAddColumnTypeAndCollation(81495,2861418
SQLITE_PRIVATE Table *sqlite3ResultSetOfSelect(sqlite3ResultSetOfSelect81532,2862550
SQLITE_PRIVATE Vdbe *sqlite3GetVdbe(sqlite3GetVdbe81568,2863688
static void computeLimitRegisters(81600,2864898
static CollSeq *multiSelectCollSeq(multiSelectCollSeq81658,2866997
static int multiSelect(81713,2868771
static int generateOutputSubroutine(82059,2880644
static int multiSelectOrderBy(82282,2888809
static Expr *substExpr(substExpr82642,2902154
static void substExprList(82674,2903241
static void substSelect(82686,2903648
static int flattenSubquery(82819,2909007
static u8 minMaxQuery(83199,2922847
static Table *isSimpleCount(isSimpleCount83230,2923960
SQLITE_PRIVATE int sqlite3IndexedByLookup(83260,2924830
static int selectExpander(83302,2926420
static int exprWalkNoop(83530,2934696
static void sqlite3SelectExpand(83548,2935389
static int selectAddSubqueryTypeInfo(83571,2936151
static void sqlite3SelectAddTypeInfo(83605,2937133
SQLITE_PRIVATE void sqlite3SelectPrep(83628,2937907
static void resetAccumulator(83651,2938685
static void finalizeAggFunctions(83683,2939738
static void updateAccumulator(83699,2940270
SQLITE_PRIVATE int sqlite3Select(83810,2944618
SQLITE_PRIVATE void sqlite3PrintExpr(84455,2969776
SQLITE_PRIVATE void sqlite3PrintExprList(84471,2970172
SQLITE_PRIVATE void sqlite3PrintSelect(84480,2970386
typedef struct TabResult 84563,2973086
  char **azResult;azResult84564,2973113
  char *zErrMsg;zErrMsg84565,2973159
  int nAlloc;84566,2973225
  int nRow;84567,2973283
  int nColumn;84568,2973339
  int nData;84569,2973398
  int rc;84570,2973469
} TabResult;84571,2973528
static int sqlite3_get_table_cb(84578,2973717
SQLITE_API int sqlite3_get_table(84652,2975883
SQLITE_API void sqlite3_free_table(84718,2977868
SQLITE_PRIVATE void sqlite3DeleteTriggerStep(84752,2978902
SQLITE_PRIVATE Trigger *sqlite3TriggerList(sqlite3TriggerList84780,2979963
SQLITE_PRIVATE void sqlite3BeginTrigger(84812,2981042
SQLITE_PRIVATE void sqlite3FinishTrigger(84986,2987514
SQLITE_PRIVATE TriggerStep *sqlite3TriggerSelectStep(sqlite3TriggerSelectStep85067,2990365
static TriggerStep *triggerStepAllocate(triggerStepAllocate85085,2990960
SQLITE_PRIVATE TriggerStep *sqlite3TriggerInsertStep(sqlite3TriggerInsertStep85110,2991687
SQLITE_PRIVATE TriggerStep *sqlite3TriggerUpdateStep(sqlite3TriggerUpdateStep85143,2992974
SQLITE_PRIVATE TriggerStep *sqlite3TriggerDeleteStep(sqlite3TriggerDeleteStep85168,2993965
SQLITE_PRIVATE void sqlite3DeleteTrigger(85187,2994532
SQLITE_PRIVATE void sqlite3DropTrigger(85205,2995211
static Table *tableOfTrigger(tableOfTrigger85244,2996275
SQLITE_PRIVATE void sqlite3DropTriggerPtr(85253,2996508
SQLITE_PRIVATE void sqlite3UnlinkAndDeleteTrigger(85311,2998410
static int checkColumnOverlap(85336,2999396
SQLITE_PRIVATE Trigger *sqlite3TriggersExist(sqlite3TriggersExist85351,2999921
static SrcList *targetSrcList(targetSrcList85383,3001035
static int codeTriggerProgram(85408,3001792
static const char *onErrorText(onErrorText85485,3004301
static void transferParseError(85503,3004808
static TriggerPrg *codeRowTrigger(codeRowTrigger85518,3005240
static TriggerPrg *getRowTrigger(getRowTrigger85628,3009410
SQLITE_PRIVATE void sqlite3CodeRowTriggerDirect(85662,3010621
SQLITE_PRIVATE void sqlite3CodeRowTrigger(85733,3014077
SQLITE_PRIVATE u32 sqlite3TriggerColmask(85795,3016946
SQLITE_PRIVATE void sqlite3ColumnDefault(85886,3020689
SQLITE_PRIVATE void sqlite3Update(85914,3021616
# define pTrigger 85980,3024683
# define isView 85981,3024703
# define tmask 85982,3024721
# undef isView85985,3024769
# define isView 85986,3024784
 #undef isView86395,3038460
 #undef pTrigger86398,3038498
static void updateVirtualTable(86421,3039201
static int vacuumFinalize(86518,3043035
static int execSql(86530,3043313
static int execExecSql(86549,3043865
SQLITE_PRIVATE void sqlite3Vacuum(86577,3044685
SQLITE_PRIVATE int sqlite3RunVacuum(86588,3044909
static int createModule(86844,3054829
SQLITE_API int sqlite3_create_module(86886,3056094
SQLITE_API int sqlite3_create_module_v2(86898,3056558
SQLITE_PRIVATE void sqlite3VtabLock(86916,3057346
SQLITE_PRIVATE VTable *sqlite3GetVTable(sqlite3GetVTable86926,3057638
SQLITE_PRIVATE void sqlite3VtabUnlock(86937,3057990
static VTable *vtabDisconnectAll(vtabDisconnectAll86961,3058658
SQLITE_PRIVATE void sqlite3VtabUnlockList(87015,3060575
SQLITE_PRIVATE void sqlite3VtabClear(87046,3061619
static void addModuleArgument(87063,3062060
SQLITE_PRIVATE void sqlite3VtabBeginParse(87088,3062842
static void addArgumentToVtab(87132,3064608
SQLITE_PRIVATE void sqlite3VtabFinishParse(87145,3065006
SQLITE_PRIVATE void sqlite3VtabArgInit(87227,3067982
SQLITE_PRIVATE void sqlite3VtabArgExtend(87237,3068263
static int vtabCallConstructor(87253,3068680
SQLITE_PRIVATE int sqlite3VtabCallConnect(87359,3071869
static int addToVTrans(87393,3072737
SQLITE_PRIVATE int sqlite3VtabCallCreate(87422,3073692
SQLITE_API int sqlite3_declare_vtab(87460,3074974
SQLITE_PRIVATE int sqlite3VtabCallDestroy(87523,3076589
static void callFinaliser(87554,3077522
SQLITE_PRIVATE int sqlite3VtabSync(87581,3078326
SQLITE_PRIVATE int sqlite3VtabRollback(87605,3078942
SQLITE_PRIVATE int sqlite3VtabCommit(87614,3079195
SQLITE_PRIVATE int sqlite3VtabBegin(87627,3079624
SQLITE_PRIVATE FuncDef *sqlite3VtabOverloadFunction(sqlite3VtabOverloadFunction87677,3081082
SQLITE_PRIVATE void sqlite3VtabMakeWritable(87743,3083190
SQLITE_PRIVATE int sqlite3WhereTrace 87789,3084855
# define WHERETRACE(87792,3084954
# define WHERETRACE(87794,3085027
typedef struct WhereClause WhereClause;87799,3085082
typedef struct WhereMaskSet WhereMaskSet;87800,3085122
typedef struct WhereOrInfo WhereOrInfo;87801,3085164
typedef struct WhereAndInfo WhereAndInfo;87802,3085204
typedef struct WhereCost WhereCost;87803,3085246
typedef struct WhereTerm WhereTerm;87856,3087773
struct WhereTerm 87857,3087809
  Expr *pExpr;pExpr87858,3087828
  int iParent;87859,3087907
  int leftCursor;87860,3087987
    int leftColumn;87862,3088067
    WhereOrInfo *pOrInfo;pOrInfo87863,3088139
    WhereAndInfo *pAndInfo;pAndInfo87864,3088211
  } u;87865,3088284
  u16 eOperator;87866,3088291
  u8 wtFlags;87867,3088353
  u8 nChild;87868,3088416
  WhereClause *pWC;pWC87869,3088488
  Bitmask prereqRight;87870,3088552
  Bitmask prereqAll;87871,3088624
#define TERM_DYNAMIC 87877,3088743
#define TERM_VIRTUAL 87878,3088822
#define TERM_CODED 87879,3088896
#define TERM_COPIED 87880,3088960
#define TERM_ORINFO 87881,3089009
#define TERM_ANDINFO 87882,3089090
#define TERM_OR_OK 87883,3089169
struct WhereClause 87889,3089391
  Parse *pParse;pParse87890,3089412
  WhereMaskSet *pMaskSet;pMaskSet87891,3089464
  Bitmask vmask;87892,3089541
  u8 op;87893,3089616
  int nTerm;87894,3089682
  int nSlot;87895,3089731
  WhereTerm *a;a87896,3089789
  WhereTerm aStatic[aStatic87898,3089900
  WhereTerm aStatic[aStatic87900,3089968
struct WhereOrInfo 87908,3090181
  WhereClause wc;87909,3090202
  Bitmask indexable;87910,3090263
struct WhereAndInfo 87917,3090488
  WhereClause wc;87918,3090510
struct WhereMaskSet 87947,3091841
  int n;87948,3091863
  int ix[ix87949,3091934
struct WhereCost 87956,3092111
  WherePlan plan;87957,3092130
  double rCost;87958,3092177
  double nRow;87959,3092250
  Bitmask used;87960,3092309
#define WO_IN 87968,3092549
#define WO_EQ 87969,3092573
#define WO_LT 87970,3092597
#define WO_LE 87971,3092638
#define WO_GT 87972,3092679
#define WO_GE 87973,3092720
#define WO_MATCH 87974,3092761
#define WO_ISNULL 87975,3092785
#define WO_OR 87976,3092809
#define WO_AND 87977,3092876
#define WO_ALL 87979,3092945
#define WO_SINGLE 87980,3093014
#define WHERE_ROWID_EQ 87995,3093732
#define WHERE_ROWID_RANGE 87996,3093806
#define WHERE_COLUMN_EQ 87997,3093880
#define WHERE_COLUMN_RANGE 87998,3093959
#define WHERE_COLUMN_IN 87999,3094025
#define WHERE_COLUMN_NULL 88000,3094081
#define WHERE_INDEXED 88001,3094136
#define WHERE_IN_ABLE 88002,3094209
#define WHERE_TOP_LIMIT 88003,3094285
#define WHERE_BTM_LIMIT 88004,3094359
#define WHERE_IDX_ONLY 88005,3094433
#define WHERE_ORDERBY 88006,3094506
#define WHERE_REVERSE 88007,3094587
#define WHERE_UNIQUE 88008,3094654
#define WHERE_VIRTUALTABLE 88009,3094728
#define WHERE_MULTI_OR 88010,3094802
static void whereClauseInit(88015,3094932
static void whereOrInfoDelete(88034,3095457
static void whereAndInfoDelete(88042,3095642
static void whereClauseClear(88051,3095906
static int whereClauseInsert(88089,3097361
static void whereSplit(88134,3098908
#define initMaskSet(88148,3099239
static Bitmask getMask(88154,3099389
static void createMask(88173,3099905
static Bitmask exprTableUsage(88194,3100833
static Bitmask exprListTableUsage(88210,3101304
static Bitmask exprSelectTableUsage(88220,3101545
static int allowedOp(88238,3102152
#define SWAP(88249,3102438
static void exprCommute(88263,3103025
static u16 operatorMask(88286,3103931
static WhereTerm *findTerm(findTerm88313,3104714
static void exprAnalyzeAll(88368,3106416
static int isLikeOrGlob(88387,3106984
static int isMatchOfColumn(88495,3111058
static void transferJoinMarkings(88521,3111599
static void exprAnalyzeOrTerm(88603,3114983
static void exprAnalyze(88853,3125283
static int referencesOtherTables(89095,3134080
static int isSortingIndex(89130,3135501
static double estLog(89259,3140531
static void TRACE_IDX_INPUTS(89276,3140944
static void TRACE_IDX_OUTPUTS(89294,3141471
#define TRACE_IDX_INPUTS(89309,3141996
#define TRACE_IDX_OUTPUTS(89310,3142024
static void bestOrClauseIndex(89326,3142498
static sqlite3_index_info *allocateIndexInfo(allocateIndexInfo89408,3145663
static int vtabBestIndex(89521,3150038
static void bestVirtualIndex(89570,3151654
static int whereRangeRegion(89714,3157247
static int valueFromExpr(89809,3160461
static int whereRangeScanEst(89869,3162871
static void bestBtreeIndex(89971,3166193
static void bestIndex(90295,3178637
static void disableTerm(90341,3180512
static void codeApplyAffinity(90367,3181366
static int codeEqualityTerm(90407,3182508
static int codeAllEqualityTerms(90500,3186148
static Bitmask codeOneLoopStart(90574,3188823
SQLITE_API char sqlite3_query_plan[sqlite3_query_plan91203,3214545
static int nQPlan 91204,3214615
static void whereInfoFree(91212,3214753
SQLITE_PRIVATE WhereInfo *sqlite3WhereBegin(sqlite3WhereBegin91319,3219088
SQLITE_PRIVATE void sqlite3WhereEnd(91758,3236774
#define YYNOERRORRECOVERY 91896,3241768
#define yytestcase(91901,3241847
struct LimitVal 91907,3241988
  Expr *pLimit;pLimit91908,3242006
  Expr *pOffset;pOffset91909,3242080
struct LikeOp 91916,3242264
  Token eOperator;91917,3242280
  int not;91918,3242335
struct TrigEvent 91930,3242676
struct TrigEvent { int a;91930,3242676
struct TrigEvent { int a; IdList * b;91930,3242676
struct AttachKey 91935,3242796
struct AttachKey { int type;91935,3242796
struct AttachKey { int type;  Token key;91935,3242796
  static void spanSet(91942,3243056
  static void spanExpr(91951,3243376
  static void spanBinaryExpr(91960,3243734
  static void spanUnaryPostfix(91974,3244256
  static void binaryToUnaryIfNull(91988,3244889
  static void spanUnaryPrefix(91999,3245211
# define INTERFACE 92023,3246111
#define YYCODETYPE 92059,3248431
#define YYNOCODE 92060,3248464
#define YYACTIONTYPE 92061,3248485
#define YYWILDCARD 92062,3248525
#define sqlite3ParserTOKENTYPE 92063,3248547
  int yyinit;92065,3248600
  sqlite3ParserTOKENTYPE yy0;92066,3248614
  Select* yy3;92067,3248644
  ExprList* yy14;92068,3248659
  SrcList* yy65;92069,3248677
  struct LikeOp yy96;92070,3248694
  Expr* yy132;92071,3248716
  u8 yy186;92072,3248731
  int yy328;92073,3248743
  ExprSpan yy346;92074,3248756
  struct TrigEvent yy378;92075,3248774
  IdList* yy408;92076,3248800
  struct {int value;92077,3248817
  struct {int value; int mask;92077,3248817
  struct {int value; int mask;} yy429;92077,3248817
  TriggerStep* yy473;92078,3248856
  struct LimitVal yy476;92079,3248878
} YYMINORTYPE;92080,3248903
#define YYSTACKDEPTH 92082,3248939
#define sqlite3ParserARG_SDECL 92084,3248971
#define sqlite3ParserARG_PDECL 92085,3249017
#define sqlite3ParserARG_FETCH 92086,3249063
#define sqlite3ParserARG_STORE 92087,3249128
#define YYNSTATE 92088,3249186
#define YYNRULE 92089,3249207
#define YYFALLBACK 92090,3249227
#define YY_NO_ACTION 92091,3249248
#define YY_ACCEPT_ACTION 92092,3249295
#define YY_ERROR_ACTION 92093,3249342
static const YYMINORTYPE yyzerominor 92097,3249486
# define yytestcase(92108,3249880
#define YY_ACTTAB_COUNT 92159,3252112
static const YYACTIONTYPE yy_action[yy_action92160,3252143
static const YYCODETYPE yy_lookahead[yy_lookahead92317,3263658
#define YY_SHIFT_USE_DFLT 92474,3275174
#define YY_SHIFT_COUNT 92475,3275206
#define YY_SHIFT_MIN 92476,3275235
#define YY_SHIFT_MAX 92477,3275264
static const short yy_shift_ofst[yy_shift_ofst92478,3275294
#define YY_REDUCE_USE_DFLT 92522,3278438
#define YY_REDUCE_COUNT 92523,3278472
#define YY_REDUCE_MIN 92524,3278502
#define YY_REDUCE_MAX 92525,3278533
static const short yy_reduce_ofst[yy_reduce_ofst92526,3278564
static const YYACTIONTYPE yy_default[yy_default92560,3280933
static const YYCODETYPE yyFallback[yyFallback92638,3286071
struct yyStackEntry 92721,3288784
  YYACTIONTYPE stateno;92722,3288806
  YYCODETYPE major;92723,3288854
  YYMINORTYPE minor;92725,3288995
typedef struct yyStackEntry yyStackEntry;92728,3289127
struct yyParser 92732,3289269
  int yyidx;92733,3289287
  int yyidxMax;92735,3289383
  int yyerrcnt;92737,3289451
  int yystksz;92740,3289623
  yyStackEntry *yystack;yystack92741,3289687
  yyStackEntry yystack[yystack92743,3289750
typedef struct yyParser yyParser;92746,3289824
static FILE *yyTraceFILE yyTraceFILE92749,3289874
static char *yyTracePrompt yyTracePrompt92750,3289904
SQLITE_PRIVATE void sqlite3ParserTrace(92771,3290448
static const char *const yyTokenName[yyTokenName92782,3290840
static const char *const yyRuleName[yyRuleName92853,3295407
static void yyGrowStack(93192,3309270
SQLITE_PRIVATE void *sqlite3ParserAlloc(sqlite3ParserAlloc93223,3309981
static void yy_destructor(93245,3310582
      break;93267,3311406
      break;93274,3311556
      break;93290,3311985
      break;93298,3312170
      break;93310,3312477
      break;93317,3312642
      break;93323,3312785
      break;93328,3312890
    default:  break;93329,3312903
static int yy_pop_parser_stack(93341,3313196
SQLITE_PRIVATE void sqlite3ParserFree(93373,3314103
SQLITE_PRIVATE int sqlite3ParserStackPeak(93392,3314687
static int yy_find_shift_action(93406,3315090
static int yy_find_reduce_action(93471,3316943
static void yyStackOverflow(93501,3317666
static void yy_shift(93522,3318322
  YYCODETYPE lhs;93569,3319738
  unsigned char nrhs;93570,3319811
} yyRuleInfo[yyRuleInfo93571,3319889
static void yy_reduce(93910,3324688
        break;93992,3327981
        break;93997,3328122
        break;94002,3328278
        break;94007,3328494
        break;94013,3328632
{yygotominor.yy328 yy32894026,3329467
        break;94027,3329492
{yygotominor.yy328 yy32894036,3330065
        break;94037,3330090
        break;94042,3330252
        break;94048,3330429
        break;94054,3330644
        break;94060,3330788
{yygotominor.yy0 yy094083,3332228
        break;94084,3332268
        break;94087,3332375
        break;94093,3332594
        break;94099,3332826
        break;94102,3333021
        break;94106,3333211
        break;94109,3333333
        break;94118,3333606
        break;94125,3333774
        break;94128,3333887
        break;94131,3334069
        break;94134,3334196
        break;94137,3334324
        break;94140,3334504
        break;94143,3334621
        break;94146,3334733
        break;94149,3334844
        break;94152,3335014
{ yygotominor.yy429.value value94155,3335145
{ yygotominor.yy429.value = 0;     yygotominor.yy429.mask mask94155,3335145
        break;94156,3335217
        break;94159,3335372
        break;94162,3335527
        break;94165,3335643
        break;94168,3335762
        break;94171,3335877
        break;94174,3335993
        break;94177,3336110
{yygotominor.yy328 yy32894182,3336446
        break;94183,3336490
        break;94186,3336591
        break;94189,3336700
        break;94192,3336885
        break;94195,3337045
        break;94198,3337180
        break;94204,3337494
        break;94207,3337576
        break;94210,3337658
        break;94213,3337769
        break;94216,3337862
        break;94219,3337957
        break;94224,3338110
        break;94229,3338369
        break;94234,3338521
      case 94235,3338536
        break;94241,3338730
        break;94244,3338828
        break;94255,3339161
        break;94258,3339257
        break;94263,3339652
{yygotominor.yy14 yy1494266,3339794
        break;94267,3339837
{yygotominor.yy14 yy1494273,3340140
        break;94274,3340164
        break;94281,3340518
      case 94282,3340533
        break;94287,3340709
      case 94288,3340724
        break;94295,3341071
        break;94298,3341140
        break;94301,3341267
        break;94307,3341424
        break;94313,3341687
        break;94316,3341763
        break;94322,3342133
        break;94327,3342405
        break;94339,3343018
{yygotominor.yy0.z=z94342,3343129
{yygotominor.yy0.z=0; yygotominor.yy0.n=n94342,3343129
        break;94343,3343173
        break;94346,3343329
        break;94349,3343422
        break;94352,3343557
        break;94355,3343714
        break;94358,3343893
{yygotominor.yy132 yy13294365,3344310
        break;94366,3344360
{yygotominor.yy132 yy13294372,3344664
        break;94373,3344689
        break;94376,3344798
{yygotominor.yy408 yy40894379,3344957
        break;94380,3345002
{yygotominor.yy408 yy40894383,3345121
        break;94384,3345146
{yygotominor.yy14 yy1494388,3345373
        break;94389,3345415
        break;94395,3345708
        break;94401,3345974
{yygotominor.yy328 yy32894404,3346092
        break;94405,3346129
        break;94408,3346223
        break;94411,3346337
        break;94414,3346487
        break;94417,3346675
        break;94420,3346862
        break;94426,3347104
        break;94433,3347470
        break;94439,3347727
        break;94445,3347951
        break;94448,3348176
        break;94451,3348384
        break;94454,3348583
        break;94457,3348693
        break;94460,3348787
{yygotominor.yy14 yy1494463,3348941
        break;94464,3349041
{yygotominor.yy14 yy1494467,3349164
        break;94468,3349245
        break;94471,3349414
        break;94474,3349546
{yygotominor.yy346 yy34694477,3349669
        break;94478,3349713
        break;94481,3349897
{spanExpr(&yygotominor.yy346, pParse, yymsp[0].major, &yymsp[0].minor.yy0)yy094485,3350090
        break;94486,3350167
{spanExpr(&yygotominor.yy346, pParse, TK_ID, &yymsp[0].minor.yy0)yy094489,3350282
        break;94490,3350350
      case 94491,3350365
        break;94498,3350702
      case 94499,3350717
        break;94508,3351197
        break;94523,3351883
        break;94530,3352152
        break;94537,3352456
        break;94543,3352720
        break;94555,3353282
        break;94561,3353500
        break;94572,3353921
{spanBinaryExpr(&yygotominor.yy346,pParse,yymsp[-1].major,&yymsp[-2].minor.yy346,&yymsp[0].minor.yy346)yy34694581,3354538
        break;94582,3354644
{yygotominor.yy96.eOperator eOperator94585,3354766
{yygotominor.yy96.eOperator = yymsp[0].minor.yy0; yygotominor.yy96.not not94585,3354766
        break;94586,3354843
{yygotominor.yy96.eOperator eOperator94589,3354973
{yygotominor.yy96.eOperator = yymsp[0].minor.yy0; yygotominor.yy96.not not94589,3354973
        break;94590,3355050
        break;94593,3355156
        break;94608,3355925
        break;94611,3356096
        break;94614,3356257
        break;94620,3356511
        break;94626,3356773
{spanUnaryPrefix(&yygotominor.yy346,pParse,yymsp[-1].major,&yymsp[0].minor.yy346,&yymsp[-1].minor.yy0)yy094629,3356898
        break;94630,3357003
        break;94633,3357159
        break;94636,3357313
      case 94637,3357328
        break;94651,3358016
        break;94665,3358681
        break;94679,3359245
        break;94694,3359968
      case 94695,3359983
        break;94710,3360868
      case 94711,3360883
        break;94724,3361361
        break;94737,3361916
        break;94743,3362208
        break;94749,3362467
        break;94756,3362886
{yygotominor.yy328 yy32894759,3363014
        break;94760,3363046
        break;94763,3363129
      case 94764,3363144
        break;94776,3363698
      case 94777,3363713
        break;94789,3364240
        break;94792,3364337
        break;94795,3364483
        break;94799,3364627
        break;94802,3364757
        break;94805,3364915
        break;94808,3365077
        break;94811,3365239
        break;94814,3365405
        break;94822,3365696
        break;94828,3366180
{ yygotominor.yy328 yy32894831,3366307
        break;94832,3366342
        break;94835,3366437
        break;94838,3366537
{yygotominor.yy378.a a94841,3366680
{yygotominor.yy378.a = yymsp[0].major; yygotominor.yy378.b b94841,3366680
        break;94842,3366745
        break;94845,3366900
{ yygotominor.yy132 yy13294848,3367014
        break;94849,3367041
{ yygotominor.yy132 yy13294852,3367174
        break;94853,3367226
        break;94861,3367524
        break;94868,3367743
        break;94876,3367988
        break;94883,3368188
        break;94890,3368387
        break;94893,3368640
        break;94896,3368904
        break;94899,3369151
        break;94902,3369343
        break;94905,3369484
        break;94915,3369835
        break;94925,3370236
        break;94928,3370331
        break;94931,3370418
        break;94936,3370570
        break;94941,3370768
        break;94946,3370898
        break;94949,3370983
        break;94952,3371113
        break;94955,3371198
        break;94958,3371328
        break;94963,3371487
        break;94968,3371652
        break;94974,3371823
        break;94977,3371916
        break;94980,3372045
        break;94985,3372242
        break;94988,3372321
        break;94993,3372570
        break;95035,3375272
  yygoto 95037,3375292
  yysize 95038,3375329
  yyact 95040,3375397
static void yy_parse_failed(95068,3376227
static void yy_syntax_error(95087,3376772
#define TOKEN 95093,3377026
static void yy_accept(95105,3377430
SQLITE_PRIVATE void sqlite3Parser(95139,3378496
# define charMap(95318,3384632
# define charMap(95321,3384718
const unsigned char ebcdicToAscii[ebcdicToAscii95322,3384770
static int keywordCode(95370,3387371
SQLITE_PRIVATE int sqlite3KeywordCode(95622,3400293
#define SQLITE_N_KEYWORD 95625,3400400
#define IdChar(95648,3401176
SQLITE_PRIVATE const char sqlite3IsEbcdicIdChar[sqlite3IsEbcdicIdChar95651,3401269
#define IdChar(95666,3402124
SQLITE_PRIVATE int sqlite3GetToken(95674,3402319
SQLITE_PRIVATE int sqlite3RunParser(95951,3409172
#define IdChar(96119,3414548
SQLITE_PRIVATE const char sqlite3IsEbcdicIdChar[sqlite3IsEbcdicIdChar96122,3414641
#define IdChar(96123,3414692
#define tkSEMI 96132,3414937
#define tkWS 96133,3414957
#define tkOTHER 96134,3414977
#define tkEXPLAIN 96136,3415025
#define tkCREATE 96137,3415045
#define tkTEMP 96138,3415065
#define tkTRIGGER 96139,3415085
#define tkEND 96140,3415105
SQLITE_API int sqlite3_complete(96196,3417340
SQLITE_API int sqlite3_complete16(96354,3422328
SQLITE_API const char sqlite3_version[sqlite3_version96498,3426818
SQLITE_API const char *sqlite3_libversion(sqlite3_libversion96500,3426883
SQLITE_API const char *sqlite3_sourceid(sqlite3_sourceid96501,3426958
SQLITE_API int sqlite3_libversion_number(96502,3427032
SQLITE_API int sqlite3_threadsafe(96503,3427112
SQLITE_API char *sqlite3_temp_directory sqlite3_temp_directory96522,3427771
SQLITE_API int sqlite3_initialize(96555,3429153
SQLITE_API int sqlite3_shutdown(96688,3433949
SQLITE_API int sqlite3_config(96719,3434820
      typedef void(*LOGFUNC_t)LOGFUNC_t96856,3439435
static int setupLookaside(96882,3440170
SQLITE_API sqlite3_mutex *sqlite3_db_mutex(sqlite3_db_mutex96938,3441625
SQLITE_API int sqlite3_db_config(96945,3441775
static int allSpaces(96970,3442261
static int binCollFunc(96982,3442590
static int nocaseCollatingFunc(97012,3443330
SQLITE_API sqlite_int64 sqlite3_last_insert_rowid(97029,3443683
SQLITE_API int sqlite3_changes(97036,3443855
SQLITE_API int sqlite3_total_changes(97043,3444001
SQLITE_PRIVATE void sqlite3CloseSavepoints(97052,3444270
SQLITE_API int sqlite3_close(97066,3444583
SQLITE_PRIVATE void sqlite3RollbackAll(97192,3448185
SQLITE_PRIVATE const char *sqlite3ErrStr(sqlite3ErrStr97227,3449111
static int sqliteDefaultBusyCallback(97271,3451056
# define NDELAY 97280,3451450
SQLITE_PRIVATE int sqlite3InvokeBusyHandler(97317,3452364
SQLITE_API int sqlite3_busy_handler(97333,3452737
SQLITE_API void sqlite3_progress_handler(97352,3453246
SQLITE_API int sqlite3_busy_timeout(97377,3453761
SQLITE_API void sqlite3_interrupt(97390,3454073
SQLITE_PRIVATE int sqlite3CreateFunc(97401,3454428
SQLITE_API int sqlite3_create_function(97485,3456870
SQLITE_API int sqlite3_create_function16(97504,3457370
SQLITE_API int sqlite3_overload_function(97540,3458496
SQLITE_API void *sqlite3_trace(sqlite3_trace97566,3459235
SQLITE_API void *sqlite3_profile(sqlite3_profile97583,3459801
SQLITE_API void *sqlite3_commit_hook(sqlite3_commit_hook97604,3460307
SQLITE_API void *sqlite3_update_hook(sqlite3_update_hook97622,3460853
SQLITE_API void *sqlite3_rollback_hook(sqlite3_rollback_hook97640,3461390
SQLITE_PRIVATE int sqlite3TempInMemory(97673,3462886
SQLITE_PRIVATE int sqlite3BtreeFactory(97701,3463853
SQLITE_API const char *sqlite3_errmsg(sqlite3_errmsg97746,3465386
SQLITE_API const void *sqlite3_errmsg16(sqlite3_errmsg1697773,3466015
SQLITE_API int sqlite3_errcode(97819,3467458
SQLITE_API int sqlite3_extended_errcode(97828,3467685
static int createCollation(97842,3468015
static const int aHardLimit[aHardLimit97923,3470407
SQLITE_API int sqlite3_limit(97982,3472112
static int openDatabase(98002,3472632
SQLITE_API int sqlite3_open(98233,3479382
SQLITE_API int sqlite3_open_v2(98240,3479569
SQLITE_API int sqlite3_open16(98253,3479930
SQLITE_API int sqlite3_create_collation(98290,3480907
SQLITE_API int sqlite3_create_collation_v2(98309,3481380
SQLITE_API int sqlite3_create_collation16(98330,3481907
SQLITE_API int sqlite3_collation_needed(98356,3482634
SQLITE_API int sqlite3_collation_needed16(98374,3483144
SQLITE_API int sqlite3_global_recover(98394,3483725
SQLITE_API int sqlite3_get_autocommit(98408,3484136
SQLITE_PRIVATE int sqlite3CorruptError(98423,3484659
SQLITE_PRIVATE int sqlite3MisuseError(98429,3484881
SQLITE_PRIVATE int sqlite3CantopenError(98434,3485076
SQLITE_API void sqlite3_thread_cleanup(98449,3485567
SQLITE_API int sqlite3_table_column_metadata(98458,3485793
SQLITE_API int sqlite3_sleep(98569,3489103
SQLITE_API int sqlite3_extended_result_codes(98585,3489467
SQLITE_API int sqlite3_file_control(98595,3489737
SQLITE_API int sqlite3_test_control(98629,3490548
      typedef void (*void_function)void_function98686,3492180
#define assertMutexHeld(98850,3498087
static sqlite3 *SQLITE_WSD sqlite3BlockedList 98859,3498439
static void checkListProperties(98876,3499077
# define checkListProperties(98895,3499649
static void removeFromBlockedList(98902,3499837
static void addToBlockedList(98917,3500183
static void enterMutex(98932,3500467
static void leaveMutex(98940,3500638
SQLITE_API int sqlite3_unlock_notify(98967,3501568
SQLITE_PRIVATE void sqlite3ConnectionBlocked(99016,3502929
SQLITE_PRIVATE void sqlite3ConnectionUnlocked(99044,3503897
SQLITE_PRIVATE void sqlite3ConnectionClosed(99143,3507746
# define SQLITE_CORE 99451,3520850
#define _FTSINT_H99471,3521440
# define NDEBUG 99474,3521507
#define _FTS3_TOKENIZER_H_99499,3522377
typedef struct sqlite3_tokenizer_module sqlite3_tokenizer_module;99525,3523563
typedef struct sqlite3_tokenizer sqlite3_tokenizer;99526,3523629
typedef struct sqlite3_tokenizer_cursor sqlite3_tokenizer_cursor;99527,3523681
struct sqlite3_tokenizer_module 99529,3523748
  int iVersion;99534,3523844
  int (*xCreate)xCreate99553,3524627
  int (*xDestroy)xDestroy99563,3524995
  int (*xOpen)xOpen99570,3525258
  int (*xClose)xClose99580,3525624
  int (*xNext)xNext99606,3526910
struct sqlite3_tokenizer 99615,3527308
  const sqlite3_tokenizer_module *pModule;pModule99616,3527335
struct sqlite3_tokenizer_cursor 99620,3527490
  sqlite3_tokenizer *pTokenizer;pTokenizer99621,3527524
#define _FTS3_HASH_H_99652,3528720
typedef struct Fts3Hash Fts3Hash;99655,3528785
typedef struct Fts3HashElem Fts3HashElem;99656,3528819
struct Fts3Hash 99666,3529318
  char keyClass;99667,3529336
  char copyKey;99668,3529405
  int count;99669,3529472
  Fts3HashElem *first;first99670,3529536
  int htsize;99671,3529599
  struct _fts3ht 99672,3529667
    int count;99673,3529714
    Fts3HashElem *chain;chain99674,3529782
  } *ht;ht99675,3529855
struct Fts3HashElem 99684,3530126
  Fts3HashElem *next,next99685,3530148
  Fts3HashElem *next, *prev;prev99685,3530148
  void *data;data99686,3530223
  void *pKey;pKey99687,3530292
  void *pKey; int nKey;99687,3530292
#define FTS3_HASH_STRING 99702,3530867
#define FTS3_HASH_BINARY 99703,3530897
#define fts3HashInit 99717,3531446
#define fts3HashInsert 99718,3531491
#define fts3HashFind 99719,3531538
#define fts3HashClear 99720,3531583
#define fts3HashFindElem 99721,3531629
#define fts3HashFirst(99735,3531962
#define fts3HashNext(99736,3532001
#define fts3HashData(99737,3532039
#define fts3HashKey(99738,3532077
#define fts3HashKeysize(99739,3532115
#define fts3HashCount(99744,3532198
#define FTS3_MERGE_COUNT 99756,3532601
#define FTS3_MAX_PENDING_DATA 99766,3533046
#define SizeofArray(99773,3533297
#define FTS3_VARINT_MAX 99779,3533502
# define ALWAYS(99791,3533765
# define NEVER(99792,3533788
typedef unsigned char u8;99796,3533851
typedef short int i16;99797,3533927
typedef unsigned int u32;99798,3534001
typedef sqlite3_uint64 u64;99799,3534065
#define UNUSED_PARAMETER(99803,3534202
typedef struct Fts3Table Fts3Table;99806,3534248
typedef struct Fts3Cursor Fts3Cursor;99807,3534284
typedef struct Fts3Expr Fts3Expr;99808,3534322
typedef struct Fts3Phrase Fts3Phrase;99809,3534356
typedef struct Fts3SegReader Fts3SegReader;99810,3534394
typedef struct Fts3SegFilter Fts3SegFilter;99811,3534438
struct Fts3Table 99820,3534779
  sqlite3_vtab base;99821,3534798
  sqlite3 *db;db99822,3534869
  const char *zDb;zDb99823,3534933
  const char *zName;zName99824,3534995
  int nColumn;99825,3535054
  char **azColumn;azColumn99826,3535135
  sqlite3_tokenizer *pTokenizer;pTokenizer99827,3535199
  sqlite3_stmt *aStmt[aStmt99832,3535424
  char *zSelectLeaves;zSelectLeaves99839,3535597
  int nLeavesStmt;99840,3535620
  int nLeavesTotal;99841,3535692
  int nLeavesAlloc;99842,3535770
  sqlite3_stmt **aLeavesStmt;aLeavesStmt99843,3535840
  int nNodeSize;99845,3535919
  u8 bHasContent;99846,3535984
  u8 bHasDocsize;99847,3536055
  int nMaxPendingData;99856,3536527
  int nPendingData;99857,3536550
  sqlite_int64 iPrevDocid;99858,3536570
  Fts3Hash pendingTerms;99859,3536597
struct Fts3Cursor 99867,3536839
  sqlite3_vtab_cursor base;99868,3536859
  i16 eSearch;99869,3536930
  u8 isEof;99870,3536998
  u8 isRequireSeek;99871,3537064
  sqlite3_stmt *pStmt;pStmt99872,3537145
  Fts3Expr *pExpr;pExpr99873,3537225
  sqlite3_int64 iPrevId;99874,3537291
  char *pNextId;pNextId99875,3537362
  char *aDoclist;aDoclist99876,3537436
  int nDoclist;99877,3537513
  int isMatchinfoNeeded;99878,3537580
  u32 *aMatchinfo;aMatchinfo99879,3537660
#define FTS3_FULLSCAN_SEARCH 99897,3538432
#define FTS3_DOCID_SEARCH 99898,3538503
#define FTS3_FULLTEXT_SEARCH 99899,3538578
struct Fts3Phrase 99907,3538891
  int nToken;99908,3538911
  int iColumn;99909,3538977
  int isNot;99910,3539051
  struct PhraseToken 99911,3539128
    char *z;z99912,3539151
    int n;99913,3539204
    int isPrefix;99914,3539281
  } aToken[aToken99915,3539359
struct Fts3Expr 99931,3540070
  int eType;99932,3540088
  int nNear;99933,3540168
  Fts3Expr *pParent;pParent99934,3540233
  Fts3Expr *pLeft;pLeft99935,3540314
  Fts3Expr *pRight;pRight99936,3540362
  Fts3Phrase *pPhrase;pPhrase99937,3540411
  int isLoaded;99939,3540479
  char *aDoclist;aDoclist99940,3540557
  int nDoclist;99941,3540618
  sqlite3_int64 iCurrent;99943,3540680
  char *pCurrent;pCurrent99944,3540706
#define FTSQUERY_NEAR 99958,3541009
#define FTSQUERY_NOT 99959,3541035
#define FTSQUERY_AND 99960,3541061
#define FTSQUERY_OR 99961,3541087
#define FTSQUERY_PHRASE 99962,3541113
#define FTS3_SEGMENT_REQUIRE_POS 99989,3542518
#define FTS3_SEGMENT_IGNORE_EMPTY 99990,3542564
#define FTS3_SEGMENT_COLUMN_FILTER 99991,3542610
#define FTS3_SEGMENT_PREFIX 99992,3542656
struct Fts3SegFilter 99995,3542763
  const char *zTerm;zTerm99996,3542786
  int nTerm;99997,3542807
  int iCol;99998,3542820
  int flags;99999,3542832
SQLITE_PRIVATE int sqlite3Fts3PutVarint(100051,3544707
SQLITE_PRIVATE int sqlite3Fts3GetVarint(100068,3545241
SQLITE_PRIVATE int sqlite3Fts3GetVarint32(100084,3545725
SQLITE_PRIVATE int sqlite3Fts3VarintLen(100095,3545993
SQLITE_PRIVATE void sqlite3Fts3Dequote(100118,3546489
static void fts3GetDeltaVarint(100147,3547339
static void fts3GetDeltaVarint2(100159,3547725
static int fts3DisconnectMethod(100170,3547933
void fts3DbExec(100200,3548718
static int fts3DestroyMethod(100223,3549257
static int fts3DeclareVtab(100248,3550295
static int fts3CreateTables(100281,3551340
static int fts3TableExistsCallback(100336,3552991
static void fts3TableExists(100344,3553168
static int fts3InitVtab(100377,3554191
static int fts3ConnectMethod(100513,3558191
static int fts3CreateMethod(100523,3558711
static int fts3BestIndexMethod(100542,3559518
static int fts3OpenMethod(100595,3561330
static int fulltextClose(100616,3562014
static int fts3CursorSeek(100626,3562294
static int fts3NextMethod(100652,3563038
static int fts3SelectLeaf(100689,3564391
static void fts3PutDeltaVarint(100773,3567619
static void fts3PoslistCopy(100792,3568365
static void fts3ColumnlistCopy(100819,3569202
#define OFFSET_LIST_END 100839,3569706
static void fts3ReadNextPos(100852,3570283
static int fts3PutColNumber(100872,3570877
static void fts3PoslistMerge(100886,3571167
static int fts3PoslistPhraseMerge(100955,3573179
static int fts3PoslistNearMerge(101066,3576086
#define MERGE_NOT 101110,3577331
#define MERGE_AND 101111,3577382
#define MERGE_OR 101112,3577433
#define MERGE_POS_OR 101113,3577484
#define MERGE_PHRASE 101114,3577535
#define MERGE_POS_PHRASE 101115,3577586
#define MERGE_NEAR 101116,3577637
#define MERGE_POS_NEAR 101117,3577688
static int fts3DoclistMerge(101129,3578216
typedef struct TermSelect TermSelect;101284,3582920
struct TermSelect 101285,3582958
  int isReqPos;101286,3582978
  char *aOutput;aOutput101287,3582994
  int nOutput;101288,3583057
static int fts3TermSelectCb(101296,3583295
static int fts3TermSelect(101351,3585027
static int fts3PhraseSelect(101481,3589800
static int fts3NearMerge(101538,3591815
SQLITE_PRIVATE int sqlite3Fts3ExprNearTrim(101572,3592902
static int evalFts3Expr(101610,3594023
static int fts3FilterMethod(101724,3597946
static int fts3EofMethod(101802,3600705
static int fts3RowidMethod(101812,3601052
static int fts3ColumnMethod(101826,3601454
static int fts3UpdateMethod(101865,3602864
static int fts3SyncMethod(101878,3603336
static int fts3BeginMethod(101885,3603507
static int fts3CommitMethod(101896,3603835
static int fts3RollbackMethod(101906,3604140
SQLITE_PRIVATE int sqlite3Fts3ExprLoadDoclist(101917,3604500
SQLITE_PRIVATE char *sqlite3Fts3FindPositions(sqlite3Fts3FindPositions101926,3604846
static int fts3FunctionArg(101980,3606647
static void fts3SnippetFunc(102003,3607390
static void fts3OffsetsFunc(102044,3608863
static void fts3OptimizeFunc(102070,3609654
static void fts3MatchinfoFunc(102104,3610661
static int fts3FindFunctionMethod(102126,3611314
  struct Overloaded 102133,3611669
    const char *zName;zName102134,3611691
    void (*xFunc)xFunc102135,3611714
static int fts3RenameMethod(102162,3612388
static const sqlite3_module fts3Module 102198,3613392
static void hashDestroy(102226,3614416
SQLITE_PRIVATE int sqlite3Fts3Init(102253,3615642
SQLITE_API int sqlite3_extension_init(102325,3617746
SQLITE_API int sqlite3_fts3_enable_parentheses 102404,3620472
#  define sqlite3_fts3_enable_parentheses 102407,3620570
#  define sqlite3_fts3_enable_parentheses 102409,3620621
#define SQLITE_FTS3_DEFAULT_NEAR_PARAM 102416,3620723
typedef struct ParseContext ParseContext;102419,3620767
struct ParseContext 102420,3620809
  sqlite3_tokenizer *pTokenizer;pTokenizer102421,3620831
  const char **azCol;azCol102422,3620892
  int nCol;102423,3620973
  int iDefaultCol;102424,3621046
  sqlite3_context *pCtx;pCtx102425,3621114
  int nNest;102426,3621183
static int fts3isspace(102440,3621804
static int getNextToken(102456,3622472
static void *fts3ReallocOrFree(fts3ReallocOrFree102518,3624444
static int getNextString(102538,3625179
static int getNextNode(102641,3628263
  static const struct Fts3Keyword 102647,3628566
    char *z;z102648,3628602
    unsigned char n;102649,3628663
    unsigned char parenOnly;102650,3628733
    unsigned char eType;102651,3628806
static int opPrecedence(102813,3633868
static void insertBinaryOperator(102834,3634622
static int fts3ExprParse(102865,3635750
SQLITE_PRIVATE int sqlite3Fts3ExprParse(103030,3641197
SQLITE_PRIVATE void sqlite3Fts3ExprFree(103068,3642270
static int queryTestTokenizer(103088,3642777
static void exprToString(103119,3643623
static void fts3ExprTest(103171,3645241
SQLITE_PRIVATE int sqlite3Fts3ExprInitTestInterface(103250,3647252
static void *fts3HashMalloc(fts3HashMalloc103293,3648612
static void fts3HashFree(103300,3648729
SQLITE_PRIVATE void sqlite3Fts3HashInit(103314,3649254
SQLITE_PRIVATE void sqlite3Fts3HashClear(103329,3649721
static int fts3StrHash(103352,3650246
static int fts3StrCompare(103362,3650481
static int fts3BinHash(103370,3650723
static int fts3BinCompare(103378,3650909
static int (*ftsHashFunction(ftsHashFunction103395,3651624
static int (*ftsCompareFunction(ftsCompareFunction103410,3652039
static void fts3HashInsertElement(103421,3652312
static int fts3Rehash(103451,3653221
static Fts3HashElem *fts3FindElementByHash(fts3FindElementByHash103475,3654143
static void fts3RemoveElementByHash(103503,3655031
SQLITE_PRIVATE Fts3HashElem *sqlite3Fts3HashFindElem(sqlite3Fts3HashFindElem103537,3655809
SQLITE_PRIVATE void *sqlite3Fts3HashFind(sqlite3Fts3HashFind103558,3656457
SQLITE_PRIVATE void *sqlite3Fts3HashInsert(sqlite3Fts3HashInsert103580,3657362
typedef struct porter_tokenizer 103674,3660218
  sqlite3_tokenizer base;103675,3660252
} porter_tokenizer;103676,3660300
typedef struct porter_tokenizer_cursor 103681,3660373
  sqlite3_tokenizer_cursor base;103682,3660414
  const char *zInput;zInput103683,3660447
  int nInput;103684,3660508
  int iOffset;103685,3660563
  int iToken;103686,3660627
  char *zToken;zToken103687,3660699
  int nAllocated;103688,3660762
} porter_tokenizer_cursor;103689,3660832
static int porterCreate(103695,3660903
static int porterDestroy(103714,3661279
static int porterOpen(103725,3661592
static int porterClose(103758,3662459
static const char cType[cType103767,3662682
static int isConsonant(103786,3663307
static int isVowel(103795,3663503
static int m_gt_0(103824,3664418
static int m_eq_1(103834,3664642
static int m_gt_1(103848,3664976
static int hasVowel(103862,3665296
static int doubleConsonant(103873,3665543
static int star_oh(103885,3665907
static int stem(103905,3666462
static void copy_stemmer(103930,3667342
static void porter_stemmer(103977,3668838
static const char porterIdChar[porterIdChar104200,3673950
#define isDelim(104208,3674354
static int porterNext(104214,3674562
static const sqlite3_tokenizer_module porterTokenizerModule 104262,3676094
SQLITE_PRIVATE void sqlite3Fts3PorterTokenizerModule(104275,3676340
static void scalarFunc(104337,3678526
static int fts3IsIdChar(104380,3679598
SQLITE_PRIVATE const char *sqlite3Fts3NextToken(sqlite3Fts3NextToken104394,3680233
SQLITE_PRIVATE int sqlite3Fts3InitTokenizer(104431,3680979
static void testFunc(104530,3683978
int registerTokenizer(104619,3686081
int queryTokenizer(104641,3686543
static void intTestFunc(104686,3687892
SQLITE_PRIVATE int sqlite3Fts3InitHashTable(104738,3689597
typedef struct simple_tokenizer 104809,3691631
  sqlite3_tokenizer base;104810,3691665
  char delim[delim104811,3691691
} simple_tokenizer;104812,3691750
typedef struct simple_tokenizer_cursor 104814,3691771
  sqlite3_tokenizer_cursor base;104815,3691812
  const char *pInput;pInput104816,3691845
  int nBytes;104817,3691906
  int iOffset;104818,3691961
  int iToken;104819,3692025
  char *pToken;pToken104820,3692097
  int nTokenAllocated;104821,3692160
} simple_tokenizer_cursor;104822,3692230
static int simpleDelim(104825,3692259
static int simpleCreate(104832,3692398
static int simpleDestroy(104873,3693434
static int simpleOpen(104884,3693747
static int simpleClose(104917,3694619
static int simpleNext(104928,3694945
static const sqlite3_tokenizer_module simpleTokenizerModule 104985,3696782
SQLITE_PRIVATE void sqlite3Fts3SimpleTokenizerModule(104998,3697028
typedef struct PendingList PendingList;105030,3698141
typedef struct SegmentNode SegmentNode;105031,3698181
typedef struct SegmentWriter SegmentWriter;105032,3698221
struct PendingList 105039,3698448
  int nData;105040,3698469
  char *aData;aData105041,3698482
  int nSpace;105042,3698497
  sqlite3_int64 iLastDocid;105043,3698511
  sqlite3_int64 iLastCol;105044,3698539
  sqlite3_int64 iLastPos;105045,3698565
struct Fts3SegReader 105065,3699209
  int iIdx;105066,3699232
  sqlite3_int64 iStartBlock;105067,3699313
  sqlite3_int64 iEndBlock;105068,3699342
  sqlite3_stmt *pStmt;pStmt105069,3699369
  char *aNode;aNode105070,3699444
  int nNode;105071,3699515
  int nTermAlloc;105072,3699586
  Fts3HashElem **ppNextElem;ppNextElem105073,3699657
  int nTerm;105080,3699933
  char *zTerm;zTerm105081,3700005
  char *aDoclist;aDoclist105082,3700069
  int nDoclist;105083,3700145
  char *pOffsetList;pOffsetList105086,3700299
  sqlite3_int64 iDocid;105087,3700320
#define fts3SegReaderIsPending(105090,3700348
struct SegmentWriter 105101,3700659
  SegmentNode *pTree;pTree105102,3700682
  sqlite3_int64 iFirst;105103,3700757
  sqlite3_int64 iFree;105104,3700830
  char *zTerm;zTerm105105,3700899
  int nTerm;105106,3700971
  int nMalloc;105107,3701036
  char *zMalloc;zMalloc105108,3701111
  int nSize;105109,3701192
  int nData;105110,3701260
  char *aData;aData105111,3701323
struct SegmentNode 105124,3701758
  SegmentNode *pParent;pParent105125,3701779
  SegmentNode *pRight;pRight105126,3701855
  SegmentNode *pLeftmost;pLeftmost105127,3701920
  int nEntry;105128,3702000
  char *zTerm;zTerm105129,3702079
  int nTerm;105130,3702151
  int nMalloc;105131,3702216
  char *zMalloc;zMalloc105132,3702291
  int nData;105133,3702372
  char *aData;aData105134,3702439
#define SQL_DELETE_CONTENT 105140,3702557
#define SQL_IS_EMPTY 105141,3702598
#define SQL_DELETE_ALL_CONTENT 105142,3702639
#define SQL_DELETE_ALL_SEGMENTS 105143,3702681
#define SQL_DELETE_ALL_SEGDIR 105144,3702722
#define SQL_DELETE_ALL_DOCSIZE 105145,3702763
#define SQL_DELETE_ALL_STAT 105146,3702804
#define SQL_SELECT_CONTENT_BY_ROWID 105147,3702845
#define SQL_NEXT_SEGMENT_INDEX 105148,3702886
#define SQL_INSERT_SEGMENTS 105149,3702927
#define SQL_NEXT_SEGMENTS_ID 105150,3702968
#define SQL_INSERT_SEGDIR 105151,3703009
#define SQL_SELECT_LEVEL 105152,3703050
#define SQL_SELECT_ALL_LEVEL 105153,3703091
#define SQL_SELECT_LEVEL_COUNT 105154,3703132
#define SQL_SELECT_SEGDIR_COUNT_MAX 105155,3703173
#define SQL_DELETE_SEGDIR_BY_LEVEL 105156,3703214
#define SQL_DELETE_SEGMENTS_RANGE 105157,3703255
#define SQL_CONTENT_INSERT 105158,3703296
#define SQL_GET_BLOCK 105159,3703337
#define SQL_DELETE_DOCSIZE 105160,3703378
#define SQL_REPLACE_DOCSIZE 105161,3703419
#define SQL_SELECT_DOCSIZE 105162,3703460
#define SQL_SELECT_DOCTOTAL 105163,3703501
#define SQL_REPLACE_DOCTOTAL 105164,3703542
static int fts3SqlStmt(105177,3704097
static void fts3SqlExec(105271,3707640
SQLITE_PRIVATE int sqlite3Fts3ReadBlock(105301,3708560
SQLITE_PRIVATE int sqlite3Fts3AllSegdirs(105345,3709728
static int fts3PendingListAppendVarint(105362,3710270
static int fts3PendingListAppend(105406,3711529
static int fts3PendingTermsAdd(105465,3713227
static int fts3PendingTermsDocid(105539,3715443
SQLITE_PRIVATE void sqlite3Fts3PendingTermsClear(105554,3716026
static int fts3InsertTerms(105571,3716614
static int fts3InsertData(105598,3717560
static int fts3DeleteAll(105656,3719467
static void fts3DeleteTerms(105678,3720203
static int fts3AllocateSegdirIdx(105730,3721865
static int fts3SegReaderNext(105767,3723157
static void fts3SegReaderFirstDocid(105835,3725309
static void fts3SegReaderNextDocid(105853,3726000
SQLITE_PRIVATE void sqlite3Fts3SegReaderFree(105894,3727161
SQLITE_PRIVATE int sqlite3Fts3SegReaderNew(105914,3727747
static int fts3CompareElemByTerm(106008,3730883
SQLITE_PRIVATE int sqlite3Fts3SegReaderPending(106026,3731411
static int fts3SegReaderNew(106121,3734470
static int fts3SegReaderCmp(106149,3735362
static int fts3SegReaderDoclistCmp(106182,3736229
static int fts3SegReaderTermCmp(106203,3736945
static void fts3SegReaderSort(106228,3737710
static int fts3WriteSegment(106261,3738667
static int fts3WriteSegdir(106281,3739297
static int fts3PrefixCompress(106314,3740626
static int fts3NodeAddTerm(106330,3741170
static int fts3TreeFinishNode(106441,3744980
static int fts3NodeWrite(106467,3745890
static void fts3NodeFree(106511,3747410
static int fts3SegWriterAdd(106536,3748177
static int fts3SegWriterFlush(106674,3753479
static void fts3SegWriterFree(106709,3754859
static int fts3IsEmpty(106728,3755556
static int fts3SegmentCount(106746,3756041
static int fts3SegmentCountMax(106767,3756702
static int fts3DeleteSegdir(106794,3757613
static void fts3ColumnFilter(106841,3759253
static int fts3MergeCallback(106879,3760124
static int fts3FlushCallback(106895,3760828
SQLITE_PRIVATE int sqlite3Fts3SegReaderIterate(106932,3762635
static int fts3SegmentMerge(107100,3768780
SQLITE_PRIVATE int sqlite3Fts3PendingTermsFlush(107202,3772284
static void fts3EncodeIntArray(107257,3774228
static void fts3DecodeIntArray(107273,3774654
SQLITE_PRIVATE int sqlite3Fts3MatchinfoDocsizeLocal(107303,3775654
SQLITE_PRIVATE int sqlite3Fts3MatchinfoDocsizeGlobal(107329,3776618
static void fts3InsertDocsize(107363,3777840
static void fts3UpdateDocTotals(107397,3778915
static int fts3SpecialInsert(107467,3780878
SQLITE_PRIVATE int sqlite3Fts3UpdateMethod(107500,3781763
SQLITE_PRIVATE int sqlite3Fts3Optimize(107577,3784503
typedef struct LoadDoclistCtx LoadDoclistCtx;107620,3785699
struct LoadDoclistCtx 107621,3785745
  Fts3Table *pTab;pTab107622,3785769
  int nPhrase;107623,3785820
  int nToken;107624,3785890
typedef struct SnippetIter SnippetIter;107631,3786069
typedef struct SnippetPhrase SnippetPhrase;107632,3786109
typedef struct SnippetFragment SnippetFragment;107633,3786153
struct SnippetIter 107635,3786202
  Fts3Cursor *pCsr;pCsr107636,3786223
  int iCol;107637,3786302
  int nSnippet;107638,3786375
  int nPhrase;107639,3786452
  SnippetPhrase *aPhrase;aPhrase107640,3786519
  int iCurrent;107641,3786581
struct SnippetPhrase 107644,3786656
  int nToken;107645,3786679
  char *pList;pList107646,3786746
  int iHead;107647,3786827
  char *pHead;pHead107648,3786895
  int iTail;107649,3786970
  char *pTail;pTail107650,3787047
struct SnippetFragment 107653,3787126
  int iCol;107654,3787151
  int iPos;107655,3787224
  u64 covered;107656,3787296
  u64 hlmask;107657,3787366
typedef struct MatchInfo MatchInfo;107664,3787581
struct MatchInfo 107665,3787617
  Fts3Cursor *pCursor;pCursor107666,3787636
  int nCol;107667,3787688
  u32 *aMatchinfo;aMatchinfo107668,3787755
typedef struct StrBuffer StrBuffer;107678,3788043
struct StrBuffer 107679,3788079
  char *z;z107680,3788098
  int n;107681,3788174
  int nAlloc;107682,3788252
static void fts3GetDeltaPosition(107706,3789051
static int fts3ExprIterate2(107715,3789250
static int fts3ExprIterate(107747,3790506
static int fts3ExprNearTrim(107770,3791594
static int fts3ExprLoadDoclistsCb1(107806,3792540
static int fts3ExprLoadDoclistsCb2(107831,3793134
static int fts3ExprLoadDoclists(107852,3793887
static void fts3SnippetAdvance(107874,3794756
static int fts3SnippetNextCandidate(107896,3795182
static void fts3SnippetDetails(107942,3796523
static int fts3SnippetFindPositions(107995,3798311
static int fts3BestSnippet(108033,3799570
static int fts3StringAppend(108117,3802373
int fts3SnippetShift(108168,3804170
static int fts3SnippetText(108232,3806756
static int fts3ColumnlistCount(108344,3811511
static void fts3LoadColumnlistCounts(108359,3811807
static int fts3ExprGlobalMatchinfoCb(108384,3812451
static int fts3ExprLocalMatchinfoCb(108412,3813377
static int fts3GetMatchinfo(108439,3814134
SQLITE_PRIVATE void sqlite3Fts3Snippet(108501,3816184
typedef struct TermOffset TermOffset;108599,3819695
typedef struct TermOffsetCtx TermOffsetCtx;108600,3819733
struct TermOffset 108602,3819778
  char *pList;pList108603,3819798
  int iPos;108604,3819852
  int iOff;108605,3819922
struct TermOffsetCtx 108608,3820006
  int iCol;108609,3820029
  int iTerm;108610,3820107
  sqlite3_int64 iDocid;108611,3820120
  TermOffset *aTerm;aTerm108612,3820144
static int fts3ExprTermOffsetInit(108618,3820255
SQLITE_PRIVATE void sqlite3Fts3Offsets(108646,3821110
SQLITE_PRIVATE void sqlite3Fts3Matchinfo(108781,3825560
#define VARIANT_RSTARTREE_CHOOSESUBTREE 108832,3827322
#define VARIANT_RSTARTREE_REINSERT 108833,3827364
#define VARIANT_GUTTMAN_QUADRATIC_SPLIT 108838,3827464
#define VARIANT_GUTTMAN_LINEAR_SPLIT 108839,3827506
#define VARIANT_RSTARTREE_SPLIT 108840,3827548
#define VARIANT_GUTTMAN_SPLIT 108842,3827591
  #define PickNext 108846,3827732
  #define PickSeeds 108847,3827769
  #define AssignCells 108848,3827808
  #define PickNext 108851,3827887
  #define PickSeeds 108852,3827921
  #define AssignCells 108853,3827957
  #define AssignCells 108856,3828031
typedef sqlite3_int64 i64;108867,3828168
typedef unsigned char u8;108868,3828195
typedef unsigned int u32;108869,3828221
typedef struct Rtree Rtree;108872,3828255
typedef struct RtreeCursor RtreeCursor;108873,3828283
typedef struct RtreeNode RtreeNode;108874,3828323
typedef struct RtreeCell RtreeCell;108875,3828359
typedef struct RtreeConstraint RtreeConstraint;108876,3828395
typedef union RtreeCoord RtreeCoord;108877,3828443
#define RTREE_MAX_DIMENSIONS 108880,3828553
#define HASHSIZE 108886,3828735
struct Rtree 108891,3828798
  sqlite3_vtab base;108892,3828813
  sqlite3 *db;db108893,3828834
  int iNodeSize;108894,3828895
  int nDim;108895,3828976
  int nBytesPerCell;108896,3829033
  int iDepth;108897,3829093
  char *zDb;zDb108898,3829167
  char *zName;zName108899,3829244
  RtreeNode *aHash[aHash108900,3829302
  int nBusy;108901,3829370
  RtreeNode *pDeleted;pDeleted108908,3829725
  int iReinsertHeight;108909,3829748
  sqlite3_stmt *pReadNode;pReadNode108912,3829890
  sqlite3_stmt *pWriteNode;pWriteNode108913,3829917
  sqlite3_stmt *pDeleteNode;pDeleteNode108914,3829945
  sqlite3_stmt *pReadRowid;pReadRowid108917,3830039
  sqlite3_stmt *pWriteRowid;pWriteRowid108918,3830067
  sqlite3_stmt *pDeleteRowid;pDeleteRowid108919,3830096
  sqlite3_stmt *pReadParent;pReadParent108922,3830192
  sqlite3_stmt *pWriteParent;pWriteParent108923,3830221
  sqlite3_stmt *pDeleteParent;pDeleteParent108924,3830251
  int eCoordType;108926,3830283
#define RTREE_COORD_REAL32 108930,3830343
#define RTREE_COORD_INT32 108931,3830372
#define RTREE_MINCELLS(108942,3830676
#define RTREE_REINSERT(108943,3830746
#define RTREE_MAXCELLS 108944,3830790
struct RtreeCursor 108949,3830851
  sqlite3_vtab_cursor base;108950,3830872
  RtreeNode *pNode;pNode108951,3830900
  int iCell;108952,3830979
  int iStrategy;108953,3831052
  int nConstraint;108954,3831126
  RtreeConstraint *aConstraint;aConstraint108955,3831201
union RtreeCoord 108958,3831267
  float f;108959,3831286
  int i;108960,3831297
#define DCOORD(108968,3831533
struct RtreeConstraint 108977,3831774
  int iCoord;108978,3831799
  int op;108979,3831873
  double rValue;108980,3831938
#define RTREE_EQ 108984,3832047
#define RTREE_LE 108985,3832069
#define RTREE_LT 108986,3832091
#define RTREE_GE 108987,3832113
#define RTREE_GT 108988,3832135
struct RtreeNode 109008,3832835
  RtreeNode *pParent;pParent109009,3832854
  i64 iNode;109010,3832908
  int nRef;109011,3832921
  int isDirty;109012,3832933
  u8 *zData;zData109013,3832948
  RtreeNode *pNext;pNext109014,3832961
#define NCELL(109016,3833035
struct RtreeCell 109021,3833145
  i64 iRowid;109022,3833164
  RtreeCoord aCoord[aCoord109023,3833178
# define MAX(109027,3833239
# define MIN(109030,3833300
static int readInt16(109037,3833480
static void readCoord(109040,3833538
static i64 readInt64(109049,3833734
static int writeInt16(109067,3834197
static int writeCoord(109072,3834294
static int writeInt64(109083,3834544
static void nodeReference(109098,3834830
static void nodeZero(109107,3834966
static int nodeHash(109118,3835206
static RtreeNode *nodeHashLookup(nodeHashLookup109129,3835497
static void nodeHashInsert(109139,3835733
static void nodeHashDelete(109152,3836026
static RtreeNode *nodeNew(nodeNew109168,3836547
nodeAcquire(109186,3837022
static void nodeOverwriteCell(109249,3838729
static void nodeDeleteCell(109267,3839118
nodeInsertCell(109283,3839654
nodeWrite(109309,3840238
nodeRelease(109335,3840960
static i64 nodeGetRowid(109362,3841639
static void nodeGetCoord(109374,3841886
static void nodeGetCell(109388,3842238
static int rtreeCreate(109412,3842793
static int rtreeConnect(109425,3843042
static void rtreeReference(109438,3843285
static void rtreeRelease(109446,3843464
static int rtreeDisconnect(109465,3844027
static int rtreeDestroy(109473,3844185
static int rtreeOpen(109500,3844769
static int rtreeClose(109518,3845174
static int rtreeEof(109534,3845613
static int testRtreeCell(109545,3845960
static int testRtreeEntry(109579,3847020
static int descendToCell(109611,3848036
static int nodeRowidIndex(109671,3849368
static int nodeParentIndex(109683,3849694
static int rtreeNext(109694,3849940
static int rtreeRowid(109732,3850970
static int rtreeColumn(109745,3851307
static int findLeafNode(109773,3852228
static int rtreeFilter(109791,3852707
static int rtreeBestIndex(109900,3856073
static float cellArea(109990,3859260
static float cellMargin(110003,3859590
static void cellUnion(110015,3859857
static int cellContains(110034,3860479
static float cellGrowth(110052,3860974
static float cellOverlap(110062,3861293
static float cellOverlapEnlargement(110097,3861970
static int ChooseLeaf(110119,3862449
static void AdjustTree(110203,3864686
static int rowidWrite(110227,3865347
static int parentWrite(110237,3865686
static RtreeCell *LinearPickNext(LinearPickNext110251,3866156
static void LinearPickSeeds(110269,3866485
static RtreeCell *QuadraticPickNext(QuadraticPickNext110331,3867954
  #define FABS(110339,3868108
static void QuadraticPickSeeds(110363,3868658
static void SortByDistance(110413,3869868
static void SortByDimension(110479,3871523
static int splitNodeStartree(110539,3873142
static int splitNodeGuttman(110641,3875801
static int updateMapping(110693,3877124
static int SplitNode(110712,3877598
static int fixLeafParent(110837,3880697
static int removeNode(110857,3881305
static void fixBoundingBox(110900,3882482
static int deleteCell(110923,3883195
static int Reinsert(110954,3884045
static int rtreeInsertCell(111057,3886881
static int reinsertNodeContent(111094,3887811
static int newRowid(111123,3888559
static int hashIsEmpty(111134,3888872
static int rtreeUpdate(111146,3889074
static int rtreeRename(111308,3894010
static sqlite3_module rtreeModule 111326,3894583
static int rtreeSqlInit(111349,3895870
  #define N_STATEMENT 111358,3896014
static int getIntFromStmt(111428,3898420
static int getNodeSize(111458,3899563
static int rtreeInit(111496,3900659
static void rtreenode(111599,3904157
static void rtreedepth(111637,3905164
SQLITE_PRIVATE int sqlite3RtreeInit(111653,3905692
SQLITE_API int sqlite3_extension_init(111677,3906347
# define SQLITE_MAX_LIKE_PATTERN_LENGTH 111740,3908129
static void xFree(111746,3908260
static int icuLikeCompare(111755,3908486
static void icuLikeFunc(111846,3911192
static void icuFunctionError(111892,3912522
static void icuRegexpDelete(111907,3913044
static void icuRegexpFunc(111931,3913803
static void icuCaseFunc16(112012,3916303
static void icuCollationDel(112056,3917343
static int icuCollationColl(112065,3917582
static void icuLoadCollation(112097,3918496
SQLITE_PRIVATE int sqlite3IcuInit(112136,3919609
  struct IcuScalar 112137,3919657
    const char *zName;zName112138,3919678
    int nArg;112139,3919744
    int enc;112140,3919816
    void *pContext;pContext112141,3919890
    void (*xFunc)xFunc112142,3919970
SQLITE_API int sqlite3_extension_init(112176,3921060
typedef struct IcuTokenizer IcuTokenizer;112213,3922060
typedef struct IcuCursor IcuCursor;112214,3922102
struct IcuTokenizer 112216,3922139
  sqlite3_tokenizer base;112217,3922161
  char *zLocale;zLocale112218,3922187
struct IcuCursor 112221,3922208
  sqlite3_tokenizer_cursor base;112222,3922227
  UBreakIterator *pIter;pIter112224,3922261
  int nChar;112225,3922323
  UChar *aChar;aChar112226,3922394
  int *aOffset;aOffset112227,3922466
  int nBuffer;112229,3922544
  char *zBuffer;zBuffer112230,3922559
  int iToken;112232,3922577
static int icuCreate(112238,3922637
static int icuDestroy(112268,3923277
static int icuOpen(112280,3923626
static int icuClose(112349,3925373
static int icuNext(112360,3925634
static const sqlite3_tokenizer_module icuTokenizerModule 112425,3927361
SQLITE_PRIVATE void sqlite3Fts3IcuTokenizerModule(112437,3927778

sqlite3ext.h,13679
#define _SQLITE3EXT_H_19,664
typedef struct sqlite3_api_routines sqlite3_api_routines;22,709
struct sqlite3_api_routines 34,1141
  void * (*aggregate_context)aggregate_context35,1171
  int  (*aggregate_count)aggregate_count36,1231
  int  (*bind_blob)bind_blob37,1276
  int  (*bind_double)bind_double38,1349
  int  (*bind_int)bind_int39,1398
  int  (*bind_int64)bind_int6440,1441
  int  (*bind_null)bind_null41,1495
  int  (*bind_parameter_count)bind_parameter_count42,1535
  int  (*bind_parameter_index)bind_parameter_index43,1582
  const char * (*bind_parameter_name)bind_parameter_name44,1646
  int  (*bind_text)bind_text45,1704
  int  (*bind_text16)bind_text1646,1777
  int  (*bind_value)bind_value47,1850
  int  (*busy_handler)busy_handler48,1912
  int  (*busy_timeout)busy_timeout49,1970
  int  (*changes)changes50,2011
  int  (*close)close51,2040
  int  (*collation_needed)collation_needed52,2067
  int  (*collation_needed16)collation_needed1653,2160
  const void * (*column_blob)column_blob54,2255
  int  (*column_bytes)column_bytes55,2310
  int  (*column_bytes16)column_bytes1656,2358
  int  (*column_count)column_count57,2408
  const char * (*column_database_name)column_database_name58,2452
  const void * (*column_database_name16)column_database_name1659,2511
  const char * (*column_decltype)column_decltype60,2572
  const void * (*column_decltype16)column_decltype1661,2628
  double  (*column_double)column_double62,2684
  int  (*column_int)column_int63,2736
  sqlite_int64  (*column_int64)column_int6464,2782
  const char * (*column_name)column_name65,2839
  const void * (*column_name16)column_name1666,2889
  const char * (*column_origin_name)column_origin_name67,2941
  const void * (*column_origin_name16)column_origin_name1668,2998
  const char * (*column_table_name)column_table_name69,3057
  const void * (*column_table_name16)column_table_name1670,3113
  const unsigned char * (*column_text)column_text71,3171
  const void * (*column_text16)column_text1672,3235
  int  (*column_type)column_type73,3292
  sqlite3_value* (*column_value)column_value74,3339
  void * (*commit_hook)commit_hook75,3397
  int  (*complete)complete76,3452
  int  (*complete16)complete1677,3488
  int  (*create_collation)create_collation78,3526
  int  (*create_collation16)create_collation1679,3632
  int  (*create_function)create_function80,3740
  int  (*create_function16)create_function1681,3940
  int (*create_module)create_module82,4142
  int  (*data_count)data_count83,4216
  sqlite3 * (*db_handle)db_handle84,4258
  int (*declare_vtab)declare_vtab85,4299
  int  (*enable_shared_cache)enable_shared_cache86,4344
  int  (*errcode)errcode87,4380
  const char * (*errmsg)errmsg88,4411
  const void * (*errmsg16)errmsg1689,4447
  int  (*exec)exec90,4485
  int  (*expired)expired91,4553
  int  (*finalize)finalize92,4587
  void  (*free)free93,4627
  void  (*free_table)free_table94,4651
  int  (*get_autocommit)get_autocommit95,4688
  void * (*get_auxdata)get_auxdata96,4724
  int  (*get_table)get_table97,4771
  int  (*global_recover)global_recover98,4839
  void  (*interruptx)interruptx99,4871
  sqlite_int64  (*last_insert_rowid)last_insert_rowid100,4904
  const char * (*libversion)libversion101,4952
  int  (*libversion_number)libversion_number102,4988
  void *(*malloc)malloc103,5023
  char * (*mprintf)mprintf104,5047
  int  (*open)open105,5085
  int  (*open16)open16106,5124
  int  (*prepare)prepare107,5165
  int  (*prepare16)prepare16108,5238
  void * (*profile)profile109,5313
  void  (*progress_handler)progress_handler110,5391
  void *(*realloc)realloc111,5454
  int  (*reset)reset112,5485
  void  (*result_blob)result_blob113,5522
  void  (*result_double)result_double114,5595
  void  (*result_error)result_error115,5646
  void  (*result_error16)result_error16116,5705
  void  (*result_int)result_int117,5766
  void  (*result_int64)result_int64118,5811
  void  (*result_null)result_null119,5867
  void  (*result_text)result_text120,5909
  void  (*result_text16)result_text16121,5982
  void  (*result_text16be)result_text16be122,6057
  void  (*result_text16le)result_text16le123,6134
  void  (*result_value)result_value124,6211
  void * (*rollback_hook)rollback_hook125,6269
  int  (*set_authorizer)set_authorizer126,6327
  void  (*set_auxdata)set_auxdata127,6435
  char * (*snprintf)snprintf128,6503
  int  (*step)step129,6552
  int  (*table_column_metadata)table_column_metadata130,6583
  void  (*thread_cleanup)thread_cleanup131,6703
  int  (*total_changes)total_changes132,6736
  void * (*trace)trace133,6771
  int  (*transfer_bindings)transfer_bindings134,6839
  void * (*update_hook)update_hook135,6897
  void * (*user_data)user_data136,6995
  const void * (*value_blob)value_blob137,7036
  int  (*value_bytes)value_bytes138,7082
  int  (*value_bytes16)value_bytes16139,7121
  double  (*value_double)value_double140,7162
  int  (*value_int)value_int141,7205
  sqlite_int64  (*value_int64)value_int64142,7242
  int  (*value_numeric_type)value_numeric_type143,7290
  const unsigned char * (*value_text)value_text144,7336
  const void * (*value_text16)value_text16145,7391
  const void * (*value_text16be)value_text16be146,7439
  const void * (*value_text16le)value_text16le147,7489
  int  (*value_type)value_type148,7539
  char *(*vmprintf)vmprintf149,7577
  int (*overload_function)overload_function151,7637
  int (*prepare_v2)prepare_v2153,7732
  int (*prepare16_v2)prepare16_v2154,7807
  int (*clear_bindings)clear_bindings155,7884
  int (*create_module_v2)create_module_v2157,7947
  int (*bind_zeroblob)bind_zeroblob159,8072
  int (*blob_bytes)blob_bytes160,8119
  int (*blob_close)blob_close161,8155
  int (*blob_open)blob_open162,8191
  int (*blob_read)blob_read163,8290
  int (*blob_write)blob_write164,8339
  int (*create_collation_v2)create_collation_v2165,8395
  int (*file_control)file_control166,8518
  sqlite3_int64 (*memory_highwater)memory_highwater167,8573
  sqlite3_int64 (*memory_used)memory_used168,8615
  sqlite3_mutex *(*mutex_alloc)mutex_alloc169,8653
  void (*mutex_enter)mutex_enter170,8691
  void (*mutex_free)mutex_free171,8730
  void (*mutex_leave)mutex_leave172,8768
  int (*mutex_try)mutex_try173,8807
  int (*open_v2)open_v2174,8843
  int (*release_memory)release_memory175,8900
  void (*result_error_nomem)result_error_nomem176,8930
  void (*result_error_toobig)result_error_toobig177,8978
  int (*sleep)sleep178,9027
  void (*soft_heap_limit)soft_heap_limit179,9048
  sqlite3_vfs *(*vfs_find)vfs_find180,9080
  int (*vfs_register)vfs_register181,9121
  int (*vfs_unregister)vfs_unregister182,9162
  int (*xthreadsafe)xthreadsafe183,9201
  void (*result_zeroblob)result_zeroblob184,9229
  void (*result_error_code)result_error_code185,9278
  int (*test_control)test_control186,9329
  void (*randomness)randomness187,9362
  sqlite3 *(*context_db_handle)context_db_handle188,9395
  int (*extended_result_codes)extended_result_codes189,9446
  int (*limit)limit190,9492
  sqlite3_stmt *(*next_stmt)next_stmt191,9526
  const char *(*sql)sql192,9580
  int (*status)status193,9617
#define sqlite3_aggregate_context 208,10156
#define sqlite3_aggregate_count 210,10257
#define sqlite3_bind_blob 212,10332
#define sqlite3_bind_double 213,10394
#define sqlite3_bind_int 214,10458
#define sqlite3_bind_int64 215,10519
#define sqlite3_bind_null 216,10582
#define sqlite3_bind_parameter_count 217,10644
#define sqlite3_bind_parameter_index 218,10717
#define sqlite3_bind_parameter_name 219,10790
#define sqlite3_bind_text 220,10862
#define sqlite3_bind_text16 221,10924
#define sqlite3_bind_value 222,10988
#define sqlite3_busy_handler 223,11051
#define sqlite3_busy_timeout 224,11116
#define sqlite3_changes 225,11181
#define sqlite3_close 226,11241
#define sqlite3_collation_needed 227,11299
#define sqlite3_collation_needed16 228,11368
#define sqlite3_column_blob 229,11439
#define sqlite3_column_bytes 230,11503
#define sqlite3_column_bytes16 231,11568
#define sqlite3_column_count 232,11635
#define sqlite3_column_database_name 233,11700
#define sqlite3_column_database_name16 234,11773
#define sqlite3_column_decltype 235,11848
#define sqlite3_column_decltype16 236,11916
#define sqlite3_column_double 237,11986
#define sqlite3_column_int 238,12052
#define sqlite3_column_int64 239,12115
#define sqlite3_column_name 240,12180
#define sqlite3_column_name16 241,12244
#define sqlite3_column_origin_name 242,12310
#define sqlite3_column_origin_name16 243,12381
#define sqlite3_column_table_name 244,12454
#define sqlite3_column_table_name16 245,12524
#define sqlite3_column_text 246,12596
#define sqlite3_column_text16 247,12660
#define sqlite3_column_type 248,12726
#define sqlite3_column_value 249,12790
#define sqlite3_commit_hook 250,12855
#define sqlite3_complete 251,12919
#define sqlite3_complete16 252,12980
#define sqlite3_create_collation 253,13043
#define sqlite3_create_collation16 254,13112
#define sqlite3_create_function 255,13183
#define sqlite3_create_function16 256,13251
#define sqlite3_create_module 257,13321
#define sqlite3_create_module_v2 258,13387
#define sqlite3_data_count 259,13456
#define sqlite3_db_handle 260,13519
#define sqlite3_declare_vtab 261,13581
#define sqlite3_enable_shared_cache 262,13646
#define sqlite3_errcode 263,13718
#define sqlite3_errmsg 264,13778
#define sqlite3_errmsg16 265,13837
#define sqlite3_exec 266,13898
#define sqlite3_expired 268,13986
#define sqlite3_finalize 270,14053
#define sqlite3_free 271,14114
#define sqlite3_free_table 272,14171
#define sqlite3_get_autocommit 273,14234
#define sqlite3_get_auxdata 274,14301
#define sqlite3_get_table 275,14365
#define sqlite3_global_recover 277,14458
#define sqlite3_interrupt 279,14532
#define sqlite3_last_insert_rowid 280,14595
#define sqlite3_libversion 281,14665
#define sqlite3_libversion_number 282,14728
#define sqlite3_malloc 283,14798
#define sqlite3_mprintf 284,14857
#define sqlite3_open 285,14917
#define sqlite3_open16 286,14974
#define sqlite3_prepare 287,15033
#define sqlite3_prepare16 288,15093
#define sqlite3_prepare_v2 289,15155
#define sqlite3_prepare16_v2 290,15218
#define sqlite3_profile 291,15283
#define sqlite3_progress_handler 292,15343
#define sqlite3_realloc 293,15412
#define sqlite3_reset 294,15472
#define sqlite3_result_blob 295,15530
#define sqlite3_result_double 296,15594
#define sqlite3_result_error 297,15660
#define sqlite3_result_error16 298,15725
#define sqlite3_result_int 299,15792
#define sqlite3_result_int64 300,15855
#define sqlite3_result_null 301,15920
#define sqlite3_result_text 302,15984
#define sqlite3_result_text16 303,16048
#define sqlite3_result_text16be 304,16114
#define sqlite3_result_text16le 305,16182
#define sqlite3_result_value 306,16250
#define sqlite3_rollback_hook 307,16315
#define sqlite3_set_authorizer 308,16381
#define sqlite3_set_auxdata 309,16448
#define sqlite3_snprintf 310,16512
#define sqlite3_step 311,16573
#define sqlite3_table_column_metadata 312,16630
#define sqlite3_thread_cleanup 313,16704
#define sqlite3_total_changes 314,16771
#define sqlite3_trace 315,16837
#define sqlite3_transfer_bindings 317,16926
#define sqlite3_update_hook 319,17003
#define sqlite3_user_data 320,17067
#define sqlite3_value_blob 321,17129
#define sqlite3_value_bytes 322,17192
#define sqlite3_value_bytes16 323,17256
#define sqlite3_value_double 324,17322
#define sqlite3_value_int 325,17387
#define sqlite3_value_int64 326,17449
#define sqlite3_value_numeric_type 327,17513
#define sqlite3_value_text 328,17584
#define sqlite3_value_text16 329,17647
#define sqlite3_value_text16be 330,17712
#define sqlite3_value_text16le 331,17779
#define sqlite3_value_type 332,17846
#define sqlite3_vmprintf 333,17909
#define sqlite3_overload_function 334,17970
#define sqlite3_prepare_v2 335,18040
#define sqlite3_prepare16_v2 336,18103
#define sqlite3_clear_bindings 337,18168
#define sqlite3_bind_zeroblob 338,18235
#define sqlite3_blob_bytes 339,18301
#define sqlite3_blob_close 340,18364
#define sqlite3_blob_open 341,18427
#define sqlite3_blob_read 342,18489
#define sqlite3_blob_write 343,18551
#define sqlite3_create_collation_v2 344,18614
#define sqlite3_file_control 345,18686
#define sqlite3_memory_highwater 346,18751
#define sqlite3_memory_used 347,18820
#define sqlite3_mutex_alloc 348,18884
#define sqlite3_mutex_enter 349,18948
#define sqlite3_mutex_free 350,19012
#define sqlite3_mutex_leave 351,19075
#define sqlite3_mutex_try 352,19139
#define sqlite3_open_v2 353,19201
#define sqlite3_release_memory 354,19261
#define sqlite3_result_error_nomem 355,19328
#define sqlite3_result_error_toobig 356,19399
#define sqlite3_sleep 357,19471
#define sqlite3_soft_heap_limit 358,19529
#define sqlite3_vfs_find 359,19597
#define sqlite3_vfs_register 360,19658
#define sqlite3_vfs_unregister 361,19723
#define sqlite3_threadsafe 362,19790
#define sqlite3_result_zeroblob 363,19854
#define sqlite3_result_error_code 364,19922
#define sqlite3_test_control 365,19992
#define sqlite3_randomness 366,20057
#define sqlite3_context_db_handle 367,20120
#define sqlite3_extended_result_codes 368,20190
#define sqlite3_limit 369,20264
#define sqlite3_next_stmt 370,20322
#define sqlite3_sql 371,20384
#define sqlite3_status 372,20440
#define SQLITE_EXTENSION_INIT1 375,20525
#define SQLITE_EXTENSION_INIT2(376,20605

sqlite3.h,15002
#define _SQLITE3_H_34,1511
# define SQLITE_EXTERN 49,1760
# define SQLITE_API53,1817
#define SQLITE_DEPRECATED70,2483
#define SQLITE_EXPERIMENTAL71,2509
# undef SQLITE_VERSION77,2637
# undef SQLITE_VERSION_NUMBER80,2696
#define SQLITE_VERSION 110,4095
#define SQLITE_VERSION_NUMBER 111,4136
#define SQLITE_SOURCE_ID 112,4174
SQLITE_API SQLITE_EXTERN const char sqlite3_version[sqlite3_version144,5753
typedef struct sqlite3 sqlite3;227,9604
  typedef SQLITE_INT64_TYPE sqlite_int64;246,10327
  typedef unsigned SQLITE_INT64_TYPE sqlite_uint64;247,10369
  typedef __int64 sqlite_int64;249,10470
  typedef unsigned __int64 sqlite_uint64;250,10502
  typedef long long int sqlite_int64;252,10550
  typedef unsigned long long int sqlite_uint64;253,10588
typedef sqlite_int64 sqlite3_int64;255,10643
typedef sqlite_uint64 sqlite3_uint64;256,10679
# define double 263,10867
typedef int (*sqlite3_callback)sqlite3_callback297,12165
#define SQLITE_OK 380,16159
#define SQLITE_ERROR 382,16246
#define SQLITE_INTERNAL 383,16314
#define SQLITE_PERM 384,16383
#define SQLITE_ABORT 385,16446
#define SQLITE_BUSY 386,16520
#define SQLITE_LOCKED 387,16586
#define SQLITE_NOMEM 388,16658
#define SQLITE_READONLY 389,16714
#define SQLITE_INTERRUPT 390,16789
#define SQLITE_IOERR 391,16870
#define SQLITE_CORRUPT 392,16945
#define SQLITE_NOTFOUND 393,17020
#define SQLITE_FULL 394,17094
#define SQLITE_CANTOPEN 395,17174
#define SQLITE_PROTOCOL 396,17245
#define SQLITE_EMPTY 397,17322
#define SQLITE_SCHEMA 398,17378
#define SQLITE_TOOBIG 399,17444
#define SQLITE_CONSTRAINT 400,17516
#define SQLITE_MISMATCH 401,17588
#define SQLITE_MISUSE 402,17645
#define SQLITE_NOLFS 403,17708
#define SQLITE_AUTH 404,17785
#define SQLITE_FORMAT 405,17844
#define SQLITE_RANGE 406,17914
#define SQLITE_NOTADB 407,17995
#define SQLITE_ROW 408,18073
#define SQLITE_DONE 409,18148
#define SQLITE_IOERR_READ 435,19380
#define SQLITE_IOERR_SHORT_READ 436,19443
#define SQLITE_IOERR_WRITE 437,19506
#define SQLITE_IOERR_FSYNC 438,19569
#define SQLITE_IOERR_DIR_FSYNC 439,19632
#define SQLITE_IOERR_TRUNCATE 440,19695
#define SQLITE_IOERR_FSTAT 441,19758
#define SQLITE_IOERR_UNLOCK 442,19821
#define SQLITE_IOERR_RDLOCK 443,19884
#define SQLITE_IOERR_DELETE 444,19947
#define SQLITE_IOERR_BLOCKED 445,20011
#define SQLITE_IOERR_NOMEM 446,20075
#define SQLITE_IOERR_ACCESS 447,20139
#define SQLITE_IOERR_CHECKRESERVEDLOCK 448,20203
#define SQLITE_IOERR_LOCK 449,20267
#define SQLITE_IOERR_CLOSE 450,20331
#define SQLITE_IOERR_DIR_CLOSE 451,20395
#define SQLITE_LOCKED_SHAREDCACHE 452,20459
#define SQLITE_OPEN_READONLY 462,20760
#define SQLITE_OPEN_READWRITE 463,20840
#define SQLITE_OPEN_CREATE 464,20920
#define SQLITE_OPEN_DELETEONCLOSE 465,21000
#define SQLITE_OPEN_EXCLUSIVE 466,21064
#define SQLITE_OPEN_AUTOPROXY 467,21128
#define SQLITE_OPEN_MAIN_DB 468,21192
#define SQLITE_OPEN_TEMP_DB 469,21256
#define SQLITE_OPEN_TRANSIENT_DB 470,21320
#define SQLITE_OPEN_MAIN_JOURNAL 471,21384
#define SQLITE_OPEN_TEMP_JOURNAL 472,21448
#define SQLITE_OPEN_SUBJOURNAL 473,21512
#define SQLITE_OPEN_MASTER_JOURNAL 474,21576
#define SQLITE_OPEN_NOMUTEX 475,21640
#define SQLITE_OPEN_FULLMUTEX 476,21720
#define SQLITE_OPEN_SHAREDCACHE 477,21800
#define SQLITE_OPEN_PRIVATECACHE 478,21880
#define SQLITE_IOCAP_ATOMIC 500,22840
#define SQLITE_IOCAP_ATOMIC512 501,22888
#define SQLITE_IOCAP_ATOMIC1K 502,22936
#define SQLITE_IOCAP_ATOMIC2K 503,22984
#define SQLITE_IOCAP_ATOMIC4K 504,23032
#define SQLITE_IOCAP_ATOMIC8K 505,23080
#define SQLITE_IOCAP_ATOMIC16K 506,23128
#define SQLITE_IOCAP_ATOMIC32K 507,23176
#define SQLITE_IOCAP_ATOMIC64K 508,23224
#define SQLITE_IOCAP_SAFE_APPEND 509,23272
#define SQLITE_IOCAP_SEQUENTIAL 510,23320
#define SQLITE_LOCK_NONE 519,23573
#define SQLITE_LOCK_SHARED 520,23609
#define SQLITE_LOCK_RESERVED 521,23645
#define SQLITE_LOCK_PENDING 522,23681
#define SQLITE_LOCK_EXCLUSIVE 523,23717
#define SQLITE_SYNC_NORMAL 539,24349
#define SQLITE_SYNC_FULL 540,24391
#define SQLITE_SYNC_DATAONLY 541,24433
typedef struct sqlite3_file sqlite3_file;554,24903
struct sqlite3_file 555,24945
  const struct sqlite3_io_methods *pMethods;pMethods556,24967
typedef struct sqlite3_io_methods sqlite3_io_methods;646,29087
struct sqlite3_io_methods 647,29141
  int iVersion;648,29169
  int (*xClose)xClose649,29185
  int (*xRead)xRead650,29217
  int (*xWrite)xWrite651,29286
  int (*xTruncate)xTruncate652,29362
  int (*xSync)xSync653,29417
  int (*xFileSize)xFileSize654,29459
  int (*xLock)xLock655,29516
  int (*xUnlock)xUnlock656,29552
  int (*xCheckReservedLock)xCheckReservedLock657,29590
  int (*xFileControl)xFileControl658,29648
  int (*xSectorSize)xSectorSize659,29706
  int (*xDeviceCharacteristics)xDeviceCharacteristics660,29743
#define SQLITE_FCNTL_LOCKSTATE 679,30502
#define SQLITE_GET_LOCKPROXYFILE 680,30542
#define SQLITE_SET_LOCKPROXYFILE 681,30582
#define SQLITE_LAST_ERRNO 682,30622
typedef struct sqlite3_mutex sqlite3_mutex;694,31008
typedef struct sqlite3_vfs sqlite3_vfs;825,37237
struct sqlite3_vfs 826,37277
  int iVersion;827,37298
  int szOsFile;828,37356
  int mxPathname;829,37421
  sqlite3_vfs *pNext;pNext830,37483
  const char *zName;zName831,37536
  void *pAppData;pAppData832,37602
  int (*xOpen)xOpen833,37672
  int (*xDelete)xDelete835,37778
  int (*xAccess)xAccess836,37842
  int (*xFullPathname)xFullPathname837,37918
  void *(*xDlOpen)xDlOpen838,37997
  void (*xDlError)xDlError839,38054
  void (*(*xDlSym)xDlSym840,38114
  void (*xDlClose)xDlClose841,38182
  int (*xRandomness)xRandomness842,38223
  int (*xSleep)xSleep843,38282
  int (*xCurrentTime)xCurrentTime844,38331
  int (*xGetLastError)xGetLastError845,38377
#define SQLITE_ACCESS_EXISTS 863,39087
#define SQLITE_ACCESS_READWRITE 864,39121
#define SQLITE_ACCESS_READ 865,39155
typedef struct sqlite3_mem_methods sqlite3_mem_methods;1072,49770
struct sqlite3_mem_methods 1073,49826
  void *(*xMalloc)xMalloc1074,49855
  void (*xFree)xFree1075,49921
  void *(*xRealloc)xRealloc1076,49984
  int (*xSize)xSize1077,50044
  int (*xRoundup)xRoundup1078,50116
  int (*xInit)xInit1079,50196
  void (*xShutdown)xShutdown1080,50267
  void *pAppData;pAppData1081,50340
#define SQLITE_CONFIG_SINGLETHREAD 1274,60961
#define SQLITE_CONFIG_MULTITHREAD 1275,61010
#define SQLITE_CONFIG_SERIALIZED 1276,61059
#define SQLITE_CONFIG_MALLOC 1277,61108
#define SQLITE_CONFIG_GETMALLOC 1278,61174
#define SQLITE_CONFIG_SCRATCH 1279,61240
#define SQLITE_CONFIG_PAGECACHE 1280,61306
#define SQLITE_CONFIG_HEAP 1281,61372
#define SQLITE_CONFIG_MEMSTATUS 1282,61443
#define SQLITE_CONFIG_MUTEX 1283,61496
#define SQLITE_CONFIG_GETMUTEX 1284,61564
#define SQLITE_CONFIG_LOOKASIDE 1286,61699
#define SQLITE_CONFIG_PCACHE 1287,61752
#define SQLITE_CONFIG_GETPCACHE 1288,61821
#define SQLITE_CONFIG_LOG 1289,61890
#define SQLITE_DBCONFIG_LOOKASIDE 1324,63559
#define SQLITE_DENY 2010,96134
#define SQLITE_IGNORE 2011,96204
#define SQLITE_CREATE_INDEX 2033,97329
#define SQLITE_CREATE_TABLE 2034,97408
#define SQLITE_CREATE_TEMP_INDEX 2035,97487
#define SQLITE_CREATE_TEMP_TABLE 2036,97566
#define SQLITE_CREATE_TEMP_TRIGGER 2037,97645
#define SQLITE_CREATE_TEMP_VIEW 2038,97724
#define SQLITE_CREATE_TRIGGER 2039,97803
#define SQLITE_CREATE_VIEW 2040,97882
#define SQLITE_DELETE 2041,97961
#define SQLITE_DROP_INDEX 2042,98040
#define SQLITE_DROP_TABLE 2043,98119
#define SQLITE_DROP_TEMP_INDEX 2044,98198
#define SQLITE_DROP_TEMP_TABLE 2045,98277
#define SQLITE_DROP_TEMP_TRIGGER 2046,98356
#define SQLITE_DROP_TEMP_VIEW 2047,98435
#define SQLITE_DROP_TRIGGER 2048,98514
#define SQLITE_DROP_VIEW 2049,98593
#define SQLITE_INSERT 2050,98672
#define SQLITE_PRAGMA 2051,98751
#define SQLITE_READ 2052,98830
#define SQLITE_SELECT 2053,98909
#define SQLITE_TRANSACTION 2054,98988
#define SQLITE_UPDATE 2055,99067
#define SQLITE_ATTACH 2056,99146
#define SQLITE_DETACH 2057,99225
#define SQLITE_ALTER_TABLE 2058,99304
#define SQLITE_REINDEX 2059,99383
#define SQLITE_ANALYZE 2060,99462
#define SQLITE_CREATE_VTABLE 2061,99541
#define SQLITE_DROP_VTABLE 2062,99620
#define SQLITE_FUNCTION 2063,99699
#define SQLITE_SAVEPOINT 2064,99778
#define SQLITE_COPY 2065,99857
typedef struct sqlite3_stmt sqlite3_stmt;2278,110086
#define SQLITE_LIMIT_LENGTH 2365,113702
#define SQLITE_LIMIT_SQL_LENGTH 2366,113751
#define SQLITE_LIMIT_COLUMN 2367,113800
#define SQLITE_LIMIT_EXPR_DEPTH 2368,113849
#define SQLITE_LIMIT_COMPOUND_SELECT 2369,113898
#define SQLITE_LIMIT_VDBE_OP 2370,113947
#define SQLITE_LIMIT_FUNCTION_ARG 2371,113996
#define SQLITE_LIMIT_ATTACHED 2372,114045
#define SQLITE_LIMIT_LIKE_PATTERN_LENGTH 2373,114094
#define SQLITE_LIMIT_VARIABLE_NUMBER 2374,114143
#define SQLITE_LIMIT_TRIGGER_DEPTH 2375,114192
typedef struct Mem sqlite3_value;2532,121883
typedef struct sqlite3_context sqlite3_context;2546,122465
#define SQLITE_INTEGER 2923,139578
#define SQLITE_FLOAT 2924,139604
#define SQLITE_BLOB 2925,139630
#define SQLITE_NULL 2926,139656
# undef SQLITE_TEXT2928,139701
# define SQLITE_TEXT 2930,139727
#define SQLITE3_TEXT 2932,139761
#define SQLITE_UTF8 3250,155612
#define SQLITE_UTF16LE 3251,155644
#define SQLITE_UTF16BE 3252,155676
#define SQLITE_UTF16 3253,155708
#define SQLITE_ANY 3254,155771
#define SQLITE_UTF16_ALIGNED 3255,155841
typedef void (*sqlite3_destructor_type)sqlite3_destructor_type3460,165580
#define SQLITE_STATIC 3461,165628
#define SQLITE_TRANSIENT 3462,165684
SQLITE_API SQLITE_EXTERN char *sqlite3_temp_directory;sqlite3_temp_directory3782,180404
typedef struct sqlite3_vtab sqlite3_vtab;4175,197727
typedef struct sqlite3_index_info sqlite3_index_info;4176,197769
typedef struct sqlite3_vtab_cursor sqlite3_vtab_cursor;4177,197823
typedef struct sqlite3_module sqlite3_module;4178,197879
struct sqlite3_module 4197,198649
  int iVersion;4198,198673
  int (*xCreate)xCreate4199,198689
  int (*xConnect)xConnect4202,198824
  int (*xBestIndex)xBestIndex4205,198960
  int (*xDisconnect)xDisconnect4206,199023
  int (*xDestroy)xDestroy4207,199066
  int (*xOpen)xOpen4208,199106
  int (*xClose)xClose4209,199175
  int (*xFilter)xFilter4210,199214
  int (*xNext)xNext4212,199334
  int (*xEof)xEof4213,199372
  int (*xColumn)xColumn4214,199409
  int (*xRowid)xRowid4215,199472
  int (*xUpdate)xUpdate4216,199534
  int (*xBegin)xBegin4217,199608
  int (*xSync)xSync4218,199646
  int (*xCommit)xCommit4219,199683
  int (*xRollback)xRollback4220,199722
  int (*xFindFunction)xFindFunction4221,199763
  int (*xRename)xRename4224,199952
struct sqlite3_index_info 4278,202397
  int nConstraint;4280,202440
  struct sqlite3_index_constraint 4281,202508
     int iColumn;4282,202544
     unsigned char op;4283,202620
     unsigned char usable;4284,202677
     int iTermOffset;4285,202748
  } *aConstraint;aConstraint4286,202828
  int nOrderBy;4287,202897
  struct sqlite3_index_orderby 4288,202971
     int iColumn;4289,203004
     unsigned char desc;4290,203055
  } *aOrderBy;aOrderBy4291,203123
  struct sqlite3_index_constraint_usage 4293,203194
    int argvIndex;4294,203236
    unsigned char omit;4295,203316
  } *aConstraintUsage;aConstraintUsage4296,203390
  int idxNum;4297,203413
  char *idxStr;idxStr4298,203482
  int needToFreeIdxStr;4299,203563
  int orderByConsumed;4300,203639
  double estimatedCost;4301,203708
#define SQLITE_INDEX_CONSTRAINT_EQ 4303,203781
#define SQLITE_INDEX_CONSTRAINT_GT 4304,203821
#define SQLITE_INDEX_CONSTRAINT_LE 4305,203861
#define SQLITE_INDEX_CONSTRAINT_LT 4306,203901
#define SQLITE_INDEX_CONSTRAINT_GE 4307,203942
#define SQLITE_INDEX_CONSTRAINT_MATCH 4308,203983
struct sqlite3_vtab 4367,206760
  const sqlite3_module *pModule;pModule4368,206782
  int nRef;4369,206856
  char *zErrMsg;zErrMsg4370,206911
struct sqlite3_vtab_cursor 4392,207865
  sqlite3_vtab *pVtab;pVtab4393,207894
typedef struct sqlite3_blob sqlite3_blob;4451,210301
typedef struct sqlite3_mutex_methods sqlite3_mutex_methods;4843,228225
struct sqlite3_mutex_methods 4844,228285
  int (*xMutexInit)xMutexInit4845,228316
  int (*xMutexEnd)xMutexEnd4846,228343
  sqlite3_mutex *(*xMutexAlloc)xMutexAlloc4847,228369
  void (*xMutexFree)xMutexFree4848,228407
  void (*xMutexEnter)xMutexEnter4849,228446
  int (*xMutexTry)xMutexTry4850,228486
  void (*xMutexLeave)xMutexLeave4851,228523
  int (*xMutexHeld)xMutexHeld4852,228563
  int (*xMutexNotheld)xMutexNotheld4853,228601
#define SQLITE_MUTEX_FAST 4900,230636
#define SQLITE_MUTEX_RECURSIVE 4901,230676
#define SQLITE_MUTEX_STATIC_MASTER 4902,230716
#define SQLITE_MUTEX_STATIC_MEM 4903,230756
#define SQLITE_MUTEX_STATIC_MEM2 4904,230820
#define SQLITE_MUTEX_STATIC_OPEN 4905,230876
#define SQLITE_MUTEX_STATIC_PRNG 4906,230942
#define SQLITE_MUTEX_STATIC_LRU 4907,231006
#define SQLITE_MUTEX_STATIC_LRU2 4908,231067
#define SQLITE_TESTCTRL_FIRST 4979,234164
#define SQLITE_TESTCTRL_PRNG_SAVE 4980,234215
#define SQLITE_TESTCTRL_PRNG_RESTORE 4981,234266
#define SQLITE_TESTCTRL_PRNG_RESET 4982,234317
#define SQLITE_TESTCTRL_BITVEC_TEST 4983,234368
#define SQLITE_TESTCTRL_FAULT_INSTALL 4984,234419
#define SQLITE_TESTCTRL_BENIGN_MALLOC_HOOKS 4985,234470
#define SQLITE_TESTCTRL_PENDING_BYTE 4986,234521
#define SQLITE_TESTCTRL_ASSERT 4987,234572
#define SQLITE_TESTCTRL_ALWAYS 4988,234623
#define SQLITE_TESTCTRL_RESERVE 4989,234674
#define SQLITE_TESTCTRL_OPTIMIZATIONS 4990,234725
#define SQLITE_TESTCTRL_ISKEYWORD 4991,234776
#define SQLITE_TESTCTRL_LAST 4992,234827
#define SQLITE_STATUS_MEMORY_USED 5104,240229
#define SQLITE_STATUS_PAGECACHE_USED 5105,240274
#define SQLITE_STATUS_PAGECACHE_OVERFLOW 5106,240319
#define SQLITE_STATUS_SCRATCH_USED 5107,240364
#define SQLITE_STATUS_SCRATCH_OVERFLOW 5108,240409
#define SQLITE_STATUS_MALLOC_SIZE 5109,240454
#define SQLITE_STATUS_PARSER_STACK 5110,240499
#define SQLITE_STATUS_PAGECACHE_SIZE 5111,240544
#define SQLITE_STATUS_SCRATCH_SIZE 5112,240589
#define SQLITE_DBSTATUS_LOOKASIDE_USED 5153,242257
#define SQLITE_STMTSTATUS_FULLSCAN_STEP 5204,244279
#define SQLITE_STMTSTATUS_SORT 5205,244325
typedef struct sqlite3_pcache sqlite3_pcache;5219,244761
typedef struct sqlite3_pcache_methods sqlite3_pcache_methods;5349,251801
struct sqlite3_pcache_methods 5350,251863
  void *pArg;pArg5351,251895
  int (*xInit)xInit5352,251909
  void (*xShutdown)xShutdown5353,251932
  sqlite3_pcache *(*xCreate)xCreate5354,251960
  void (*xCachesize)xCachesize5355,252018
  int (*xPagecount)xPagecount5356,252073
  void *(*xFetch)xFetch5357,252111
  void (*xUnpin)xUnpin5358,252177
  void (*xRekey)xRekey5359,252232
  void (*xTruncate)xTruncate5360,252308
  void (*xDestroy)xDestroy5361,252363
typedef struct sqlite3_backup sqlite3_backup;5375,252755
# undef double5727,271133
