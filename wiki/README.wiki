#summary One-sentence summary of this page.

= Introduction =

Add your content here.
dpthread is a thread runtime that provide deterministic order of all synchronization operations (i.e., mutex) in shared memory multi-processor environment. 

The key idea of dpthread is the same as Kendo (ASPLOS09): determine the global order of all synchronization accesses based on instruction count. However, dpthread is built on top of standard pthread runtime and perf_event, interface found in linux 2.6.32 or newer kernel, while Kendo use custom kernel interface. 

Also, dpthread provides more complete set of deterministic alternatives of pthread synchronization APIs (mutex, condition variable, and barriers.)

= Installation =

Dpthread is currently only tested on Intel Core2 processors. We use inst_retired:stores event of Core2 processors and it is the only deterministic event on Core2 processor as far as we know. Supporting for other processors is straight forward if the processor have a deterministic counter. 

Dpthread use libpfm4 library to access performance counters. You can download it from http://perfmon2.sourceforge.net. 

Once you install the libpfm4, type 'make' on the top directory of dpthread. If the build succeed, you will see lib/libdpthread.a in lib/ directory. 

{{{
$ make 
Compiling for 'i686' target
make[1]: Entering directory `/home/heechul/Projects/dpthread/src'
sh -c ./detect_cpus.sh 
...
cp -a libdpthread.a ../lib
make[1]: Leaving directory `/home/heechul/Projects/dpthread/src'
}}}

Then, you can check whether it works correctly by doing the following. 

{{{
$ make check 
...
ITERATION 9
>> compare log8.p0 vs log9.p0
>> compare log8.p1 vs log9.p1
 -> OK
PASS 
}}}